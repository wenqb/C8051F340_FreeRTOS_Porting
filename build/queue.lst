                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module queue
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _vTaskInternalSetTimeOutState
                                     12 	.globl _vTaskMissedYield
                                     13 	.globl _xTaskRemoveFromEventList
                                     14 	.globl _vTaskPlaceOnEventList
                                     15 	.globl _xTaskCheckForTimeOut
                                     16 	.globl _xTaskResumeAll
                                     17 	.globl _vTaskSuspendAll
                                     18 	.globl _vListInitialise
                                     19 	.globl _vPortFree
                                     20 	.globl _pvPortMalloc
                                     21 	.globl _vPortYield
                                     22 	.globl ___memcpy
                                     23 	.globl _SPIF
                                     24 	.globl _WCOL
                                     25 	.globl _MODF
                                     26 	.globl _RXOVRN
                                     27 	.globl _NSSMD1
                                     28 	.globl _NSSMD0
                                     29 	.globl _TXBMT
                                     30 	.globl _SPIEN
                                     31 	.globl _AD0EN
                                     32 	.globl _AD0TM
                                     33 	.globl _AD0INT
                                     34 	.globl _AD0BUSY
                                     35 	.globl _AD0WINT
                                     36 	.globl _AD0CM2
                                     37 	.globl _AD0CM1
                                     38 	.globl _AD0CM0
                                     39 	.globl _CF
                                     40 	.globl _CR
                                     41 	.globl _CCF4
                                     42 	.globl _CCF3
                                     43 	.globl _CCF2
                                     44 	.globl _CCF1
                                     45 	.globl _CCF0
                                     46 	.globl _CY
                                     47 	.globl _AC
                                     48 	.globl _F0
                                     49 	.globl _RS1
                                     50 	.globl _RS0
                                     51 	.globl _OV
                                     52 	.globl _F1
                                     53 	.globl _PARITY
                                     54 	.globl _TF2H
                                     55 	.globl _TF2
                                     56 	.globl _TF2L
                                     57 	.globl _TF2LEN
                                     58 	.globl _T2CE
                                     59 	.globl _T2SPLIT
                                     60 	.globl _TR2
                                     61 	.globl _T2CSS
                                     62 	.globl _T2XCLK
                                     63 	.globl _MASTER
                                     64 	.globl _TXMODE
                                     65 	.globl _STA
                                     66 	.globl _STO
                                     67 	.globl _ACKRQ
                                     68 	.globl _ARBLOST
                                     69 	.globl _ACK
                                     70 	.globl _SI
                                     71 	.globl _PSPI0
                                     72 	.globl _PT2
                                     73 	.globl _PS0
                                     74 	.globl _PS
                                     75 	.globl _PT1
                                     76 	.globl _PX1
                                     77 	.globl _PT0
                                     78 	.globl _PX0
                                     79 	.globl _P3_7
                                     80 	.globl _P3_6
                                     81 	.globl _P3_5
                                     82 	.globl _P3_4
                                     83 	.globl _P3_3
                                     84 	.globl _P3_2
                                     85 	.globl _P3_1
                                     86 	.globl _P3_0
                                     87 	.globl _EA
                                     88 	.globl _ESPI0
                                     89 	.globl _ET2
                                     90 	.globl _ES0
                                     91 	.globl _ES
                                     92 	.globl _ET1
                                     93 	.globl _EX1
                                     94 	.globl _ET0
                                     95 	.globl _EX0
                                     96 	.globl _P2_7
                                     97 	.globl _P2_6
                                     98 	.globl _P2_5
                                     99 	.globl _P2_4
                                    100 	.globl _P2_3
                                    101 	.globl _P2_2
                                    102 	.globl _P2_1
                                    103 	.globl _P2_0
                                    104 	.globl _S0MODE
                                    105 	.globl _SM0
                                    106 	.globl _MCE0
                                    107 	.globl _SM2
                                    108 	.globl _REN0
                                    109 	.globl _REN
                                    110 	.globl _TB80
                                    111 	.globl _TB8
                                    112 	.globl _RB80
                                    113 	.globl _RB8
                                    114 	.globl _TI0
                                    115 	.globl _TI
                                    116 	.globl _RI0
                                    117 	.globl _RI
                                    118 	.globl _P1_7
                                    119 	.globl _P1_6
                                    120 	.globl _P1_5
                                    121 	.globl _P1_4
                                    122 	.globl _P1_3
                                    123 	.globl _P1_2
                                    124 	.globl _P1_1
                                    125 	.globl _P1_0
                                    126 	.globl _TF1
                                    127 	.globl _TR1
                                    128 	.globl _TF0
                                    129 	.globl _TR0
                                    130 	.globl _IE1
                                    131 	.globl _IT1
                                    132 	.globl _IE0
                                    133 	.globl _IT0
                                    134 	.globl _P0_7
                                    135 	.globl _P0_6
                                    136 	.globl _P0_5
                                    137 	.globl _P0_4
                                    138 	.globl _P0_3
                                    139 	.globl _P0_2
                                    140 	.globl _P0_1
                                    141 	.globl _P0_0
                                    142 	.globl _PCA0CP4
                                    143 	.globl _PCA0CP3
                                    144 	.globl _PCA0CP2
                                    145 	.globl _PCA0CP1
                                    146 	.globl _PCA0CP0
                                    147 	.globl _PCA0
                                    148 	.globl _ADC0LT
                                    149 	.globl _ADC0GT
                                    150 	.globl _ADC0
                                    151 	.globl _SBRL1
                                    152 	.globl _TMR3RL
                                    153 	.globl _TMR3
                                    154 	.globl _TMR2RL
                                    155 	.globl _RCAP2
                                    156 	.globl _TMR2
                                    157 	.globl _TMR1
                                    158 	.globl _TMR0
                                    159 	.globl _VDM0CN
                                    160 	.globl _PCA0CPH4
                                    161 	.globl _PCA0CPL4
                                    162 	.globl _PCA0CPH0
                                    163 	.globl _PCA0CPL0
                                    164 	.globl _PCA0H
                                    165 	.globl _PCA0L
                                    166 	.globl _SPI0CN
                                    167 	.globl _EIP2
                                    168 	.globl _EIP1
                                    169 	.globl _P4MDIN
                                    170 	.globl _P3MDIN
                                    171 	.globl _P3MODE
                                    172 	.globl _P2MDIN
                                    173 	.globl _P2MODE
                                    174 	.globl _P1MDIN
                                    175 	.globl _P1MODE
                                    176 	.globl _P0MDIN
                                    177 	.globl _P0MODE
                                    178 	.globl _B
                                    179 	.globl _RSTSRC
                                    180 	.globl _PCA0CPH3
                                    181 	.globl _PCA0CPL3
                                    182 	.globl _PCA0CPH2
                                    183 	.globl _PCA0CPL2
                                    184 	.globl _PCA0CPH1
                                    185 	.globl _PCA0CPL1
                                    186 	.globl _ADC0CN
                                    187 	.globl _EIE2
                                    188 	.globl _EIE1
                                    189 	.globl _SMOD1
                                    190 	.globl _INT01CF
                                    191 	.globl _IT01CF
                                    192 	.globl _XBR2
                                    193 	.globl _XBR1
                                    194 	.globl _XBR0
                                    195 	.globl _ACC
                                    196 	.globl _P3SKIP
                                    197 	.globl _PCA0CPM4
                                    198 	.globl _PCA0CPM3
                                    199 	.globl _PCA0CPM2
                                    200 	.globl _PCA0CPM1
                                    201 	.globl _PCA0CPM0
                                    202 	.globl _PCA0MD
                                    203 	.globl _PCA0CN
                                    204 	.globl _USB0XCN
                                    205 	.globl _P2SKIP
                                    206 	.globl _P1SKIP
                                    207 	.globl _P0SKIP
                                    208 	.globl _SBUF1
                                    209 	.globl _SCON1
                                    210 	.globl _REF0CN
                                    211 	.globl _PSW
                                    212 	.globl _TMR2H
                                    213 	.globl _TH2
                                    214 	.globl _TMR2L
                                    215 	.globl _TL2
                                    216 	.globl _TMR2RLH
                                    217 	.globl _RCAP2H
                                    218 	.globl _TMR2RLL
                                    219 	.globl _RCAP2L
                                    220 	.globl _REG0CN
                                    221 	.globl _TMR2CN
                                    222 	.globl _T2CON
                                    223 	.globl _P4
                                    224 	.globl _ADC0LTH
                                    225 	.globl _ADC0LTL
                                    226 	.globl _ADC0GTH
                                    227 	.globl _ADC0GTL
                                    228 	.globl _SMB0DAT
                                    229 	.globl _SMB0CF
                                    230 	.globl _SMB0CN
                                    231 	.globl _ADC0H
                                    232 	.globl _ADC0L
                                    233 	.globl _ADC0CF
                                    234 	.globl _AMX0P
                                    235 	.globl _AMX0N
                                    236 	.globl _CLKMUL
                                    237 	.globl _IP
                                    238 	.globl _FLKEY
                                    239 	.globl _FLSCL
                                    240 	.globl _SBRLH1
                                    241 	.globl _SBRLL1
                                    242 	.globl _OSCICL
                                    243 	.globl _OSCICN
                                    244 	.globl _OSCXCN
                                    245 	.globl _P3
                                    246 	.globl _PFE0CN
                                    247 	.globl _P4MDOUT
                                    248 	.globl _SBCON1
                                    249 	.globl __XPAGE
                                    250 	.globl _EMI0CN
                                    251 	.globl _CLKSEL
                                    252 	.globl _IE
                                    253 	.globl _P3MDOUT
                                    254 	.globl _P2MDOUT
                                    255 	.globl _P1MDOUT
                                    256 	.globl _P0MDOUT
                                    257 	.globl _SPI0DAT
                                    258 	.globl _SPI0CKR
                                    259 	.globl _SPI0CFG
                                    260 	.globl _P2
                                    261 	.globl _CPT0MX
                                    262 	.globl _CPT1MX
                                    263 	.globl _CPT0MD
                                    264 	.globl _CPT1MD
                                    265 	.globl _CPT0CN
                                    266 	.globl _CPT1CN
                                    267 	.globl _SBUF0
                                    268 	.globl _SBUF
                                    269 	.globl _SCON0
                                    270 	.globl _SCON
                                    271 	.globl _USB0DAT
                                    272 	.globl _USB0ADR
                                    273 	.globl _TMR3H
                                    274 	.globl _TMR3L
                                    275 	.globl _TMR3RLH
                                    276 	.globl _TMR3RLL
                                    277 	.globl _TMR3CN
                                    278 	.globl _P1
                                    279 	.globl _PSCTL
                                    280 	.globl _CKCON
                                    281 	.globl _TH1
                                    282 	.globl _TH0
                                    283 	.globl _TL1
                                    284 	.globl _TL0
                                    285 	.globl _TMOD
                                    286 	.globl _TCON
                                    287 	.globl _PCON
                                    288 	.globl _OSCLCN
                                    289 	.globl _EMI0CF
                                    290 	.globl _EMI0TC
                                    291 	.globl _DPH
                                    292 	.globl _DPL
                                    293 	.globl _SP
                                    294 	.globl _P0
                                    295 	.globl _xQueueGenericReset
                                    296 	.globl _xQueueGenericCreate
                                    297 	.globl _xQueueGenericSend
                                    298 	.globl _xQueueGenericSendFromISR
                                    299 	.globl _xQueueGiveFromISR
                                    300 	.globl _xQueueReceive
                                    301 	.globl _xQueueSemaphoreTake
                                    302 	.globl _xQueuePeek
                                    303 	.globl _xQueueReceiveFromISR
                                    304 	.globl _xQueuePeekFromISR
                                    305 	.globl _uxQueueMessagesWaiting
                                    306 	.globl _uxQueueSpacesAvailable
                                    307 	.globl _uxQueueMessagesWaitingFromISR
                                    308 	.globl _vQueueDelete
                                    309 	.globl _xQueueIsQueueEmptyFromISR
                                    310 	.globl _xQueueIsQueueFullFromISR
                                    311 ;--------------------------------------------------------
                                    312 ; special function registers
                                    313 ;--------------------------------------------------------
                                    314 	.area RSEG    (ABS,DATA)
      000000                        315 	.org 0x0000
                           000080   316 G$P0$0_0$0 == 0x0080
                           000080   317 _P0	=	0x0080
                           000081   318 G$SP$0_0$0 == 0x0081
                           000081   319 _SP	=	0x0081
                           000082   320 G$DPL$0_0$0 == 0x0082
                           000082   321 _DPL	=	0x0082
                           000083   322 G$DPH$0_0$0 == 0x0083
                           000083   323 _DPH	=	0x0083
                           000084   324 G$EMI0TC$0_0$0 == 0x0084
                           000084   325 _EMI0TC	=	0x0084
                           000085   326 G$EMI0CF$0_0$0 == 0x0085
                           000085   327 _EMI0CF	=	0x0085
                           000086   328 G$OSCLCN$0_0$0 == 0x0086
                           000086   329 _OSCLCN	=	0x0086
                           000087   330 G$PCON$0_0$0 == 0x0087
                           000087   331 _PCON	=	0x0087
                           000088   332 G$TCON$0_0$0 == 0x0088
                           000088   333 _TCON	=	0x0088
                           000089   334 G$TMOD$0_0$0 == 0x0089
                           000089   335 _TMOD	=	0x0089
                           00008A   336 G$TL0$0_0$0 == 0x008a
                           00008A   337 _TL0	=	0x008a
                           00008B   338 G$TL1$0_0$0 == 0x008b
                           00008B   339 _TL1	=	0x008b
                           00008C   340 G$TH0$0_0$0 == 0x008c
                           00008C   341 _TH0	=	0x008c
                           00008D   342 G$TH1$0_0$0 == 0x008d
                           00008D   343 _TH1	=	0x008d
                           00008E   344 G$CKCON$0_0$0 == 0x008e
                           00008E   345 _CKCON	=	0x008e
                           00008F   346 G$PSCTL$0_0$0 == 0x008f
                           00008F   347 _PSCTL	=	0x008f
                           000090   348 G$P1$0_0$0 == 0x0090
                           000090   349 _P1	=	0x0090
                           000091   350 G$TMR3CN$0_0$0 == 0x0091
                           000091   351 _TMR3CN	=	0x0091
                           000092   352 G$TMR3RLL$0_0$0 == 0x0092
                           000092   353 _TMR3RLL	=	0x0092
                           000093   354 G$TMR3RLH$0_0$0 == 0x0093
                           000093   355 _TMR3RLH	=	0x0093
                           000094   356 G$TMR3L$0_0$0 == 0x0094
                           000094   357 _TMR3L	=	0x0094
                           000095   358 G$TMR3H$0_0$0 == 0x0095
                           000095   359 _TMR3H	=	0x0095
                           000096   360 G$USB0ADR$0_0$0 == 0x0096
                           000096   361 _USB0ADR	=	0x0096
                           000097   362 G$USB0DAT$0_0$0 == 0x0097
                           000097   363 _USB0DAT	=	0x0097
                           000098   364 G$SCON$0_0$0 == 0x0098
                           000098   365 _SCON	=	0x0098
                           000098   366 G$SCON0$0_0$0 == 0x0098
                           000098   367 _SCON0	=	0x0098
                           000099   368 G$SBUF$0_0$0 == 0x0099
                           000099   369 _SBUF	=	0x0099
                           000099   370 G$SBUF0$0_0$0 == 0x0099
                           000099   371 _SBUF0	=	0x0099
                           00009A   372 G$CPT1CN$0_0$0 == 0x009a
                           00009A   373 _CPT1CN	=	0x009a
                           00009B   374 G$CPT0CN$0_0$0 == 0x009b
                           00009B   375 _CPT0CN	=	0x009b
                           00009C   376 G$CPT1MD$0_0$0 == 0x009c
                           00009C   377 _CPT1MD	=	0x009c
                           00009D   378 G$CPT0MD$0_0$0 == 0x009d
                           00009D   379 _CPT0MD	=	0x009d
                           00009E   380 G$CPT1MX$0_0$0 == 0x009e
                           00009E   381 _CPT1MX	=	0x009e
                           00009F   382 G$CPT0MX$0_0$0 == 0x009f
                           00009F   383 _CPT0MX	=	0x009f
                           0000A0   384 G$P2$0_0$0 == 0x00a0
                           0000A0   385 _P2	=	0x00a0
                           0000A1   386 G$SPI0CFG$0_0$0 == 0x00a1
                           0000A1   387 _SPI0CFG	=	0x00a1
                           0000A2   388 G$SPI0CKR$0_0$0 == 0x00a2
                           0000A2   389 _SPI0CKR	=	0x00a2
                           0000A3   390 G$SPI0DAT$0_0$0 == 0x00a3
                           0000A3   391 _SPI0DAT	=	0x00a3
                           0000A4   392 G$P0MDOUT$0_0$0 == 0x00a4
                           0000A4   393 _P0MDOUT	=	0x00a4
                           0000A5   394 G$P1MDOUT$0_0$0 == 0x00a5
                           0000A5   395 _P1MDOUT	=	0x00a5
                           0000A6   396 G$P2MDOUT$0_0$0 == 0x00a6
                           0000A6   397 _P2MDOUT	=	0x00a6
                           0000A7   398 G$P3MDOUT$0_0$0 == 0x00a7
                           0000A7   399 _P3MDOUT	=	0x00a7
                           0000A8   400 G$IE$0_0$0 == 0x00a8
                           0000A8   401 _IE	=	0x00a8
                           0000A9   402 G$CLKSEL$0_0$0 == 0x00a9
                           0000A9   403 _CLKSEL	=	0x00a9
                           0000AA   404 G$EMI0CN$0_0$0 == 0x00aa
                           0000AA   405 _EMI0CN	=	0x00aa
                           0000AA   406 G$_XPAGE$0_0$0 == 0x00aa
                           0000AA   407 __XPAGE	=	0x00aa
                           0000AC   408 G$SBCON1$0_0$0 == 0x00ac
                           0000AC   409 _SBCON1	=	0x00ac
                           0000AE   410 G$P4MDOUT$0_0$0 == 0x00ae
                           0000AE   411 _P4MDOUT	=	0x00ae
                           0000AF   412 G$PFE0CN$0_0$0 == 0x00af
                           0000AF   413 _PFE0CN	=	0x00af
                           0000B0   414 G$P3$0_0$0 == 0x00b0
                           0000B0   415 _P3	=	0x00b0
                           0000B1   416 G$OSCXCN$0_0$0 == 0x00b1
                           0000B1   417 _OSCXCN	=	0x00b1
                           0000B2   418 G$OSCICN$0_0$0 == 0x00b2
                           0000B2   419 _OSCICN	=	0x00b2
                           0000B3   420 G$OSCICL$0_0$0 == 0x00b3
                           0000B3   421 _OSCICL	=	0x00b3
                           0000B4   422 G$SBRLL1$0_0$0 == 0x00b4
                           0000B4   423 _SBRLL1	=	0x00b4
                           0000B5   424 G$SBRLH1$0_0$0 == 0x00b5
                           0000B5   425 _SBRLH1	=	0x00b5
                           0000B6   426 G$FLSCL$0_0$0 == 0x00b6
                           0000B6   427 _FLSCL	=	0x00b6
                           0000B7   428 G$FLKEY$0_0$0 == 0x00b7
                           0000B7   429 _FLKEY	=	0x00b7
                           0000B8   430 G$IP$0_0$0 == 0x00b8
                           0000B8   431 _IP	=	0x00b8
                           0000B9   432 G$CLKMUL$0_0$0 == 0x00b9
                           0000B9   433 _CLKMUL	=	0x00b9
                           0000BA   434 G$AMX0N$0_0$0 == 0x00ba
                           0000BA   435 _AMX0N	=	0x00ba
                           0000BB   436 G$AMX0P$0_0$0 == 0x00bb
                           0000BB   437 _AMX0P	=	0x00bb
                           0000BC   438 G$ADC0CF$0_0$0 == 0x00bc
                           0000BC   439 _ADC0CF	=	0x00bc
                           0000BD   440 G$ADC0L$0_0$0 == 0x00bd
                           0000BD   441 _ADC0L	=	0x00bd
                           0000BE   442 G$ADC0H$0_0$0 == 0x00be
                           0000BE   443 _ADC0H	=	0x00be
                           0000C0   444 G$SMB0CN$0_0$0 == 0x00c0
                           0000C0   445 _SMB0CN	=	0x00c0
                           0000C1   446 G$SMB0CF$0_0$0 == 0x00c1
                           0000C1   447 _SMB0CF	=	0x00c1
                           0000C2   448 G$SMB0DAT$0_0$0 == 0x00c2
                           0000C2   449 _SMB0DAT	=	0x00c2
                           0000C3   450 G$ADC0GTL$0_0$0 == 0x00c3
                           0000C3   451 _ADC0GTL	=	0x00c3
                           0000C4   452 G$ADC0GTH$0_0$0 == 0x00c4
                           0000C4   453 _ADC0GTH	=	0x00c4
                           0000C5   454 G$ADC0LTL$0_0$0 == 0x00c5
                           0000C5   455 _ADC0LTL	=	0x00c5
                           0000C6   456 G$ADC0LTH$0_0$0 == 0x00c6
                           0000C6   457 _ADC0LTH	=	0x00c6
                           0000C7   458 G$P4$0_0$0 == 0x00c7
                           0000C7   459 _P4	=	0x00c7
                           0000C8   460 G$T2CON$0_0$0 == 0x00c8
                           0000C8   461 _T2CON	=	0x00c8
                           0000C8   462 G$TMR2CN$0_0$0 == 0x00c8
                           0000C8   463 _TMR2CN	=	0x00c8
                           0000C9   464 G$REG0CN$0_0$0 == 0x00c9
                           0000C9   465 _REG0CN	=	0x00c9
                           0000CA   466 G$RCAP2L$0_0$0 == 0x00ca
                           0000CA   467 _RCAP2L	=	0x00ca
                           0000CA   468 G$TMR2RLL$0_0$0 == 0x00ca
                           0000CA   469 _TMR2RLL	=	0x00ca
                           0000CB   470 G$RCAP2H$0_0$0 == 0x00cb
                           0000CB   471 _RCAP2H	=	0x00cb
                           0000CB   472 G$TMR2RLH$0_0$0 == 0x00cb
                           0000CB   473 _TMR2RLH	=	0x00cb
                           0000CC   474 G$TL2$0_0$0 == 0x00cc
                           0000CC   475 _TL2	=	0x00cc
                           0000CC   476 G$TMR2L$0_0$0 == 0x00cc
                           0000CC   477 _TMR2L	=	0x00cc
                           0000CD   478 G$TH2$0_0$0 == 0x00cd
                           0000CD   479 _TH2	=	0x00cd
                           0000CD   480 G$TMR2H$0_0$0 == 0x00cd
                           0000CD   481 _TMR2H	=	0x00cd
                           0000D0   482 G$PSW$0_0$0 == 0x00d0
                           0000D0   483 _PSW	=	0x00d0
                           0000D1   484 G$REF0CN$0_0$0 == 0x00d1
                           0000D1   485 _REF0CN	=	0x00d1
                           0000D2   486 G$SCON1$0_0$0 == 0x00d2
                           0000D2   487 _SCON1	=	0x00d2
                           0000D3   488 G$SBUF1$0_0$0 == 0x00d3
                           0000D3   489 _SBUF1	=	0x00d3
                           0000D4   490 G$P0SKIP$0_0$0 == 0x00d4
                           0000D4   491 _P0SKIP	=	0x00d4
                           0000D5   492 G$P1SKIP$0_0$0 == 0x00d5
                           0000D5   493 _P1SKIP	=	0x00d5
                           0000D6   494 G$P2SKIP$0_0$0 == 0x00d6
                           0000D6   495 _P2SKIP	=	0x00d6
                           0000D7   496 G$USB0XCN$0_0$0 == 0x00d7
                           0000D7   497 _USB0XCN	=	0x00d7
                           0000D8   498 G$PCA0CN$0_0$0 == 0x00d8
                           0000D8   499 _PCA0CN	=	0x00d8
                           0000D9   500 G$PCA0MD$0_0$0 == 0x00d9
                           0000D9   501 _PCA0MD	=	0x00d9
                           0000DA   502 G$PCA0CPM0$0_0$0 == 0x00da
                           0000DA   503 _PCA0CPM0	=	0x00da
                           0000DB   504 G$PCA0CPM1$0_0$0 == 0x00db
                           0000DB   505 _PCA0CPM1	=	0x00db
                           0000DC   506 G$PCA0CPM2$0_0$0 == 0x00dc
                           0000DC   507 _PCA0CPM2	=	0x00dc
                           0000DD   508 G$PCA0CPM3$0_0$0 == 0x00dd
                           0000DD   509 _PCA0CPM3	=	0x00dd
                           0000DE   510 G$PCA0CPM4$0_0$0 == 0x00de
                           0000DE   511 _PCA0CPM4	=	0x00de
                           0000DF   512 G$P3SKIP$0_0$0 == 0x00df
                           0000DF   513 _P3SKIP	=	0x00df
                           0000E0   514 G$ACC$0_0$0 == 0x00e0
                           0000E0   515 _ACC	=	0x00e0
                           0000E1   516 G$XBR0$0_0$0 == 0x00e1
                           0000E1   517 _XBR0	=	0x00e1
                           0000E2   518 G$XBR1$0_0$0 == 0x00e2
                           0000E2   519 _XBR1	=	0x00e2
                           0000E3   520 G$XBR2$0_0$0 == 0x00e3
                           0000E3   521 _XBR2	=	0x00e3
                           0000E4   522 G$IT01CF$0_0$0 == 0x00e4
                           0000E4   523 _IT01CF	=	0x00e4
                           0000E4   524 G$INT01CF$0_0$0 == 0x00e4
                           0000E4   525 _INT01CF	=	0x00e4
                           0000E5   526 G$SMOD1$0_0$0 == 0x00e5
                           0000E5   527 _SMOD1	=	0x00e5
                           0000E6   528 G$EIE1$0_0$0 == 0x00e6
                           0000E6   529 _EIE1	=	0x00e6
                           0000E7   530 G$EIE2$0_0$0 == 0x00e7
                           0000E7   531 _EIE2	=	0x00e7
                           0000E8   532 G$ADC0CN$0_0$0 == 0x00e8
                           0000E8   533 _ADC0CN	=	0x00e8
                           0000E9   534 G$PCA0CPL1$0_0$0 == 0x00e9
                           0000E9   535 _PCA0CPL1	=	0x00e9
                           0000EA   536 G$PCA0CPH1$0_0$0 == 0x00ea
                           0000EA   537 _PCA0CPH1	=	0x00ea
                           0000EB   538 G$PCA0CPL2$0_0$0 == 0x00eb
                           0000EB   539 _PCA0CPL2	=	0x00eb
                           0000EC   540 G$PCA0CPH2$0_0$0 == 0x00ec
                           0000EC   541 _PCA0CPH2	=	0x00ec
                           0000ED   542 G$PCA0CPL3$0_0$0 == 0x00ed
                           0000ED   543 _PCA0CPL3	=	0x00ed
                           0000EE   544 G$PCA0CPH3$0_0$0 == 0x00ee
                           0000EE   545 _PCA0CPH3	=	0x00ee
                           0000EF   546 G$RSTSRC$0_0$0 == 0x00ef
                           0000EF   547 _RSTSRC	=	0x00ef
                           0000F0   548 G$B$0_0$0 == 0x00f0
                           0000F0   549 _B	=	0x00f0
                           0000F1   550 G$P0MODE$0_0$0 == 0x00f1
                           0000F1   551 _P0MODE	=	0x00f1
                           0000F1   552 G$P0MDIN$0_0$0 == 0x00f1
                           0000F1   553 _P0MDIN	=	0x00f1
                           0000F2   554 G$P1MODE$0_0$0 == 0x00f2
                           0000F2   555 _P1MODE	=	0x00f2
                           0000F2   556 G$P1MDIN$0_0$0 == 0x00f2
                           0000F2   557 _P1MDIN	=	0x00f2
                           0000F3   558 G$P2MODE$0_0$0 == 0x00f3
                           0000F3   559 _P2MODE	=	0x00f3
                           0000F3   560 G$P2MDIN$0_0$0 == 0x00f3
                           0000F3   561 _P2MDIN	=	0x00f3
                           0000F4   562 G$P3MODE$0_0$0 == 0x00f4
                           0000F4   563 _P3MODE	=	0x00f4
                           0000F4   564 G$P3MDIN$0_0$0 == 0x00f4
                           0000F4   565 _P3MDIN	=	0x00f4
                           0000F5   566 G$P4MDIN$0_0$0 == 0x00f5
                           0000F5   567 _P4MDIN	=	0x00f5
                           0000F6   568 G$EIP1$0_0$0 == 0x00f6
                           0000F6   569 _EIP1	=	0x00f6
                           0000F7   570 G$EIP2$0_0$0 == 0x00f7
                           0000F7   571 _EIP2	=	0x00f7
                           0000F8   572 G$SPI0CN$0_0$0 == 0x00f8
                           0000F8   573 _SPI0CN	=	0x00f8
                           0000F9   574 G$PCA0L$0_0$0 == 0x00f9
                           0000F9   575 _PCA0L	=	0x00f9
                           0000FA   576 G$PCA0H$0_0$0 == 0x00fa
                           0000FA   577 _PCA0H	=	0x00fa
                           0000FB   578 G$PCA0CPL0$0_0$0 == 0x00fb
                           0000FB   579 _PCA0CPL0	=	0x00fb
                           0000FC   580 G$PCA0CPH0$0_0$0 == 0x00fc
                           0000FC   581 _PCA0CPH0	=	0x00fc
                           0000FD   582 G$PCA0CPL4$0_0$0 == 0x00fd
                           0000FD   583 _PCA0CPL4	=	0x00fd
                           0000FE   584 G$PCA0CPH4$0_0$0 == 0x00fe
                           0000FE   585 _PCA0CPH4	=	0x00fe
                           0000FF   586 G$VDM0CN$0_0$0 == 0x00ff
                           0000FF   587 _VDM0CN	=	0x00ff
                           008C8A   588 G$TMR0$0_0$0 == 0x8c8a
                           008C8A   589 _TMR0	=	0x8c8a
                           008D8B   590 G$TMR1$0_0$0 == 0x8d8b
                           008D8B   591 _TMR1	=	0x8d8b
                           00CDCC   592 G$TMR2$0_0$0 == 0xcdcc
                           00CDCC   593 _TMR2	=	0xcdcc
                           00CBCA   594 G$RCAP2$0_0$0 == 0xcbca
                           00CBCA   595 _RCAP2	=	0xcbca
                           00CBCA   596 G$TMR2RL$0_0$0 == 0xcbca
                           00CBCA   597 _TMR2RL	=	0xcbca
                           009594   598 G$TMR3$0_0$0 == 0x9594
                           009594   599 _TMR3	=	0x9594
                           009392   600 G$TMR3RL$0_0$0 == 0x9392
                           009392   601 _TMR3RL	=	0x9392
                           00B5B4   602 G$SBRL1$0_0$0 == 0xb5b4
                           00B5B4   603 _SBRL1	=	0xb5b4
                           00BEBD   604 G$ADC0$0_0$0 == 0xbebd
                           00BEBD   605 _ADC0	=	0xbebd
                           00C4C3   606 G$ADC0GT$0_0$0 == 0xc4c3
                           00C4C3   607 _ADC0GT	=	0xc4c3
                           00C6C5   608 G$ADC0LT$0_0$0 == 0xc6c5
                           00C6C5   609 _ADC0LT	=	0xc6c5
                           00FAF9   610 G$PCA0$0_0$0 == 0xfaf9
                           00FAF9   611 _PCA0	=	0xfaf9
                           00FCFB   612 G$PCA0CP0$0_0$0 == 0xfcfb
                           00FCFB   613 _PCA0CP0	=	0xfcfb
                           00EAE9   614 G$PCA0CP1$0_0$0 == 0xeae9
                           00EAE9   615 _PCA0CP1	=	0xeae9
                           00ECEB   616 G$PCA0CP2$0_0$0 == 0xeceb
                           00ECEB   617 _PCA0CP2	=	0xeceb
                           00EEED   618 G$PCA0CP3$0_0$0 == 0xeeed
                           00EEED   619 _PCA0CP3	=	0xeeed
                           00FEFD   620 G$PCA0CP4$0_0$0 == 0xfefd
                           00FEFD   621 _PCA0CP4	=	0xfefd
                                    622 ;--------------------------------------------------------
                                    623 ; special function bits
                                    624 ;--------------------------------------------------------
                                    625 	.area RSEG    (ABS,DATA)
      000000                        626 	.org 0x0000
                           000080   627 G$P0_0$0_0$0 == 0x0080
                           000080   628 _P0_0	=	0x0080
                           000081   629 G$P0_1$0_0$0 == 0x0081
                           000081   630 _P0_1	=	0x0081
                           000082   631 G$P0_2$0_0$0 == 0x0082
                           000082   632 _P0_2	=	0x0082
                           000083   633 G$P0_3$0_0$0 == 0x0083
                           000083   634 _P0_3	=	0x0083
                           000084   635 G$P0_4$0_0$0 == 0x0084
                           000084   636 _P0_4	=	0x0084
                           000085   637 G$P0_5$0_0$0 == 0x0085
                           000085   638 _P0_5	=	0x0085
                           000086   639 G$P0_6$0_0$0 == 0x0086
                           000086   640 _P0_6	=	0x0086
                           000087   641 G$P0_7$0_0$0 == 0x0087
                           000087   642 _P0_7	=	0x0087
                           000088   643 G$IT0$0_0$0 == 0x0088
                           000088   644 _IT0	=	0x0088
                           000089   645 G$IE0$0_0$0 == 0x0089
                           000089   646 _IE0	=	0x0089
                           00008A   647 G$IT1$0_0$0 == 0x008a
                           00008A   648 _IT1	=	0x008a
                           00008B   649 G$IE1$0_0$0 == 0x008b
                           00008B   650 _IE1	=	0x008b
                           00008C   651 G$TR0$0_0$0 == 0x008c
                           00008C   652 _TR0	=	0x008c
                           00008D   653 G$TF0$0_0$0 == 0x008d
                           00008D   654 _TF0	=	0x008d
                           00008E   655 G$TR1$0_0$0 == 0x008e
                           00008E   656 _TR1	=	0x008e
                           00008F   657 G$TF1$0_0$0 == 0x008f
                           00008F   658 _TF1	=	0x008f
                           000090   659 G$P1_0$0_0$0 == 0x0090
                           000090   660 _P1_0	=	0x0090
                           000091   661 G$P1_1$0_0$0 == 0x0091
                           000091   662 _P1_1	=	0x0091
                           000092   663 G$P1_2$0_0$0 == 0x0092
                           000092   664 _P1_2	=	0x0092
                           000093   665 G$P1_3$0_0$0 == 0x0093
                           000093   666 _P1_3	=	0x0093
                           000094   667 G$P1_4$0_0$0 == 0x0094
                           000094   668 _P1_4	=	0x0094
                           000095   669 G$P1_5$0_0$0 == 0x0095
                           000095   670 _P1_5	=	0x0095
                           000096   671 G$P1_6$0_0$0 == 0x0096
                           000096   672 _P1_6	=	0x0096
                           000097   673 G$P1_7$0_0$0 == 0x0097
                           000097   674 _P1_7	=	0x0097
                           000098   675 G$RI$0_0$0 == 0x0098
                           000098   676 _RI	=	0x0098
                           000098   677 G$RI0$0_0$0 == 0x0098
                           000098   678 _RI0	=	0x0098
                           000099   679 G$TI$0_0$0 == 0x0099
                           000099   680 _TI	=	0x0099
                           000099   681 G$TI0$0_0$0 == 0x0099
                           000099   682 _TI0	=	0x0099
                           00009A   683 G$RB8$0_0$0 == 0x009a
                           00009A   684 _RB8	=	0x009a
                           00009A   685 G$RB80$0_0$0 == 0x009a
                           00009A   686 _RB80	=	0x009a
                           00009B   687 G$TB8$0_0$0 == 0x009b
                           00009B   688 _TB8	=	0x009b
                           00009B   689 G$TB80$0_0$0 == 0x009b
                           00009B   690 _TB80	=	0x009b
                           00009C   691 G$REN$0_0$0 == 0x009c
                           00009C   692 _REN	=	0x009c
                           00009C   693 G$REN0$0_0$0 == 0x009c
                           00009C   694 _REN0	=	0x009c
                           00009D   695 G$SM2$0_0$0 == 0x009d
                           00009D   696 _SM2	=	0x009d
                           00009D   697 G$MCE0$0_0$0 == 0x009d
                           00009D   698 _MCE0	=	0x009d
                           00009F   699 G$SM0$0_0$0 == 0x009f
                           00009F   700 _SM0	=	0x009f
                           00009F   701 G$S0MODE$0_0$0 == 0x009f
                           00009F   702 _S0MODE	=	0x009f
                           0000A0   703 G$P2_0$0_0$0 == 0x00a0
                           0000A0   704 _P2_0	=	0x00a0
                           0000A1   705 G$P2_1$0_0$0 == 0x00a1
                           0000A1   706 _P2_1	=	0x00a1
                           0000A2   707 G$P2_2$0_0$0 == 0x00a2
                           0000A2   708 _P2_2	=	0x00a2
                           0000A3   709 G$P2_3$0_0$0 == 0x00a3
                           0000A3   710 _P2_3	=	0x00a3
                           0000A4   711 G$P2_4$0_0$0 == 0x00a4
                           0000A4   712 _P2_4	=	0x00a4
                           0000A5   713 G$P2_5$0_0$0 == 0x00a5
                           0000A5   714 _P2_5	=	0x00a5
                           0000A6   715 G$P2_6$0_0$0 == 0x00a6
                           0000A6   716 _P2_6	=	0x00a6
                           0000A7   717 G$P2_7$0_0$0 == 0x00a7
                           0000A7   718 _P2_7	=	0x00a7
                           0000A8   719 G$EX0$0_0$0 == 0x00a8
                           0000A8   720 _EX0	=	0x00a8
                           0000A9   721 G$ET0$0_0$0 == 0x00a9
                           0000A9   722 _ET0	=	0x00a9
                           0000AA   723 G$EX1$0_0$0 == 0x00aa
                           0000AA   724 _EX1	=	0x00aa
                           0000AB   725 G$ET1$0_0$0 == 0x00ab
                           0000AB   726 _ET1	=	0x00ab
                           0000AC   727 G$ES$0_0$0 == 0x00ac
                           0000AC   728 _ES	=	0x00ac
                           0000AC   729 G$ES0$0_0$0 == 0x00ac
                           0000AC   730 _ES0	=	0x00ac
                           0000AD   731 G$ET2$0_0$0 == 0x00ad
                           0000AD   732 _ET2	=	0x00ad
                           0000AE   733 G$ESPI0$0_0$0 == 0x00ae
                           0000AE   734 _ESPI0	=	0x00ae
                           0000AF   735 G$EA$0_0$0 == 0x00af
                           0000AF   736 _EA	=	0x00af
                           0000B0   737 G$P3_0$0_0$0 == 0x00b0
                           0000B0   738 _P3_0	=	0x00b0
                           0000B1   739 G$P3_1$0_0$0 == 0x00b1
                           0000B1   740 _P3_1	=	0x00b1
                           0000B2   741 G$P3_2$0_0$0 == 0x00b2
                           0000B2   742 _P3_2	=	0x00b2
                           0000B3   743 G$P3_3$0_0$0 == 0x00b3
                           0000B3   744 _P3_3	=	0x00b3
                           0000B4   745 G$P3_4$0_0$0 == 0x00b4
                           0000B4   746 _P3_4	=	0x00b4
                           0000B5   747 G$P3_5$0_0$0 == 0x00b5
                           0000B5   748 _P3_5	=	0x00b5
                           0000B6   749 G$P3_6$0_0$0 == 0x00b6
                           0000B6   750 _P3_6	=	0x00b6
                           0000B7   751 G$P3_7$0_0$0 == 0x00b7
                           0000B7   752 _P3_7	=	0x00b7
                           0000B8   753 G$PX0$0_0$0 == 0x00b8
                           0000B8   754 _PX0	=	0x00b8
                           0000B9   755 G$PT0$0_0$0 == 0x00b9
                           0000B9   756 _PT0	=	0x00b9
                           0000BA   757 G$PX1$0_0$0 == 0x00ba
                           0000BA   758 _PX1	=	0x00ba
                           0000BB   759 G$PT1$0_0$0 == 0x00bb
                           0000BB   760 _PT1	=	0x00bb
                           0000BC   761 G$PS$0_0$0 == 0x00bc
                           0000BC   762 _PS	=	0x00bc
                           0000BC   763 G$PS0$0_0$0 == 0x00bc
                           0000BC   764 _PS0	=	0x00bc
                           0000BD   765 G$PT2$0_0$0 == 0x00bd
                           0000BD   766 _PT2	=	0x00bd
                           0000BE   767 G$PSPI0$0_0$0 == 0x00be
                           0000BE   768 _PSPI0	=	0x00be
                           0000C0   769 G$SI$0_0$0 == 0x00c0
                           0000C0   770 _SI	=	0x00c0
                           0000C1   771 G$ACK$0_0$0 == 0x00c1
                           0000C1   772 _ACK	=	0x00c1
                           0000C2   773 G$ARBLOST$0_0$0 == 0x00c2
                           0000C2   774 _ARBLOST	=	0x00c2
                           0000C3   775 G$ACKRQ$0_0$0 == 0x00c3
                           0000C3   776 _ACKRQ	=	0x00c3
                           0000C4   777 G$STO$0_0$0 == 0x00c4
                           0000C4   778 _STO	=	0x00c4
                           0000C5   779 G$STA$0_0$0 == 0x00c5
                           0000C5   780 _STA	=	0x00c5
                           0000C6   781 G$TXMODE$0_0$0 == 0x00c6
                           0000C6   782 _TXMODE	=	0x00c6
                           0000C7   783 G$MASTER$0_0$0 == 0x00c7
                           0000C7   784 _MASTER	=	0x00c7
                           0000C8   785 G$T2XCLK$0_0$0 == 0x00c8
                           0000C8   786 _T2XCLK	=	0x00c8
                           0000C9   787 G$T2CSS$0_0$0 == 0x00c9
                           0000C9   788 _T2CSS	=	0x00c9
                           0000CA   789 G$TR2$0_0$0 == 0x00ca
                           0000CA   790 _TR2	=	0x00ca
                           0000CB   791 G$T2SPLIT$0_0$0 == 0x00cb
                           0000CB   792 _T2SPLIT	=	0x00cb
                           0000CC   793 G$T2CE$0_0$0 == 0x00cc
                           0000CC   794 _T2CE	=	0x00cc
                           0000CD   795 G$TF2LEN$0_0$0 == 0x00cd
                           0000CD   796 _TF2LEN	=	0x00cd
                           0000CE   797 G$TF2L$0_0$0 == 0x00ce
                           0000CE   798 _TF2L	=	0x00ce
                           0000CF   799 G$TF2$0_0$0 == 0x00cf
                           0000CF   800 _TF2	=	0x00cf
                           0000CF   801 G$TF2H$0_0$0 == 0x00cf
                           0000CF   802 _TF2H	=	0x00cf
                           0000D0   803 G$PARITY$0_0$0 == 0x00d0
                           0000D0   804 _PARITY	=	0x00d0
                           0000D1   805 G$F1$0_0$0 == 0x00d1
                           0000D1   806 _F1	=	0x00d1
                           0000D2   807 G$OV$0_0$0 == 0x00d2
                           0000D2   808 _OV	=	0x00d2
                           0000D3   809 G$RS0$0_0$0 == 0x00d3
                           0000D3   810 _RS0	=	0x00d3
                           0000D4   811 G$RS1$0_0$0 == 0x00d4
                           0000D4   812 _RS1	=	0x00d4
                           0000D5   813 G$F0$0_0$0 == 0x00d5
                           0000D5   814 _F0	=	0x00d5
                           0000D6   815 G$AC$0_0$0 == 0x00d6
                           0000D6   816 _AC	=	0x00d6
                           0000D7   817 G$CY$0_0$0 == 0x00d7
                           0000D7   818 _CY	=	0x00d7
                           0000D8   819 G$CCF0$0_0$0 == 0x00d8
                           0000D8   820 _CCF0	=	0x00d8
                           0000D9   821 G$CCF1$0_0$0 == 0x00d9
                           0000D9   822 _CCF1	=	0x00d9
                           0000DA   823 G$CCF2$0_0$0 == 0x00da
                           0000DA   824 _CCF2	=	0x00da
                           0000DB   825 G$CCF3$0_0$0 == 0x00db
                           0000DB   826 _CCF3	=	0x00db
                           0000DC   827 G$CCF4$0_0$0 == 0x00dc
                           0000DC   828 _CCF4	=	0x00dc
                           0000DE   829 G$CR$0_0$0 == 0x00de
                           0000DE   830 _CR	=	0x00de
                           0000DF   831 G$CF$0_0$0 == 0x00df
                           0000DF   832 _CF	=	0x00df
                           0000E8   833 G$AD0CM0$0_0$0 == 0x00e8
                           0000E8   834 _AD0CM0	=	0x00e8
                           0000E9   835 G$AD0CM1$0_0$0 == 0x00e9
                           0000E9   836 _AD0CM1	=	0x00e9
                           0000EA   837 G$AD0CM2$0_0$0 == 0x00ea
                           0000EA   838 _AD0CM2	=	0x00ea
                           0000EB   839 G$AD0WINT$0_0$0 == 0x00eb
                           0000EB   840 _AD0WINT	=	0x00eb
                           0000EC   841 G$AD0BUSY$0_0$0 == 0x00ec
                           0000EC   842 _AD0BUSY	=	0x00ec
                           0000ED   843 G$AD0INT$0_0$0 == 0x00ed
                           0000ED   844 _AD0INT	=	0x00ed
                           0000EE   845 G$AD0TM$0_0$0 == 0x00ee
                           0000EE   846 _AD0TM	=	0x00ee
                           0000EF   847 G$AD0EN$0_0$0 == 0x00ef
                           0000EF   848 _AD0EN	=	0x00ef
                           0000F8   849 G$SPIEN$0_0$0 == 0x00f8
                           0000F8   850 _SPIEN	=	0x00f8
                           0000F9   851 G$TXBMT$0_0$0 == 0x00f9
                           0000F9   852 _TXBMT	=	0x00f9
                           0000FA   853 G$NSSMD0$0_0$0 == 0x00fa
                           0000FA   854 _NSSMD0	=	0x00fa
                           0000FB   855 G$NSSMD1$0_0$0 == 0x00fb
                           0000FB   856 _NSSMD1	=	0x00fb
                           0000FC   857 G$RXOVRN$0_0$0 == 0x00fc
                           0000FC   858 _RXOVRN	=	0x00fc
                           0000FD   859 G$MODF$0_0$0 == 0x00fd
                           0000FD   860 _MODF	=	0x00fd
                           0000FE   861 G$WCOL$0_0$0 == 0x00fe
                           0000FE   862 _WCOL	=	0x00fe
                           0000FF   863 G$SPIF$0_0$0 == 0x00ff
                           0000FF   864 _SPIF	=	0x00ff
                                    865 ;--------------------------------------------------------
                                    866 ; overlayable register banks
                                    867 ;--------------------------------------------------------
                                    868 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        869 	.ds 8
                                    870 ;--------------------------------------------------------
                                    871 ; internal ram data
                                    872 ;--------------------------------------------------------
                                    873 	.area DSEG    (DATA)
                                    874 ;--------------------------------------------------------
                                    875 ; overlayable items in internal ram
                                    876 ;--------------------------------------------------------
                                    877 ;--------------------------------------------------------
                                    878 ; indirectly addressable internal ram data
                                    879 ;--------------------------------------------------------
                                    880 	.area ISEG    (DATA)
                                    881 ;--------------------------------------------------------
                                    882 ; absolute internal ram data
                                    883 ;--------------------------------------------------------
                                    884 	.area IABS    (ABS,DATA)
                                    885 	.area IABS    (ABS,DATA)
                                    886 ;--------------------------------------------------------
                                    887 ; bit data
                                    888 ;--------------------------------------------------------
                                    889 	.area BSEG    (BIT)
                                    890 ;--------------------------------------------------------
                                    891 ; paged external ram data
                                    892 ;--------------------------------------------------------
                                    893 	.area PSEG    (PAG,XDATA)
                                    894 ;--------------------------------------------------------
                                    895 ; external ram data
                                    896 ;--------------------------------------------------------
                                    897 	.area XSEG    (XDATA)
                                    898 ;--------------------------------------------------------
                                    899 ; absolute external ram data
                                    900 ;--------------------------------------------------------
                                    901 	.area XABS    (ABS,XDATA)
                                    902 ;--------------------------------------------------------
                                    903 ; external initialized ram data
                                    904 ;--------------------------------------------------------
                                    905 	.area XISEG   (XDATA)
                                    906 	.area HOME    (CODE)
                                    907 	.area GSINIT0 (CODE)
                                    908 	.area GSINIT1 (CODE)
                                    909 	.area GSINIT2 (CODE)
                                    910 	.area GSINIT3 (CODE)
                                    911 	.area GSINIT4 (CODE)
                                    912 	.area GSINIT5 (CODE)
                                    913 	.area GSINIT  (CODE)
                                    914 	.area GSFINAL (CODE)
                                    915 	.area CSEG    (CODE)
                                    916 ;--------------------------------------------------------
                                    917 ; global & static initialisations
                                    918 ;--------------------------------------------------------
                                    919 	.area HOME    (CODE)
                                    920 	.area GSINIT  (CODE)
                                    921 	.area GSFINAL (CODE)
                                    922 	.area GSINIT  (CODE)
                                    923 ;--------------------------------------------------------
                                    924 ; Home
                                    925 ;--------------------------------------------------------
                                    926 	.area HOME    (CODE)
                                    927 	.area HOME    (CODE)
                                    928 ;--------------------------------------------------------
                                    929 ; code
                                    930 ;--------------------------------------------------------
                                    931 	.area CSEG    (CODE)
                                    932 ;------------------------------------------------------------
                                    933 ;Allocation info for local variables in function 'xQueueGenericReset'
                                    934 ;------------------------------------------------------------
                                    935 ;xNewQueue                 Allocated to stack - _bp -3
                                    936 ;xQueue                    Allocated to stack - _bp +1
                                    937 ;xReturn                   Allocated to stack - _bp +13
                                    938 ;pxQueue                   Allocated to registers 
                                    939 ;sloc0                     Allocated to stack - _bp +8
                                    940 ;sloc1                     Allocated to stack - _bp +7
                                    941 ;sloc2                     Allocated to stack - _bp +10
                                    942 ;sloc3                     Allocated to stack - _bp +4
                                    943 ;------------------------------------------------------------
                           000000   944 	G$xQueueGenericReset$0$0 ==.
                           000000   945 	C$queue.c$266$0_0$180 ==.
                                    946 ;	queue.c:266: BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                                    947 ;	-----------------------------------------
                                    948 ;	 function xQueueGenericReset
                                    949 ;	-----------------------------------------
      000000                        950 _xQueueGenericReset:
                           000007   951 	ar7 = 0x07
                           000006   952 	ar6 = 0x06
                           000005   953 	ar5 = 0x05
                           000004   954 	ar4 = 0x04
                           000003   955 	ar3 = 0x03
                           000002   956 	ar2 = 0x02
                           000001   957 	ar1 = 0x01
                           000000   958 	ar0 = 0x00
      000000 C0*00            [24]  959 	push	_bp
      000002 85 81*00         [24]  960 	mov	_bp,sp
      000005 C0 82            [24]  961 	push	dpl
      000007 C0 83            [24]  962 	push	dph
      000009 C0 F0            [24]  963 	push	b
      00000B E5 81            [12]  964 	mov	a,sp
      00000D 24 0A            [12]  965 	add	a,#0x0a
      00000F F5 81            [12]  966 	mov	sp,a
                           000011   967 	C$queue.c$269$2_0$180 ==.
                                    968 ;	queue.c:269: BaseType_t xReturn = pdPASS;
      000011 E5*00            [12]  969 	mov	a,_bp
      000013 24 0D            [12]  970 	add	a,#0x0d
      000015 F8               [12]  971 	mov	r0,a
      000016 76 01            [12]  972 	mov	@r0,#0x01
                           000018   973 	C$queue.c$274$1_0$180 ==.
                                    974 ;	queue.c:274: if( ( pxQueue != NULL ) &&
      000018 A8*00            [24]  975 	mov	r0,_bp
      00001A 08               [12]  976 	inc	r0
      00001B E6               [12]  977 	mov	a,@r0
      00001C 08               [12]  978 	inc	r0
      00001D 46               [12]  979 	orl	a,@r0
      00001E 70 03            [24]  980 	jnz	00137$
      000020 02r02rE3         [24]  981 	ljmp	00109$
      000023                        982 00137$:
                           000023   983 	C$queue.c$275$1_0$180 ==.
                                    984 ;	queue.c:275: ( pxQueue->uxLength >= 1U ) &&
      000023 A8*00            [24]  985 	mov	r0,_bp
      000025 08               [12]  986 	inc	r0
      000026 74 25            [12]  987 	mov	a,#0x25
      000028 26               [12]  988 	add	a,@r0
      000029 FA               [12]  989 	mov	r2,a
      00002A 74 00            [12]  990 	mov	a,#0x00
      00002C 08               [12]  991 	inc	r0
      00002D 36               [12]  992 	addc	a,@r0
      00002E FB               [12]  993 	mov	r3,a
      00002F 08               [12]  994 	inc	r0
      000030 86 04            [24]  995 	mov	ar4,@r0
      000032 8A 82            [24]  996 	mov	dpl,r2
      000034 8B 83            [24]  997 	mov	dph,r3
      000036 8C F0            [24]  998 	mov	b,r4
      000038 12r00r00         [24]  999 	lcall	__gptrget
      00003B FF               [12] 1000 	mov	r7,a
      00003C BF 01 00         [24] 1001 	cjne	r7,#0x01,00138$
      00003F                       1002 00138$:
      00003F 50 03            [24] 1003 	jnc	00139$
      000041 02r02rE3         [24] 1004 	ljmp	00109$
      000044                       1005 00139$:
                           000044  1006 	C$queue.c$277$1_0$180 ==.
                                   1007 ;	queue.c:277: ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
      000044 C0 02            [24] 1008 	push	ar2
      000046 C0 03            [24] 1009 	push	ar3
      000048 C0 04            [24] 1010 	push	ar4
      00004A 8F 03            [24] 1011 	mov	ar3,r7
      00004C 7C 00            [12] 1012 	mov	r4,#0x00
      00004E C0 02            [24] 1013 	push	ar2
      000050 C0 03            [24] 1014 	push	ar3
      000052 C0 04            [24] 1015 	push	ar4
      000054 75 82 FF         [24] 1016 	mov	dpl,#0xff
      000057 75 83 FF         [24] 1017 	mov	dph,#0xff
      00005A 12r00r00         [24] 1018 	lcall	__divuint
      00005D AB 82            [24] 1019 	mov	r3,dpl
      00005F AC 83            [24] 1020 	mov	r4,dph
      000061 15 81            [12] 1021 	dec	sp
      000063 15 81            [12] 1022 	dec	sp
      000065 D0 02            [24] 1023 	pop	ar2
      000067 A8*00            [24] 1024 	mov	r0,_bp
      000069 08               [12] 1025 	inc	r0
      00006A E5*00            [12] 1026 	mov	a,_bp
      00006C 24 07            [12] 1027 	add	a,#0x07
      00006E F9               [12] 1028 	mov	r1,a
      00006F 74 26            [12] 1029 	mov	a,#0x26
      000071 26               [12] 1030 	add	a,@r0
      000072 F7               [12] 1031 	mov	@r1,a
      000073 74 00            [12] 1032 	mov	a,#0x00
      000075 08               [12] 1033 	inc	r0
      000076 36               [12] 1034 	addc	a,@r0
      000077 09               [12] 1035 	inc	r1
      000078 F7               [12] 1036 	mov	@r1,a
      000079 08               [12] 1037 	inc	r0
      00007A E6               [12] 1038 	mov	a,@r0
      00007B 09               [12] 1039 	inc	r1
      00007C F7               [12] 1040 	mov	@r1,a
      00007D E5*00            [12] 1041 	mov	a,_bp
      00007F 24 07            [12] 1042 	add	a,#0x07
      000081 F8               [12] 1043 	mov	r0,a
      000082 86 82            [24] 1044 	mov	dpl,@r0
      000084 08               [12] 1045 	inc	r0
      000085 86 83            [24] 1046 	mov	dph,@r0
      000087 08               [12] 1047 	inc	r0
      000088 86 F0            [24] 1048 	mov	b,@r0
      00008A 12r00r00         [24] 1049 	lcall	__gptrget
      00008D FA               [12] 1050 	mov	r2,a
      00008E 7F 00            [12] 1051 	mov	r7,#0x00
      000090 C3               [12] 1052 	clr	c
      000091 EB               [12] 1053 	mov	a,r3
      000092 9A               [12] 1054 	subb	a,r2
      000093 EC               [12] 1055 	mov	a,r4
      000094 9F               [12] 1056 	subb	a,r7
      000095 D0 04            [24] 1057 	pop	ar4
      000097 D0 03            [24] 1058 	pop	ar3
      000099 D0 02            [24] 1059 	pop	ar2
      00009B 50 03            [24] 1060 	jnc	00140$
      00009D 02r02rE3         [24] 1061 	ljmp	00109$
      0000A0                       1062 00140$:
                           0000A0  1063 	C$queue.c$279$2_0$181 ==.
                                   1064 ;	queue.c:279: taskENTER_CRITICAL();
      0000A0 C0 E0            [24] 1065 	push ACC 
      0000A2 C0 A8            [24] 1066 	push IE 
                                   1067 ;	assignBit
      0000A4 C2 AF            [12] 1068 	clr	_EA
                           0000A6  1069 	C$queue.c$281$3_0$182 ==.
                                   1070 ;	queue.c:281: pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
      0000A6 A8*00            [24] 1071 	mov	r0,_bp
      0000A8 08               [12] 1072 	inc	r0
      0000A9 E5*00            [12] 1073 	mov	a,_bp
      0000AB 24 0A            [12] 1074 	add	a,#0x0a
      0000AD F9               [12] 1075 	mov	r1,a
      0000AE 74 06            [12] 1076 	mov	a,#0x06
      0000B0 26               [12] 1077 	add	a,@r0
      0000B1 F7               [12] 1078 	mov	@r1,a
      0000B2 74 00            [12] 1079 	mov	a,#0x00
      0000B4 08               [12] 1080 	inc	r0
      0000B5 36               [12] 1081 	addc	a,@r0
      0000B6 09               [12] 1082 	inc	r1
      0000B7 F7               [12] 1083 	mov	@r1,a
      0000B8 08               [12] 1084 	inc	r0
      0000B9 E6               [12] 1085 	mov	a,@r0
      0000BA 09               [12] 1086 	inc	r1
      0000BB F7               [12] 1087 	mov	@r1,a
      0000BC A8*00            [24] 1088 	mov	r0,_bp
      0000BE 08               [12] 1089 	inc	r0
      0000BF 86 82            [24] 1090 	mov	dpl,@r0
      0000C1 08               [12] 1091 	inc	r0
      0000C2 86 83            [24] 1092 	mov	dph,@r0
      0000C4 08               [12] 1093 	inc	r0
      0000C5 86 F0            [24] 1094 	mov	b,@r0
      0000C7 E5*00            [12] 1095 	mov	a,_bp
      0000C9 24 04            [12] 1096 	add	a,#0x04
      0000CB F9               [12] 1097 	mov	r1,a
      0000CC 12r00r00         [24] 1098 	lcall	__gptrget
      0000CF F7               [12] 1099 	mov	@r1,a
      0000D0 A3               [24] 1100 	inc	dptr
      0000D1 12r00r00         [24] 1101 	lcall	__gptrget
      0000D4 09               [12] 1102 	inc	r1
      0000D5 F7               [12] 1103 	mov	@r1,a
      0000D6 A3               [24] 1104 	inc	dptr
      0000D7 12r00r00         [24] 1105 	lcall	__gptrget
      0000DA 09               [12] 1106 	inc	r1
      0000DB F7               [12] 1107 	mov	@r1,a
      0000DC 8A 82            [24] 1108 	mov	dpl,r2
      0000DE 8B 83            [24] 1109 	mov	dph,r3
      0000E0 8C F0            [24] 1110 	mov	b,r4
      0000E2 12r00r00         [24] 1111 	lcall	__gptrget
      0000E5 FF               [12] 1112 	mov	r7,a
      0000E6 E5*00            [12] 1113 	mov	a,_bp
      0000E8 24 07            [12] 1114 	add	a,#0x07
      0000EA F8               [12] 1115 	mov	r0,a
      0000EB 86 82            [24] 1116 	mov	dpl,@r0
      0000ED 08               [12] 1117 	inc	r0
      0000EE 86 83            [24] 1118 	mov	dph,@r0
      0000F0 08               [12] 1119 	inc	r0
      0000F1 86 F0            [24] 1120 	mov	b,@r0
      0000F3 12r00r00         [24] 1121 	lcall	__gptrget
      0000F6 FE               [12] 1122 	mov	r6,a
      0000F7 8F F0            [24] 1123 	mov	b,r7
      0000F9 EE               [12] 1124 	mov	a,r6
      0000FA A4               [48] 1125 	mul	ab
      0000FB C8               [12] 1126 	xch	a,r0
      0000FC E5*00            [12] 1127 	mov	a,_bp
      0000FE 24 04            [12] 1128 	add	a,#0x04
      000100 C8               [12] 1129 	xch	a,r0
      000101 26               [12] 1130 	add	a,@r0
      000102 FD               [12] 1131 	mov	r5,a
      000103 08               [12] 1132 	inc	r0
      000104 E6               [12] 1133 	mov	a,@r0
      000105 35 F0            [12] 1134 	addc	a,b
      000107 FE               [12] 1135 	mov	r6,a
      000108 08               [12] 1136 	inc	r0
      000109 86 07            [24] 1137 	mov	ar7,@r0
      00010B E5*00            [12] 1138 	mov	a,_bp
      00010D 24 0A            [12] 1139 	add	a,#0x0a
      00010F F8               [12] 1140 	mov	r0,a
      000110 86 82            [24] 1141 	mov	dpl,@r0
      000112 08               [12] 1142 	inc	r0
      000113 86 83            [24] 1143 	mov	dph,@r0
      000115 08               [12] 1144 	inc	r0
      000116 86 F0            [24] 1145 	mov	b,@r0
      000118 ED               [12] 1146 	mov	a,r5
      000119 12r00r00         [24] 1147 	lcall	__gptrput
      00011C A3               [24] 1148 	inc	dptr
      00011D EE               [12] 1149 	mov	a,r6
      00011E 12r00r00         [24] 1150 	lcall	__gptrput
      000121 A3               [24] 1151 	inc	dptr
      000122 EF               [12] 1152 	mov	a,r7
      000123 12r00r00         [24] 1153 	lcall	__gptrput
                           000126  1154 	C$queue.c$282$3_0$182 ==.
                                   1155 ;	queue.c:282: pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
      000126 A8*00            [24] 1156 	mov	r0,_bp
      000128 08               [12] 1157 	inc	r0
      000129 74 24            [12] 1158 	mov	a,#0x24
      00012B 26               [12] 1159 	add	a,@r0
      00012C FD               [12] 1160 	mov	r5,a
      00012D 74 00            [12] 1161 	mov	a,#0x00
      00012F 08               [12] 1162 	inc	r0
      000130 36               [12] 1163 	addc	a,@r0
      000131 FE               [12] 1164 	mov	r6,a
      000132 08               [12] 1165 	inc	r0
      000133 86 07            [24] 1166 	mov	ar7,@r0
      000135 8D 82            [24] 1167 	mov	dpl,r5
      000137 8E 83            [24] 1168 	mov	dph,r6
      000139 8F F0            [24] 1169 	mov	b,r7
      00013B 74 00            [12] 1170 	mov	a,#0x00
      00013D 12r00r00         [24] 1171 	lcall	__gptrput
                           000140  1172 	C$queue.c$283$3_0$182 ==.
                                   1173 ;	queue.c:283: pxQueue->pcWriteTo = pxQueue->pcHead;
      000140 A8*00            [24] 1174 	mov	r0,_bp
      000142 08               [12] 1175 	inc	r0
      000143 E5*00            [12] 1176 	mov	a,_bp
      000145 24 04            [12] 1177 	add	a,#0x04
      000147 F9               [12] 1178 	mov	r1,a
      000148 74 03            [12] 1179 	mov	a,#0x03
      00014A 26               [12] 1180 	add	a,@r0
      00014B F7               [12] 1181 	mov	@r1,a
      00014C 74 00            [12] 1182 	mov	a,#0x00
      00014E 08               [12] 1183 	inc	r0
      00014F 36               [12] 1184 	addc	a,@r0
      000150 09               [12] 1185 	inc	r1
      000151 F7               [12] 1186 	mov	@r1,a
      000152 08               [12] 1187 	inc	r0
      000153 E6               [12] 1188 	mov	a,@r0
      000154 09               [12] 1189 	inc	r1
      000155 F7               [12] 1190 	mov	@r1,a
      000156 A8*00            [24] 1191 	mov	r0,_bp
      000158 08               [12] 1192 	inc	r0
      000159 86 82            [24] 1193 	mov	dpl,@r0
      00015B 08               [12] 1194 	inc	r0
      00015C 86 83            [24] 1195 	mov	dph,@r0
      00015E 08               [12] 1196 	inc	r0
      00015F 86 F0            [24] 1197 	mov	b,@r0
      000161 12r00r00         [24] 1198 	lcall	__gptrget
      000164 FD               [12] 1199 	mov	r5,a
      000165 A3               [24] 1200 	inc	dptr
      000166 12r00r00         [24] 1201 	lcall	__gptrget
      000169 FE               [12] 1202 	mov	r6,a
      00016A A3               [24] 1203 	inc	dptr
      00016B 12r00r00         [24] 1204 	lcall	__gptrget
      00016E FF               [12] 1205 	mov	r7,a
      00016F E5*00            [12] 1206 	mov	a,_bp
      000171 24 04            [12] 1207 	add	a,#0x04
      000173 F8               [12] 1208 	mov	r0,a
      000174 86 82            [24] 1209 	mov	dpl,@r0
      000176 08               [12] 1210 	inc	r0
      000177 86 83            [24] 1211 	mov	dph,@r0
      000179 08               [12] 1212 	inc	r0
      00017A 86 F0            [24] 1213 	mov	b,@r0
      00017C ED               [12] 1214 	mov	a,r5
      00017D 12r00r00         [24] 1215 	lcall	__gptrput
      000180 A3               [24] 1216 	inc	dptr
      000181 EE               [12] 1217 	mov	a,r6
      000182 12r00r00         [24] 1218 	lcall	__gptrput
      000185 A3               [24] 1219 	inc	dptr
      000186 EF               [12] 1220 	mov	a,r7
      000187 12r00r00         [24] 1221 	lcall	__gptrput
                           00018A  1222 	C$queue.c$284$3_0$182 ==.
                                   1223 ;	queue.c:284: pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
      00018A E5*00            [12] 1224 	mov	a,_bp
      00018C 24 0A            [12] 1225 	add	a,#0x0a
      00018E F8               [12] 1226 	mov	r0,a
      00018F E5*00            [12] 1227 	mov	a,_bp
      000191 24 04            [12] 1228 	add	a,#0x04
      000193 F9               [12] 1229 	mov	r1,a
      000194 74 03            [12] 1230 	mov	a,#0x03
      000196 26               [12] 1231 	add	a,@r0
      000197 F7               [12] 1232 	mov	@r1,a
      000198 74 00            [12] 1233 	mov	a,#0x00
      00019A 08               [12] 1234 	inc	r0
      00019B 36               [12] 1235 	addc	a,@r0
      00019C 09               [12] 1236 	inc	r1
      00019D F7               [12] 1237 	mov	@r1,a
      00019E 08               [12] 1238 	inc	r0
      00019F E6               [12] 1239 	mov	a,@r0
      0001A0 09               [12] 1240 	inc	r1
      0001A1 F7               [12] 1241 	mov	@r1,a
      0001A2 A8*00            [24] 1242 	mov	r0,_bp
      0001A4 08               [12] 1243 	inc	r0
      0001A5 86 82            [24] 1244 	mov	dpl,@r0
      0001A7 08               [12] 1245 	inc	r0
      0001A8 86 83            [24] 1246 	mov	dph,@r0
      0001AA 08               [12] 1247 	inc	r0
      0001AB 86 F0            [24] 1248 	mov	b,@r0
      0001AD 12r00r00         [24] 1249 	lcall	__gptrget
      0001B0 FD               [12] 1250 	mov	r5,a
      0001B1 A3               [24] 1251 	inc	dptr
      0001B2 12r00r00         [24] 1252 	lcall	__gptrget
      0001B5 FE               [12] 1253 	mov	r6,a
      0001B6 A3               [24] 1254 	inc	dptr
      0001B7 12r00r00         [24] 1255 	lcall	__gptrget
      0001BA FF               [12] 1256 	mov	r7,a
      0001BB 8A 82            [24] 1257 	mov	dpl,r2
      0001BD 8B 83            [24] 1258 	mov	dph,r3
      0001BF 8C F0            [24] 1259 	mov	b,r4
      0001C1 12r00r00         [24] 1260 	lcall	__gptrget
      0001C4 FA               [12] 1261 	mov	r2,a
      0001C5 7C 00            [12] 1262 	mov	r4,#0x00
      0001C7 E5*00            [12] 1263 	mov	a,_bp
      0001C9 24 0A            [12] 1264 	add	a,#0x0a
      0001CB F8               [12] 1265 	mov	r0,a
      0001CC EA               [12] 1266 	mov	a,r2
      0001CD 24 FF            [12] 1267 	add	a,#0xff
      0001CF F6               [12] 1268 	mov	@r0,a
      0001D0 EC               [12] 1269 	mov	a,r4
      0001D1 34 FF            [12] 1270 	addc	a,#0xff
      0001D3 08               [12] 1271 	inc	r0
      0001D4 F6               [12] 1272 	mov	@r0,a
      0001D5 E5*00            [12] 1273 	mov	a,_bp
      0001D7 24 07            [12] 1274 	add	a,#0x07
      0001D9 F8               [12] 1275 	mov	r0,a
      0001DA 86 82            [24] 1276 	mov	dpl,@r0
      0001DC 08               [12] 1277 	inc	r0
      0001DD 86 83            [24] 1278 	mov	dph,@r0
      0001DF 08               [12] 1279 	inc	r0
      0001E0 86 F0            [24] 1280 	mov	b,@r0
      0001E2 12r00r00         [24] 1281 	lcall	__gptrget
      0001E5 FB               [12] 1282 	mov	r3,a
      0001E6 7C 00            [12] 1283 	mov	r4,#0x00
      0001E8 C0 07            [24] 1284 	push	ar7
      0001EA C0 06            [24] 1285 	push	ar6
      0001EC C0 05            [24] 1286 	push	ar5
      0001EE C0 03            [24] 1287 	push	ar3
      0001F0 C0 04            [24] 1288 	push	ar4
      0001F2 E5*00            [12] 1289 	mov	a,_bp
      0001F4 24 0A            [12] 1290 	add	a,#0x0a
      0001F6 F8               [12] 1291 	mov	r0,a
      0001F7 86 82            [24] 1292 	mov	dpl,@r0
      0001F9 08               [12] 1293 	inc	r0
      0001FA 86 83            [24] 1294 	mov	dph,@r0
      0001FC 12r00r00         [24] 1295 	lcall	__mulint
      0001FF AB 82            [24] 1296 	mov	r3,dpl
      000201 AC 83            [24] 1297 	mov	r4,dph
      000203 15 81            [12] 1298 	dec	sp
      000205 15 81            [12] 1299 	dec	sp
      000207 D0 05            [24] 1300 	pop	ar5
      000209 D0 06            [24] 1301 	pop	ar6
      00020B D0 07            [24] 1302 	pop	ar7
      00020D EB               [12] 1303 	mov	a,r3
      00020E 2D               [12] 1304 	add	a,r5
      00020F FD               [12] 1305 	mov	r5,a
      000210 EC               [12] 1306 	mov	a,r4
      000211 3E               [12] 1307 	addc	a,r6
      000212 FE               [12] 1308 	mov	r6,a
      000213 E5*00            [12] 1309 	mov	a,_bp
      000215 24 04            [12] 1310 	add	a,#0x04
      000217 F8               [12] 1311 	mov	r0,a
      000218 86 82            [24] 1312 	mov	dpl,@r0
      00021A 08               [12] 1313 	inc	r0
      00021B 86 83            [24] 1314 	mov	dph,@r0
      00021D 08               [12] 1315 	inc	r0
      00021E 86 F0            [24] 1316 	mov	b,@r0
      000220 ED               [12] 1317 	mov	a,r5
      000221 12r00r00         [24] 1318 	lcall	__gptrput
      000224 A3               [24] 1319 	inc	dptr
      000225 EE               [12] 1320 	mov	a,r6
      000226 12r00r00         [24] 1321 	lcall	__gptrput
      000229 A3               [24] 1322 	inc	dptr
      00022A EF               [12] 1323 	mov	a,r7
      00022B 12r00r00         [24] 1324 	lcall	__gptrput
                           00022E  1325 	C$queue.c$285$3_0$182 ==.
                                   1326 ;	queue.c:285: pxQueue->cRxLock = queueUNLOCKED;
      00022E A8*00            [24] 1327 	mov	r0,_bp
      000230 08               [12] 1328 	inc	r0
      000231 74 27            [12] 1329 	mov	a,#0x27
      000233 26               [12] 1330 	add	a,@r0
      000234 FD               [12] 1331 	mov	r5,a
      000235 74 00            [12] 1332 	mov	a,#0x00
      000237 08               [12] 1333 	inc	r0
      000238 36               [12] 1334 	addc	a,@r0
      000239 FE               [12] 1335 	mov	r6,a
      00023A 08               [12] 1336 	inc	r0
      00023B 86 07            [24] 1337 	mov	ar7,@r0
      00023D 8D 82            [24] 1338 	mov	dpl,r5
      00023F 8E 83            [24] 1339 	mov	dph,r6
      000241 8F F0            [24] 1340 	mov	b,r7
      000243 74 FF            [12] 1341 	mov	a,#0xff
      000245 12r00r00         [24] 1342 	lcall	__gptrput
                           000248  1343 	C$queue.c$286$3_0$182 ==.
                                   1344 ;	queue.c:286: pxQueue->cTxLock = queueUNLOCKED;
      000248 A8*00            [24] 1345 	mov	r0,_bp
      00024A 08               [12] 1346 	inc	r0
      00024B 74 28            [12] 1347 	mov	a,#0x28
      00024D 26               [12] 1348 	add	a,@r0
      00024E FD               [12] 1349 	mov	r5,a
      00024F 74 00            [12] 1350 	mov	a,#0x00
      000251 08               [12] 1351 	inc	r0
      000252 36               [12] 1352 	addc	a,@r0
      000253 FE               [12] 1353 	mov	r6,a
      000254 08               [12] 1354 	inc	r0
      000255 86 07            [24] 1355 	mov	ar7,@r0
      000257 8D 82            [24] 1356 	mov	dpl,r5
      000259 8E 83            [24] 1357 	mov	dph,r6
      00025B 8F F0            [24] 1358 	mov	b,r7
      00025D 74 FF            [12] 1359 	mov	a,#0xff
      00025F 12r00r00         [24] 1360 	lcall	__gptrput
                           000262  1361 	C$queue.c$288$3_0$182 ==.
                                   1362 ;	queue.c:288: if( xNewQueue == pdFALSE )
      000262 E5*00            [12] 1363 	mov	a,_bp
      000264 24 FD            [12] 1364 	add	a,#0xfd
      000266 F8               [12] 1365 	mov	r0,a
      000267 E6               [12] 1366 	mov	a,@r0
      000268 60 03            [24] 1367 	jz	00141$
      00026A 02r02rA5         [24] 1368 	ljmp	00106$
      00026D                       1369 00141$:
                           00026D  1370 	C$queue.c$295$4_0$183 ==.
                                   1371 ;	queue.c:295: if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
      00026D A8*00            [24] 1372 	mov	r0,_bp
      00026F 08               [12] 1373 	inc	r0
      000270 74 0C            [12] 1374 	mov	a,#0x0c
      000272 26               [12] 1375 	add	a,@r0
      000273 FD               [12] 1376 	mov	r5,a
      000274 74 00            [12] 1377 	mov	a,#0x00
      000276 08               [12] 1378 	inc	r0
      000277 36               [12] 1379 	addc	a,@r0
      000278 FE               [12] 1380 	mov	r6,a
      000279 08               [12] 1381 	inc	r0
      00027A 86 07            [24] 1382 	mov	ar7,@r0
      00027C 8D 82            [24] 1383 	mov	dpl,r5
      00027E 8E 83            [24] 1384 	mov	dph,r6
      000280 8F F0            [24] 1385 	mov	b,r7
      000282 12r00r00         [24] 1386 	lcall	__gptrget
      000285 70 03            [24] 1387 	jnz	00142$
      000287 02r02rD5         [24] 1388 	ljmp	00107$
      00028A                       1389 00142$:
                           00028A  1390 	C$queue.c$297$5_0$184 ==.
                                   1391 ;	queue.c:297: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
      00028A A8*00            [24] 1392 	mov	r0,_bp
      00028C 08               [12] 1393 	inc	r0
      00028D 74 0C            [12] 1394 	mov	a,#0x0c
      00028F 26               [12] 1395 	add	a,@r0
      000290 FD               [12] 1396 	mov	r5,a
      000291 74 00            [12] 1397 	mov	a,#0x00
      000293 08               [12] 1398 	inc	r0
      000294 36               [12] 1399 	addc	a,@r0
      000295 FE               [12] 1400 	mov	r6,a
      000296 08               [12] 1401 	inc	r0
      000297 86 07            [24] 1402 	mov	ar7,@r0
      000299 8D 82            [24] 1403 	mov	dpl,r5
      00029B 8E 83            [24] 1404 	mov	dph,r6
      00029D 8F F0            [24] 1405 	mov	b,r7
      00029F 12r00r00         [24] 1406 	lcall	_xTaskRemoveFromEventList
      0002A2 02r02rD5         [24] 1407 	ljmp	00107$
      0002A5                       1408 00106$:
                           0002A5  1409 	C$queue.c$314$4_0$188 ==.
                                   1410 ;	queue.c:314: vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
      0002A5 A8*00            [24] 1411 	mov	r0,_bp
      0002A7 08               [12] 1412 	inc	r0
      0002A8 74 0C            [12] 1413 	mov	a,#0x0c
      0002AA 26               [12] 1414 	add	a,@r0
      0002AB FD               [12] 1415 	mov	r5,a
      0002AC 74 00            [12] 1416 	mov	a,#0x00
      0002AE 08               [12] 1417 	inc	r0
      0002AF 36               [12] 1418 	addc	a,@r0
      0002B0 FE               [12] 1419 	mov	r6,a
      0002B1 08               [12] 1420 	inc	r0
      0002B2 86 07            [24] 1421 	mov	ar7,@r0
      0002B4 8D 82            [24] 1422 	mov	dpl,r5
      0002B6 8E 83            [24] 1423 	mov	dph,r6
      0002B8 8F F0            [24] 1424 	mov	b,r7
      0002BA 12r00r00         [24] 1425 	lcall	_vListInitialise
                           0002BD  1426 	C$queue.c$315$4_0$188 ==.
                                   1427 ;	queue.c:315: vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
      0002BD A8*00            [24] 1428 	mov	r0,_bp
      0002BF 08               [12] 1429 	inc	r0
      0002C0 74 18            [12] 1430 	mov	a,#0x18
      0002C2 26               [12] 1431 	add	a,@r0
      0002C3 FD               [12] 1432 	mov	r5,a
      0002C4 74 00            [12] 1433 	mov	a,#0x00
      0002C6 08               [12] 1434 	inc	r0
      0002C7 36               [12] 1435 	addc	a,@r0
      0002C8 FE               [12] 1436 	mov	r6,a
      0002C9 08               [12] 1437 	inc	r0
      0002CA 86 07            [24] 1438 	mov	ar7,@r0
      0002CC 8D 82            [24] 1439 	mov	dpl,r5
      0002CE 8E 83            [24] 1440 	mov	dph,r6
      0002D0 8F F0            [24] 1441 	mov	b,r7
      0002D2 12r00r00         [24] 1442 	lcall	_vListInitialise
      0002D5                       1443 00107$:
                           0002D5  1444 	C$queue.c$318$2_0$181 ==.
                                   1445 ;	queue.c:318: taskEXIT_CRITICAL();
      0002D5 D0 E0            [24] 1446 	pop ACC 
      0002D7 53 E0 80         [24] 1447 	anl	_ACC,#0x80
      0002DA E5 E0            [12] 1448 	mov	a,_ACC
      0002DC 42 A8            [12] 1449 	orl	_IE,a
      0002DE D0 E0            [24] 1450 	pop ACC 
      0002E0 02r02rEA         [24] 1451 	ljmp	00110$
      0002E3                       1452 00109$:
                           0002E3  1453 	C$queue.c$322$2_0$189 ==.
                                   1454 ;	queue.c:322: xReturn = pdFAIL;
      0002E3 E5*00            [12] 1455 	mov	a,_bp
      0002E5 24 0D            [12] 1456 	add	a,#0x0d
      0002E7 F8               [12] 1457 	mov	r0,a
      0002E8 76 00            [12] 1458 	mov	@r0,#0x00
      0002EA                       1459 00110$:
                           0002EA  1460 	C$queue.c$329$1_0$180 ==.
                                   1461 ;	queue.c:329: return xReturn;
      0002EA E5*00            [12] 1462 	mov	a,_bp
      0002EC 24 0D            [12] 1463 	add	a,#0x0d
      0002EE F8               [12] 1464 	mov	r0,a
      0002EF 86 82            [24] 1465 	mov	dpl,@r0
      0002F1                       1466 00113$:
                           0002F1  1467 	C$queue.c$330$1_0$180 ==.
                                   1468 ;	queue.c:330: }
      0002F1 85*00 81         [24] 1469 	mov	sp,_bp
      0002F4 D0*00            [24] 1470 	pop	_bp
                           0002F6  1471 	C$queue.c$330$1_0$180 ==.
                           0002F6  1472 	XG$xQueueGenericReset$0$0 ==.
      0002F6 22               [24] 1473 	ret
                                   1474 ;------------------------------------------------------------
                                   1475 ;Allocation info for local variables in function 'xQueueGenericCreate'
                                   1476 ;------------------------------------------------------------
                                   1477 ;uxItemSize                Allocated to stack - _bp -3
                                   1478 ;ucQueueType               Allocated to stack - _bp -4
                                   1479 ;uxQueueLength             Allocated to stack - _bp +1
                                   1480 ;pxNewQueue                Allocated to registers r4 r5 r6 
                                   1481 ;xQueueSizeInBytes         Allocated to registers 
                                   1482 ;pucQueueStorage           Allocated to registers r2 r3 r7 
                                   1483 ;------------------------------------------------------------
                           0002F7  1484 	G$xQueueGenericCreate$0$0 ==.
                           0002F7  1485 	C$queue.c$398$1_0$191 ==.
                                   1486 ;	queue.c:398: QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                   1487 ;	-----------------------------------------
                                   1488 ;	 function xQueueGenericCreate
                                   1489 ;	-----------------------------------------
      0002F7                       1490 _xQueueGenericCreate:
      0002F7 C0*00            [24] 1491 	push	_bp
      0002F9 85 81*00         [24] 1492 	mov	_bp,sp
      0002FC C0 82            [24] 1493 	push	dpl
                           0002FE  1494 	C$queue.c$402$2_0$191 ==.
                                   1495 ;	queue.c:402: Queue_t * pxNewQueue = NULL;
      0002FE 7C 00            [12] 1496 	mov	r4,#0x00
      000300 7D 00            [12] 1497 	mov	r5,#0x00
      000302 7E 00            [12] 1498 	mov	r6,#0x00
                           000304  1499 	C$queue.c$406$1_0$191 ==.
                                   1500 ;	queue.c:406: if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
      000304 A8*00            [24] 1501 	mov	r0,_bp
      000306 08               [12] 1502 	inc	r0
      000307 E6               [12] 1503 	mov	a,@r0
      000308 70 03            [24] 1504 	jnz	00131$
      00030A 02r03rD5         [24] 1505 	ljmp	00106$
      00030D                       1506 00131$:
                           00030D  1507 	C$queue.c$408$1_0$191 ==.
                                   1508 ;	queue.c:408: ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
      00030D C0 04            [24] 1509 	push	ar4
      00030F C0 05            [24] 1510 	push	ar5
      000311 C0 06            [24] 1511 	push	ar6
      000313 A8*00            [24] 1512 	mov	r0,_bp
      000315 08               [12] 1513 	inc	r0
      000316 86 02            [24] 1514 	mov	ar2,@r0
      000318 7B 00            [12] 1515 	mov	r3,#0x00
      00031A C0 06            [24] 1516 	push	ar6
      00031C C0 05            [24] 1517 	push	ar5
      00031E C0 04            [24] 1518 	push	ar4
      000320 C0 02            [24] 1519 	push	ar2
      000322 C0 03            [24] 1520 	push	ar3
      000324 75 82 FF         [24] 1521 	mov	dpl,#0xff
      000327 75 83 FF         [24] 1522 	mov	dph,#0xff
      00032A 12r00r00         [24] 1523 	lcall	__divuint
      00032D AA 82            [24] 1524 	mov	r2,dpl
      00032F AB 83            [24] 1525 	mov	r3,dph
      000331 15 81            [12] 1526 	dec	sp
      000333 15 81            [12] 1527 	dec	sp
      000335 D0 04            [24] 1528 	pop	ar4
      000337 D0 05            [24] 1529 	pop	ar5
      000339 D0 06            [24] 1530 	pop	ar6
      00033B E5*00            [12] 1531 	mov	a,_bp
      00033D 24 FD            [12] 1532 	add	a,#0xfd
      00033F F8               [12] 1533 	mov	r0,a
      000340 86 05            [24] 1534 	mov	ar5,@r0
      000342 7E 00            [12] 1535 	mov	r6,#0x00
      000344 C3               [12] 1536 	clr	c
      000345 EA               [12] 1537 	mov	a,r2
      000346 9D               [12] 1538 	subb	a,r5
      000347 EB               [12] 1539 	mov	a,r3
      000348 9E               [12] 1540 	subb	a,r6
      000349 D0 06            [24] 1541 	pop	ar6
      00034B D0 05            [24] 1542 	pop	ar5
      00034D D0 04            [24] 1543 	pop	ar4
      00034F 50 03            [24] 1544 	jnc	00132$
      000351 02r03rD5         [24] 1545 	ljmp	00106$
      000354                       1546 00132$:
                           000354  1547 	C$queue.c$410$1_0$191 ==.
                                   1548 ;	queue.c:410: ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
      000354 A8*00            [24] 1549 	mov	r0,_bp
      000356 08               [12] 1550 	inc	r0
      000357 E5*00            [12] 1551 	mov	a,_bp
      000359 24 FD            [12] 1552 	add	a,#0xfd
      00035B F9               [12] 1553 	mov	r1,a
      00035C 86 F0            [24] 1554 	mov	b,@r0
      00035E E7               [12] 1555 	mov	a,@r1
      00035F A4               [48] 1556 	mul	ab
      000360 FA               [12] 1557 	mov	r2,a
      000361 AB F0            [24] 1558 	mov	r3,b
      000363 C3               [12] 1559 	clr	c
      000364 74 D6            [12] 1560 	mov	a,#0xd6
      000366 9A               [12] 1561 	subb	a,r2
      000367 74 FF            [12] 1562 	mov	a,#0xff
      000369 9B               [12] 1563 	subb	a,r3
      00036A 50 03            [24] 1564 	jnc	00133$
      00036C 02r03rD5         [24] 1565 	ljmp	00106$
      00036F                       1566 00133$:
                           00036F  1567 	C$queue.c$415$1_0$191 ==.
                                   1568 ;	queue.c:415: xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
                           00036F  1569 	C$queue.c$426$2_0$192 ==.
                                   1570 ;	queue.c:426: pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
      00036F 74 29            [12] 1571 	mov	a,#0x29
      000371 2A               [12] 1572 	add	a,r2
      000372 FA               [12] 1573 	mov	r2,a
      000373 74 00            [12] 1574 	mov	a,#0x00
      000375 3B               [12] 1575 	addc	a,r3
      000376 FB               [12] 1576 	mov	r3,a
      000377 8A 82            [24] 1577 	mov	dpl,r2
      000379 8B 83            [24] 1578 	mov	dph,r3
      00037B 12r00r00         [24] 1579 	lcall	_pvPortMalloc
      00037E AA 82            [24] 1580 	mov	r2,dpl
      000380 AB 83            [24] 1581 	mov	r3,dph
      000382 AF F0            [24] 1582 	mov	r7,b
      000384 8A 04            [24] 1583 	mov	ar4,r2
      000386 8B 05            [24] 1584 	mov	ar5,r3
      000388 8F 06            [24] 1585 	mov	ar6,r7
                           00038A  1586 	C$queue.c$428$1_0$191 ==.
                                   1587 ;	queue.c:428: if( pxNewQueue != NULL )
      00038A EC               [12] 1588 	mov	a,r4
      00038B 4D               [12] 1589 	orl	a,r5
      00038C 70 03            [24] 1590 	jnz	00134$
      00038E 02r03rD5         [24] 1591 	ljmp	00106$
      000391                       1592 00134$:
                           000391  1593 	C$queue.c$432$3_0$193 ==.
                                   1594 ;	queue.c:432: pucQueueStorage = ( uint8_t * ) pxNewQueue;
      000391 8C 02            [24] 1595 	mov	ar2,r4
      000393 8D 03            [24] 1596 	mov	ar3,r5
      000395 8E 07            [24] 1597 	mov	ar7,r6
                           000397  1598 	C$queue.c$433$3_0$193 ==.
                                   1599 ;	queue.c:433: pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
      000397 74 29            [12] 1600 	mov	a,#0x29
      000399 2A               [12] 1601 	add	a,r2
      00039A FA               [12] 1602 	mov	r2,a
      00039B 74 00            [12] 1603 	mov	a,#0x00
      00039D 3B               [12] 1604 	addc	a,r3
      00039E FB               [12] 1605 	mov	r3,a
                           00039F  1606 	C$queue.c$444$3_0$193 ==.
                                   1607 ;	queue.c:444: prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
      00039F C0 06            [24] 1608 	push	ar6
      0003A1 C0 05            [24] 1609 	push	ar5
      0003A3 C0 04            [24] 1610 	push	ar4
      0003A5 C0 04            [24] 1611 	push	ar4
      0003A7 C0 05            [24] 1612 	push	ar5
      0003A9 C0 06            [24] 1613 	push	ar6
      0003AB E5*00            [12] 1614 	mov	a,_bp
      0003AD 24 FC            [12] 1615 	add	a,#0xfc
      0003AF F8               [12] 1616 	mov	r0,a
      0003B0 E6               [12] 1617 	mov	a,@r0
      0003B1 C0 E0            [24] 1618 	push	acc
      0003B3 C0 02            [24] 1619 	push	ar2
      0003B5 C0 03            [24] 1620 	push	ar3
      0003B7 C0 07            [24] 1621 	push	ar7
      0003B9 E5*00            [12] 1622 	mov	a,_bp
      0003BB 24 FD            [12] 1623 	add	a,#0xfd
      0003BD F8               [12] 1624 	mov	r0,a
      0003BE E6               [12] 1625 	mov	a,@r0
      0003BF C0 E0            [24] 1626 	push	acc
      0003C1 A8*00            [24] 1627 	mov	r0,_bp
      0003C3 08               [12] 1628 	inc	r0
      0003C4 86 82            [24] 1629 	mov	dpl,@r0
      0003C6 12r03rE0         [24] 1630 	lcall	_prvInitialiseNewQueue
      0003C9 E5 81            [12] 1631 	mov	a,sp
      0003CB 24 F8            [12] 1632 	add	a,#0xf8
      0003CD F5 81            [12] 1633 	mov	sp,a
      0003CF D0 04            [24] 1634 	pop	ar4
      0003D1 D0 05            [24] 1635 	pop	ar5
      0003D3 D0 06            [24] 1636 	pop	ar6
                           0003D5  1637 	C$queue.c$455$1_0$191 ==.
                                   1638 ;	queue.c:455: mtCOVERAGE_TEST_MARKER();
      0003D5                       1639 00106$:
                           0003D5  1640 	C$queue.c$458$1_0$191 ==.
                                   1641 ;	queue.c:458: return pxNewQueue;
      0003D5 8C 82            [24] 1642 	mov	dpl,r4
      0003D7 8D 83            [24] 1643 	mov	dph,r5
      0003D9 8E F0            [24] 1644 	mov	b,r6
      0003DB                       1645 00109$:
                           0003DB  1646 	C$queue.c$459$1_0$191 ==.
                                   1647 ;	queue.c:459: }
      0003DB 15 81            [12] 1648 	dec	sp
      0003DD D0*00            [24] 1649 	pop	_bp
                           0003DF  1650 	C$queue.c$459$1_0$191 ==.
                           0003DF  1651 	XG$xQueueGenericCreate$0$0 ==.
      0003DF 22               [24] 1652 	ret
                                   1653 ;------------------------------------------------------------
                                   1654 ;Allocation info for local variables in function 'prvInitialiseNewQueue'
                                   1655 ;------------------------------------------------------------
                                   1656 ;uxItemSize                Allocated to stack - _bp -3
                                   1657 ;pucQueueStorage           Allocated to stack - _bp -6
                                   1658 ;ucQueueType               Allocated to stack - _bp -7
                                   1659 ;pxNewQueue                Allocated to stack - _bp -10
                                   1660 ;uxQueueLength             Allocated to stack - _bp +1
                                   1661 ;------------------------------------------------------------
                           0003E0  1662 	Fqueue$prvInitialiseNewQueue$0$0 ==.
                           0003E0  1663 	C$queue.c$464$1_0$197 ==.
                                   1664 ;	queue.c:464: static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   1665 ;	-----------------------------------------
                                   1666 ;	 function prvInitialiseNewQueue
                                   1667 ;	-----------------------------------------
      0003E0                       1668 _prvInitialiseNewQueue:
      0003E0 C0*00            [24] 1669 	push	_bp
      0003E2 85 81*00         [24] 1670 	mov	_bp,sp
      0003E5 C0 82            [24] 1671 	push	dpl
                           0003E7  1672 	C$queue.c$474$1_0$197 ==.
                                   1673 ;	queue.c:474: if( uxItemSize == ( UBaseType_t ) 0 )
      0003E7 E5*00            [12] 1674 	mov	a,_bp
      0003E9 24 FD            [12] 1675 	add	a,#0xfd
      0003EB F8               [12] 1676 	mov	r0,a
      0003EC E6               [12] 1677 	mov	a,@r0
      0003ED 60 03            [24] 1678 	jz	00110$
      0003EF 02r04r23         [24] 1679 	ljmp	00102$
      0003F2                       1680 00110$:
                           0003F2  1681 	C$queue.c$480$1_0$197 ==.
                                   1682 ;	queue.c:480: pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
      0003F2 E5*00            [12] 1683 	mov	a,_bp
      0003F4 24 F6            [12] 1684 	add	a,#0xf6
      0003F6 F8               [12] 1685 	mov	r0,a
      0003F7 86 04            [24] 1686 	mov	ar4,@r0
      0003F9 08               [12] 1687 	inc	r0
      0003FA 86 05            [24] 1688 	mov	ar5,@r0
      0003FC 08               [12] 1689 	inc	r0
      0003FD 86 06            [24] 1690 	mov	ar6,@r0
      0003FF E5*00            [12] 1691 	mov	a,_bp
      000401 24 F6            [12] 1692 	add	a,#0xf6
      000403 F8               [12] 1693 	mov	r0,a
      000404 86 02            [24] 1694 	mov	ar2,@r0
      000406 08               [12] 1695 	inc	r0
      000407 86 03            [24] 1696 	mov	ar3,@r0
      000409 08               [12] 1697 	inc	r0
      00040A 86 07            [24] 1698 	mov	ar7,@r0
      00040C 8C 82            [24] 1699 	mov	dpl,r4
      00040E 8D 83            [24] 1700 	mov	dph,r5
      000410 8E F0            [24] 1701 	mov	b,r6
      000412 EA               [12] 1702 	mov	a,r2
      000413 12r00r00         [24] 1703 	lcall	__gptrput
      000416 A3               [24] 1704 	inc	dptr
      000417 EB               [12] 1705 	mov	a,r3
      000418 12r00r00         [24] 1706 	lcall	__gptrput
      00041B A3               [24] 1707 	inc	dptr
      00041C EF               [12] 1708 	mov	a,r7
      00041D 12r00r00         [24] 1709 	lcall	__gptrput
      000420 02r04r51         [24] 1710 	ljmp	00103$
      000423                       1711 00102$:
                           000423  1712 	C$queue.c$485$2_0$199 ==.
                                   1713 ;	queue.c:485: pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
      000423 E5*00            [12] 1714 	mov	a,_bp
      000425 24 F6            [12] 1715 	add	a,#0xf6
      000427 F8               [12] 1716 	mov	r0,a
      000428 86 04            [24] 1717 	mov	ar4,@r0
      00042A 08               [12] 1718 	inc	r0
      00042B 86 05            [24] 1719 	mov	ar5,@r0
      00042D 08               [12] 1720 	inc	r0
      00042E 86 06            [24] 1721 	mov	ar6,@r0
      000430 E5*00            [12] 1722 	mov	a,_bp
      000432 24 FA            [12] 1723 	add	a,#0xfa
      000434 F8               [12] 1724 	mov	r0,a
      000435 86 02            [24] 1725 	mov	ar2,@r0
      000437 08               [12] 1726 	inc	r0
      000438 86 03            [24] 1727 	mov	ar3,@r0
      00043A 08               [12] 1728 	inc	r0
      00043B 86 07            [24] 1729 	mov	ar7,@r0
      00043D 8C 82            [24] 1730 	mov	dpl,r4
      00043F 8D 83            [24] 1731 	mov	dph,r5
      000441 8E F0            [24] 1732 	mov	b,r6
      000443 EA               [12] 1733 	mov	a,r2
      000444 12r00r00         [24] 1734 	lcall	__gptrput
      000447 A3               [24] 1735 	inc	dptr
      000448 EB               [12] 1736 	mov	a,r3
      000449 12r00r00         [24] 1737 	lcall	__gptrput
      00044C A3               [24] 1738 	inc	dptr
      00044D EF               [12] 1739 	mov	a,r7
      00044E 12r00r00         [24] 1740 	lcall	__gptrput
      000451                       1741 00103$:
                           000451  1742 	C$queue.c$490$1_0$197 ==.
                                   1743 ;	queue.c:490: pxNewQueue->uxLength = uxQueueLength;
      000451 E5*00            [12] 1744 	mov	a,_bp
      000453 24 F6            [12] 1745 	add	a,#0xf6
      000455 F8               [12] 1746 	mov	r0,a
      000456 86 05            [24] 1747 	mov	ar5,@r0
      000458 08               [12] 1748 	inc	r0
      000459 86 06            [24] 1749 	mov	ar6,@r0
      00045B 08               [12] 1750 	inc	r0
      00045C 86 07            [24] 1751 	mov	ar7,@r0
      00045E 74 25            [12] 1752 	mov	a,#0x25
      000460 2D               [12] 1753 	add	a,r5
      000461 FA               [12] 1754 	mov	r2,a
      000462 74 00            [12] 1755 	mov	a,#0x00
      000464 3E               [12] 1756 	addc	a,r6
      000465 FB               [12] 1757 	mov	r3,a
      000466 8F 04            [24] 1758 	mov	ar4,r7
      000468 8A 82            [24] 1759 	mov	dpl,r2
      00046A 8B 83            [24] 1760 	mov	dph,r3
      00046C 8C F0            [24] 1761 	mov	b,r4
      00046E A8*00            [24] 1762 	mov	r0,_bp
      000470 08               [12] 1763 	inc	r0
      000471 E6               [12] 1764 	mov	a,@r0
      000472 12r00r00         [24] 1765 	lcall	__gptrput
                           000475  1766 	C$queue.c$491$1_0$197 ==.
                                   1767 ;	queue.c:491: pxNewQueue->uxItemSize = uxItemSize;
      000475 74 26            [12] 1768 	mov	a,#0x26
      000477 2D               [12] 1769 	add	a,r5
      000478 FA               [12] 1770 	mov	r2,a
      000479 74 00            [12] 1771 	mov	a,#0x00
      00047B 3E               [12] 1772 	addc	a,r6
      00047C FB               [12] 1773 	mov	r3,a
      00047D 8F 04            [24] 1774 	mov	ar4,r7
      00047F 8A 82            [24] 1775 	mov	dpl,r2
      000481 8B 83            [24] 1776 	mov	dph,r3
      000483 8C F0            [24] 1777 	mov	b,r4
      000485 E5*00            [12] 1778 	mov	a,_bp
      000487 24 FD            [12] 1779 	add	a,#0xfd
      000489 F8               [12] 1780 	mov	r0,a
      00048A E6               [12] 1781 	mov	a,@r0
      00048B 12r00r00         [24] 1782 	lcall	__gptrput
                           00048E  1783 	C$queue.c$492$1_0$197 ==.
                                   1784 ;	queue.c:492: ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
      00048E 74 01            [12] 1785 	mov	a,#0x01
      000490 C0 E0            [24] 1786 	push	acc
      000492 8D 82            [24] 1787 	mov	dpl,r5
      000494 8E 83            [24] 1788 	mov	dph,r6
      000496 8F F0            [24] 1789 	mov	b,r7
      000498 12r00r00         [24] 1790 	lcall	_xQueueGenericReset
      00049B 15 81            [12] 1791 	dec	sp
      00049D                       1792 00104$:
                           00049D  1793 	C$queue.c$507$1_0$197 ==.
                                   1794 ;	queue.c:507: }
      00049D 15 81            [12] 1795 	dec	sp
      00049F D0*00            [24] 1796 	pop	_bp
                           0004A1  1797 	C$queue.c$507$1_0$197 ==.
                           0004A1  1798 	XFqueue$prvInitialiseNewQueue$0$0 ==.
      0004A1 22               [24] 1799 	ret
                                   1800 ;------------------------------------------------------------
                                   1801 ;Allocation info for local variables in function 'xQueueGenericSend'
                                   1802 ;------------------------------------------------------------
                                   1803 ;pvItemToQueue             Allocated to stack - _bp -5
                                   1804 ;xTicksToWait              Allocated to stack - _bp -7
                                   1805 ;xCopyPosition             Allocated to stack - _bp -8
                                   1806 ;xQueue                    Allocated to registers r5 r3 r4 
                                   1807 ;xEntryTimeSet             Allocated to stack - _bp +17
                                   1808 ;xYieldRequired            Allocated to registers 
                                   1809 ;xTimeOut                  Allocated to stack - _bp +14
                                   1810 ;pxQueue                   Allocated to stack - _bp +11
                                   1811 ;sloc0                     Allocated to stack - _bp +1
                                   1812 ;sloc1                     Allocated to stack - _bp +8
                                   1813 ;sloc2                     Allocated to stack - _bp +4
                                   1814 ;sloc3                     Allocated to stack - _bp +5
                                   1815 ;------------------------------------------------------------
                           0004A2  1816 	G$xQueueGenericSend$0$0 ==.
                           0004A2  1817 	C$queue.c$805$1_0$201 ==.
                                   1818 ;	queue.c:805: BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                                   1819 ;	-----------------------------------------
                                   1820 ;	 function xQueueGenericSend
                                   1821 ;	-----------------------------------------
      0004A2                       1822 _xQueueGenericSend:
      0004A2 C0*00            [24] 1823 	push	_bp
      0004A4 85 81*00         [24] 1824 	mov	_bp,sp
      0004A7 E5 81            [12] 1825 	mov	a,sp
      0004A9 24 11            [12] 1826 	add	a,#0x11
      0004AB F5 81            [12] 1827 	mov	sp,a
      0004AD AD 82            [24] 1828 	mov	r5,dpl
      0004AF AB 83            [24] 1829 	mov	r3,dph
      0004B1 AC F0            [24] 1830 	mov	r4,b
                           0004B3  1831 	C$queue.c$810$2_0$201 ==.
                                   1832 ;	queue.c:810: BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
      0004B3 E5*00            [12] 1833 	mov	a,_bp
      0004B5 24 11            [12] 1834 	add	a,#0x11
      0004B7 F8               [12] 1835 	mov	r0,a
      0004B8 76 00            [12] 1836 	mov	@r0,#0x00
                           0004BA  1837 	C$queue.c$812$2_0$201 ==.
                                   1838 ;	queue.c:812: Queue_t * const pxQueue = xQueue;
      0004BA E5*00            [12] 1839 	mov	a,_bp
      0004BC 24 0B            [12] 1840 	add	a,#0x0b
      0004BE F8               [12] 1841 	mov	r0,a
      0004BF A6 05            [24] 1842 	mov	@r0,ar5
      0004C1 08               [12] 1843 	inc	r0
      0004C2 A6 03            [24] 1844 	mov	@r0,ar3
      0004C4 08               [12] 1845 	inc	r0
      0004C5 A6 04            [24] 1846 	mov	@r0,ar4
                           0004C7  1847 	C$queue.c$815$4_0$204 ==.
                                   1848 ;	queue.c:815: configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
      0004C7 E5*00            [12] 1849 	mov	a,_bp
      0004C9 24 F8            [12] 1850 	add	a,#0xf8
      0004CB F8               [12] 1851 	mov	r0,a
      0004CC B6 02 04         [24] 1852 	cjne	@r0,#0x02,00174$
      0004CF 74 01            [12] 1853 	mov	a,#0x01
      0004D1 80 02            [24] 1854 	sjmp	00175$
      0004D3                       1855 00174$:
      0004D3 74 00            [12] 1856 	mov	a,#0x00
      0004D5                       1857 00175$:
      0004D5 FF               [12] 1858 	mov	r7,a
      0004D6 E5*00            [12] 1859 	mov	a,_bp
      0004D8 24 0E            [12] 1860 	add	a,#0x0e
      0004DA FE               [12] 1861 	mov	r6,a
      0004DB E5*00            [12] 1862 	mov	a,_bp
      0004DD 24 04            [12] 1863 	add	a,#0x04
      0004DF F8               [12] 1864 	mov	r0,a
      0004E0 A6 06            [24] 1865 	mov	@r0,ar6
      0004E2 A8*00            [24] 1866 	mov	r0,_bp
      0004E4 08               [12] 1867 	inc	r0
      0004E5 74 24            [12] 1868 	mov	a,#0x24
      0004E7 2D               [12] 1869 	add	a,r5
      0004E8 F6               [12] 1870 	mov	@r0,a
      0004E9 74 00            [12] 1871 	mov	a,#0x00
      0004EB 3B               [12] 1872 	addc	a,r3
      0004EC 08               [12] 1873 	inc	r0
      0004ED F6               [12] 1874 	mov	@r0,a
      0004EE 08               [12] 1875 	inc	r0
      0004EF A6 04            [24] 1876 	mov	@r0,ar4
      0004F1 E5*00            [12] 1877 	mov	a,_bp
      0004F3 24 08            [12] 1878 	add	a,#0x08
      0004F5 F8               [12] 1879 	mov	r0,a
      0004F6 74 25            [12] 1880 	mov	a,#0x25
      0004F8 2D               [12] 1881 	add	a,r5
      0004F9 F6               [12] 1882 	mov	@r0,a
      0004FA 74 00            [12] 1883 	mov	a,#0x00
      0004FC 3B               [12] 1884 	addc	a,r3
      0004FD 08               [12] 1885 	inc	r0
      0004FE F6               [12] 1886 	mov	@r0,a
      0004FF 08               [12] 1887 	inc	r0
      000500 A6 04            [24] 1888 	mov	@r0,ar4
      000502                       1889 00128$:
                           000502  1890 	C$queue.c$828$2_0$201 ==.
                                   1891 ;	queue.c:828: taskENTER_CRITICAL();
      000502 C0 E0            [24] 1892 	push ACC 
      000504 C0 A8            [24] 1893 	push IE 
                                   1894 ;	assignBit
      000506 C2 AF            [12] 1895 	clr	_EA
                           000508  1896 	C$queue.c$834$4_0$204 ==.
                                   1897 ;	queue.c:834: if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
      000508 A8*00            [24] 1898 	mov	r0,_bp
      00050A 08               [12] 1899 	inc	r0
      00050B 86 82            [24] 1900 	mov	dpl,@r0
      00050D 08               [12] 1901 	inc	r0
      00050E 86 83            [24] 1902 	mov	dph,@r0
      000510 08               [12] 1903 	inc	r0
      000511 86 F0            [24] 1904 	mov	b,@r0
      000513 12r00r00         [24] 1905 	lcall	__gptrget
      000516 FD               [12] 1906 	mov	r5,a
      000517 E5*00            [12] 1907 	mov	a,_bp
      000519 24 08            [12] 1908 	add	a,#0x08
      00051B F8               [12] 1909 	mov	r0,a
      00051C 86 82            [24] 1910 	mov	dpl,@r0
      00051E 08               [12] 1911 	inc	r0
      00051F 86 83            [24] 1912 	mov	dph,@r0
      000521 08               [12] 1913 	inc	r0
      000522 86 F0            [24] 1914 	mov	b,@r0
      000524 12r00r00         [24] 1915 	lcall	__gptrget
      000527 FC               [12] 1916 	mov	r4,a
      000528 C3               [12] 1917 	clr	c
      000529 ED               [12] 1918 	mov	a,r5
      00052A 9C               [12] 1919 	subb	a,r4
      00052B 50 03            [24] 1920 	jnc	00176$
      00052D 02r05r36         [24] 1921 	ljmp	00111$
      000530                       1922 00176$:
      000530 EF               [12] 1923 	mov	a,r7
      000531 70 03            [24] 1924 	jnz	00177$
      000533 02r05rAE         [24] 1925 	ljmp	00112$
      000536                       1926 00177$:
      000536                       1927 00111$:
                           000536  1928 	C$queue.c$900$6_0$206 ==.
                                   1929 ;	queue.c:900: xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
      000536 E5*00            [12] 1930 	mov	a,_bp
      000538 24 F8            [12] 1931 	add	a,#0xf8
      00053A F8               [12] 1932 	mov	r0,a
      00053B E6               [12] 1933 	mov	a,@r0
      00053C C0 E0            [24] 1934 	push	acc
      00053E E5*00            [12] 1935 	mov	a,_bp
      000540 24 FB            [12] 1936 	add	a,#0xfb
      000542 F8               [12] 1937 	mov	r0,a
      000543 E6               [12] 1938 	mov	a,@r0
      000544 C0 E0            [24] 1939 	push	acc
      000546 08               [12] 1940 	inc	r0
      000547 E6               [12] 1941 	mov	a,@r0
      000548 C0 E0            [24] 1942 	push	acc
      00054A 08               [12] 1943 	inc	r0
      00054B E6               [12] 1944 	mov	a,@r0
      00054C C0 E0            [24] 1945 	push	acc
      00054E E5*00            [12] 1946 	mov	a,_bp
      000550 24 0B            [12] 1947 	add	a,#0x0b
      000552 F8               [12] 1948 	mov	r0,a
      000553 86 82            [24] 1949 	mov	dpl,@r0
      000555 08               [12] 1950 	inc	r0
      000556 86 83            [24] 1951 	mov	dph,@r0
      000558 08               [12] 1952 	inc	r0
      000559 86 F0            [24] 1953 	mov	b,@r0
      00055B 12r14rD3         [24] 1954 	lcall	_prvCopyDataToQueue
      00055E E5 81            [12] 1955 	mov	a,sp
      000560 24 FC            [12] 1956 	add	a,#0xfc
      000562 F5 81            [12] 1957 	mov	sp,a
                           000564  1958 	C$queue.c$904$6_0$206 ==.
                                   1959 ;	queue.c:904: if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
      000564 E5*00            [12] 1960 	mov	a,_bp
      000566 24 0B            [12] 1961 	add	a,#0x0b
      000568 F8               [12] 1962 	mov	r0,a
      000569 74 18            [12] 1963 	mov	a,#0x18
      00056B 26               [12] 1964 	add	a,@r0
      00056C FA               [12] 1965 	mov	r2,a
      00056D 74 00            [12] 1966 	mov	a,#0x00
      00056F 08               [12] 1967 	inc	r0
      000570 36               [12] 1968 	addc	a,@r0
      000571 FB               [12] 1969 	mov	r3,a
      000572 08               [12] 1970 	inc	r0
      000573 86 04            [24] 1971 	mov	ar4,@r0
      000575 8A 82            [24] 1972 	mov	dpl,r2
      000577 8B 83            [24] 1973 	mov	dph,r3
      000579 8C F0            [24] 1974 	mov	b,r4
      00057B 12r00r00         [24] 1975 	lcall	__gptrget
      00057E 70 03            [24] 1976 	jnz	00178$
      000580 02r05r9D         [24] 1977 	ljmp	00105$
      000583                       1978 00178$:
                           000583  1979 	C$queue.c$906$7_0$207 ==.
                                   1980 ;	queue.c:906: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
      000583 E5*00            [12] 1981 	mov	a,_bp
      000585 24 0B            [12] 1982 	add	a,#0x0b
      000587 F8               [12] 1983 	mov	r0,a
      000588 74 18            [12] 1984 	mov	a,#0x18
      00058A 26               [12] 1985 	add	a,@r0
      00058B FA               [12] 1986 	mov	r2,a
      00058C 74 00            [12] 1987 	mov	a,#0x00
      00058E 08               [12] 1988 	inc	r0
      00058F 36               [12] 1989 	addc	a,@r0
      000590 FB               [12] 1990 	mov	r3,a
      000591 08               [12] 1991 	inc	r0
      000592 86 04            [24] 1992 	mov	ar4,@r0
      000594 8A 82            [24] 1993 	mov	dpl,r2
      000596 8B 83            [24] 1994 	mov	dph,r3
      000598 8C F0            [24] 1995 	mov	b,r4
      00059A 12r00r00         [24] 1996 	lcall	_xTaskRemoveFromEventList
                           00059D  1997 	C$queue.c$919$6_0$206 ==.
                                   1998 ;	queue.c:919: else if( xYieldRequired != pdFALSE )
      00059D                       1999 00105$:
                           00059D  2000 	C$queue.c$934$5_0$205 ==.
                                   2001 ;	queue.c:934: taskEXIT_CRITICAL();
      00059D D0 E0            [24] 2002 	pop ACC 
      00059F 53 E0 80         [24] 2003 	anl	_ACC,#0x80
      0005A2 E5 E0            [12] 2004 	mov	a,_ACC
      0005A4 42 A8            [12] 2005 	orl	_IE,a
      0005A6 D0 E0            [24] 2006 	pop ACC 
                           0005A8  2007 	C$queue.c$935$5_0$205 ==.
                                   2008 ;	queue.c:935: return pdPASS;
      0005A8 75 82 01         [24] 2009 	mov	dpl,#0x01
      0005AB 02r07r89         [24] 2010 	ljmp	00130$
      0005AE                       2011 00112$:
                           0005AE  2012 	C$queue.c$939$5_0$212 ==.
                                   2013 ;	queue.c:939: if( xTicksToWait == ( TickType_t ) 0 )
      0005AE E5*00            [12] 2014 	mov	a,_bp
      0005B0 24 F9            [12] 2015 	add	a,#0xf9
      0005B2 F8               [12] 2016 	mov	r0,a
      0005B3 E6               [12] 2017 	mov	a,@r0
      0005B4 08               [12] 2018 	inc	r0
      0005B5 46               [12] 2019 	orl	a,@r0
      0005B6 60 03            [24] 2020 	jz	00179$
      0005B8 02r05rCC         [24] 2021 	ljmp	00109$
      0005BB                       2022 00179$:
                           0005BB  2023 	C$queue.c$943$6_0$213 ==.
                                   2024 ;	queue.c:943: taskEXIT_CRITICAL();
      0005BB D0 E0            [24] 2025 	pop ACC 
      0005BD 53 E0 80         [24] 2026 	anl	_ACC,#0x80
      0005C0 E5 E0            [12] 2027 	mov	a,_ACC
      0005C2 42 A8            [12] 2028 	orl	_IE,a
      0005C4 D0 E0            [24] 2029 	pop ACC 
                           0005C6  2030 	C$queue.c$948$6_0$213 ==.
                                   2031 ;	queue.c:948: return errQUEUE_FULL;
      0005C6 75 82 00         [24] 2032 	mov	dpl,#0x00
      0005C9 02r07r89         [24] 2033 	ljmp	00130$
      0005CC                       2034 00109$:
                           0005CC  2035 	C$queue.c$950$5_0$212 ==.
                                   2036 ;	queue.c:950: else if( xEntryTimeSet == pdFALSE )
      0005CC E5*00            [12] 2037 	mov	a,_bp
      0005CE 24 11            [12] 2038 	add	a,#0x11
      0005D0 F8               [12] 2039 	mov	r0,a
      0005D1 E6               [12] 2040 	mov	a,@r0
      0005D2 60 03            [24] 2041 	jz	00180$
      0005D4 02r05rF5         [24] 2042 	ljmp	00113$
      0005D7                       2043 00180$:
                           0005D7  2044 	C$queue.c$954$6_0$214 ==.
                                   2045 ;	queue.c:954: vTaskInternalSetTimeOutState( &xTimeOut );
      0005D7 8E 02            [24] 2046 	mov	ar2,r6
      0005D9 7B 00            [12] 2047 	mov	r3,#0x00
      0005DB 7C 40            [12] 2048 	mov	r4,#0x40
      0005DD 8A 82            [24] 2049 	mov	dpl,r2
      0005DF 8B 83            [24] 2050 	mov	dph,r3
      0005E1 8C F0            [24] 2051 	mov	b,r4
      0005E3 C0 07            [24] 2052 	push	ar7
      0005E5 C0 06            [24] 2053 	push	ar6
      0005E7 12r00r00         [24] 2054 	lcall	_vTaskInternalSetTimeOutState
      0005EA D0 06            [24] 2055 	pop	ar6
      0005EC D0 07            [24] 2056 	pop	ar7
                           0005EE  2057 	C$queue.c$955$6_0$214 ==.
                                   2058 ;	queue.c:955: xEntryTimeSet = pdTRUE;
      0005EE E5*00            [12] 2059 	mov	a,_bp
      0005F0 24 11            [12] 2060 	add	a,#0x11
      0005F2 F8               [12] 2061 	mov	r0,a
      0005F3 76 01            [12] 2062 	mov	@r0,#0x01
      0005F5                       2063 00113$:
                           0005F5  2064 	C$queue.c$964$2_0$201 ==.
                                   2065 ;	queue.c:964: taskEXIT_CRITICAL();
      0005F5 D0 E0            [24] 2066 	pop ACC 
      0005F7 53 E0 80         [24] 2067 	anl	_ACC,#0x80
      0005FA E5 E0            [12] 2068 	mov	a,_ACC
      0005FC 42 A8            [12] 2069 	orl	_IE,a
      0005FE D0 E0            [24] 2070 	pop ACC 
                           000600  2071 	C$queue.c$969$3_0$203 ==.
                                   2072 ;	queue.c:969: vTaskSuspendAll();
      000600 C0 07            [24] 2073 	push	ar7
      000602 C0 06            [24] 2074 	push	ar6
      000604 12r00r00         [24] 2075 	lcall	_vTaskSuspendAll
      000607 D0 06            [24] 2076 	pop	ar6
      000609 D0 07            [24] 2077 	pop	ar7
                           00060B  2078 	C$queue.c$970$3_0$203 ==.
                                   2079 ;	queue.c:970: prvLockQueue( pxQueue );
      00060B C0 E0            [24] 2080 	push ACC 
      00060D C0 A8            [24] 2081 	push IE 
                                   2082 ;	assignBit
      00060F C2 AF            [12] 2083 	clr	_EA
      000611 E5*00            [12] 2084 	mov	a,_bp
      000613 24 0B            [12] 2085 	add	a,#0x0b
      000615 F8               [12] 2086 	mov	r0,a
      000616 74 27            [12] 2087 	mov	a,#0x27
      000618 26               [12] 2088 	add	a,@r0
      000619 FA               [12] 2089 	mov	r2,a
      00061A 74 00            [12] 2090 	mov	a,#0x00
      00061C 08               [12] 2091 	inc	r0
      00061D 36               [12] 2092 	addc	a,@r0
      00061E FB               [12] 2093 	mov	r3,a
      00061F 08               [12] 2094 	inc	r0
      000620 86 04            [24] 2095 	mov	ar4,@r0
      000622 8A 82            [24] 2096 	mov	dpl,r2
      000624 8B 83            [24] 2097 	mov	dph,r3
      000626 8C F0            [24] 2098 	mov	b,r4
      000628 12r00r00         [24] 2099 	lcall	__gptrget
      00062B FD               [12] 2100 	mov	r5,a
      00062C BD FF 02         [24] 2101 	cjne	r5,#0xff,00181$
      00062F 80 03            [24] 2102 	sjmp	00182$
      000631                       2103 00181$:
      000631 02r06r3F         [24] 2104 	ljmp	00116$
      000634                       2105 00182$:
      000634 8A 82            [24] 2106 	mov	dpl,r2
      000636 8B 83            [24] 2107 	mov	dph,r3
      000638 8C F0            [24] 2108 	mov	b,r4
      00063A 74 00            [12] 2109 	mov	a,#0x00
      00063C 12r00r00         [24] 2110 	lcall	__gptrput
      00063F                       2111 00116$:
      00063F E5*00            [12] 2112 	mov	a,_bp
      000641 24 0B            [12] 2113 	add	a,#0x0b
      000643 F8               [12] 2114 	mov	r0,a
      000644 74 28            [12] 2115 	mov	a,#0x28
      000646 26               [12] 2116 	add	a,@r0
      000647 FA               [12] 2117 	mov	r2,a
      000648 74 00            [12] 2118 	mov	a,#0x00
      00064A 08               [12] 2119 	inc	r0
      00064B 36               [12] 2120 	addc	a,@r0
      00064C FB               [12] 2121 	mov	r3,a
      00064D 08               [12] 2122 	inc	r0
      00064E 86 04            [24] 2123 	mov	ar4,@r0
      000650 8A 82            [24] 2124 	mov	dpl,r2
      000652 8B 83            [24] 2125 	mov	dph,r3
      000654 8C F0            [24] 2126 	mov	b,r4
      000656 12r00r00         [24] 2127 	lcall	__gptrget
      000659 FD               [12] 2128 	mov	r5,a
      00065A BD FF 02         [24] 2129 	cjne	r5,#0xff,00183$
      00065D 80 03            [24] 2130 	sjmp	00184$
      00065F                       2131 00183$:
      00065F 02r06r6D         [24] 2132 	ljmp	00118$
      000662                       2133 00184$:
      000662 8A 82            [24] 2134 	mov	dpl,r2
      000664 8B 83            [24] 2135 	mov	dph,r3
      000666 8C F0            [24] 2136 	mov	b,r4
      000668 74 00            [12] 2137 	mov	a,#0x00
      00066A 12r00r00         [24] 2138 	lcall	__gptrput
      00066D                       2139 00118$:
      00066D C0 07            [24] 2140 	push	ar7
      00066F D0 E0            [24] 2141 	pop ACC 
      000671 53 E0 80         [24] 2142 	anl	_ACC,#0x80
      000674 E5 E0            [12] 2143 	mov	a,_ACC
      000676 42 A8            [12] 2144 	orl	_IE,a
      000678 D0 E0            [24] 2145 	pop ACC 
                           00067A  2146 	C$queue.c$973$3_0$203 ==.
                                   2147 ;	queue.c:973: if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
      00067A E5*00            [12] 2148 	mov	a,_bp
      00067C 24 F9            [12] 2149 	add	a,#0xf9
      00067E FC               [12] 2150 	mov	r4,a
      00067F E5*00            [12] 2151 	mov	a,_bp
      000681 24 05            [12] 2152 	add	a,#0x05
      000683 F8               [12] 2153 	mov	r0,a
      000684 A6 04            [24] 2154 	mov	@r0,ar4
      000686 08               [12] 2155 	inc	r0
      000687 76 00            [12] 2156 	mov	@r0,#0x00
      000689 08               [12] 2157 	inc	r0
      00068A 76 40            [12] 2158 	mov	@r0,#0x40
      00068C E5*00            [12] 2159 	mov	a,_bp
      00068E 24 04            [12] 2160 	add	a,#0x04
      000690 F8               [12] 2161 	mov	r0,a
      000691 86 04            [24] 2162 	mov	ar4,@r0
      000693 7D 00            [12] 2163 	mov	r5,#0x00
      000695 7F 40            [12] 2164 	mov	r7,#0x40
      000697 C0 06            [24] 2165 	push	ar6
      000699 E5*00            [12] 2166 	mov	a,_bp
      00069B 24 05            [12] 2167 	add	a,#0x05
      00069D F8               [12] 2168 	mov	r0,a
      00069E E6               [12] 2169 	mov	a,@r0
      00069F C0 E0            [24] 2170 	push	acc
      0006A1 08               [12] 2171 	inc	r0
      0006A2 E6               [12] 2172 	mov	a,@r0
      0006A3 C0 E0            [24] 2173 	push	acc
      0006A5 08               [12] 2174 	inc	r0
      0006A6 E6               [12] 2175 	mov	a,@r0
      0006A7 C0 E0            [24] 2176 	push	acc
      0006A9 8C 82            [24] 2177 	mov	dpl,r4
      0006AB 8D 83            [24] 2178 	mov	dph,r5
      0006AD 8F F0            [24] 2179 	mov	b,r7
      0006AF 12r00r00         [24] 2180 	lcall	_xTaskCheckForTimeOut
      0006B2 AF 82            [24] 2181 	mov	r7,dpl
      0006B4 15 81            [12] 2182 	dec	sp
      0006B6 15 81            [12] 2183 	dec	sp
      0006B8 15 81            [12] 2184 	dec	sp
      0006BA D0 06            [24] 2185 	pop	ar6
      0006BC EF               [12] 2186 	mov	a,r7
      0006BD D0 07            [24] 2187 	pop	ar7
      0006BF 60 03            [24] 2188 	jz	00185$
      0006C1 02r07r73         [24] 2189 	ljmp	00125$
      0006C4                       2190 00185$:
                           0006C4  2191 	C$queue.c$975$4_0$219 ==.
                                   2192 ;	queue.c:975: if( prvIsQueueFull( pxQueue ) != pdFALSE )
      0006C4 E5*00            [12] 2193 	mov	a,_bp
      0006C6 24 0B            [12] 2194 	add	a,#0x0b
      0006C8 F8               [12] 2195 	mov	r0,a
      0006C9 86 82            [24] 2196 	mov	dpl,@r0
      0006CB 08               [12] 2197 	inc	r0
      0006CC 86 83            [24] 2198 	mov	dph,@r0
      0006CE 08               [12] 2199 	inc	r0
      0006CF 86 F0            [24] 2200 	mov	b,@r0
      0006D1 C0 07            [24] 2201 	push	ar7
      0006D3 C0 06            [24] 2202 	push	ar6
      0006D5 12r1Br79         [24] 2203 	lcall	_prvIsQueueFull
      0006D8 E5 82            [12] 2204 	mov	a,dpl
      0006DA D0 06            [24] 2205 	pop	ar6
      0006DC D0 07            [24] 2206 	pop	ar7
      0006DE 70 03            [24] 2207 	jnz	00186$
      0006E0 02r07r4D         [24] 2208 	ljmp	00122$
      0006E3                       2209 00186$:
                           0006E3  2210 	C$queue.c$978$5_0$220 ==.
                                   2211 ;	queue.c:978: vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
      0006E3 E5*00            [12] 2212 	mov	a,_bp
      0006E5 24 0B            [12] 2213 	add	a,#0x0b
      0006E7 F8               [12] 2214 	mov	r0,a
      0006E8 74 0C            [12] 2215 	mov	a,#0x0c
      0006EA 26               [12] 2216 	add	a,@r0
      0006EB FB               [12] 2217 	mov	r3,a
      0006EC 74 00            [12] 2218 	mov	a,#0x00
      0006EE 08               [12] 2219 	inc	r0
      0006EF 36               [12] 2220 	addc	a,@r0
      0006F0 FC               [12] 2221 	mov	r4,a
      0006F1 08               [12] 2222 	inc	r0
      0006F2 86 05            [24] 2223 	mov	ar5,@r0
      0006F4 C0 07            [24] 2224 	push	ar7
      0006F6 C0 06            [24] 2225 	push	ar6
      0006F8 E5*00            [12] 2226 	mov	a,_bp
      0006FA 24 F9            [12] 2227 	add	a,#0xf9
      0006FC F8               [12] 2228 	mov	r0,a
      0006FD E6               [12] 2229 	mov	a,@r0
      0006FE C0 E0            [24] 2230 	push	acc
      000700 08               [12] 2231 	inc	r0
      000701 E6               [12] 2232 	mov	a,@r0
      000702 C0 E0            [24] 2233 	push	acc
      000704 8B 82            [24] 2234 	mov	dpl,r3
      000706 8C 83            [24] 2235 	mov	dph,r4
      000708 8D F0            [24] 2236 	mov	b,r5
      00070A 12r00r00         [24] 2237 	lcall	_vTaskPlaceOnEventList
      00070D 15 81            [12] 2238 	dec	sp
      00070F 15 81            [12] 2239 	dec	sp
      000711 D0 06            [24] 2240 	pop	ar6
      000713 D0 07            [24] 2241 	pop	ar7
                           000715  2242 	C$queue.c$985$5_0$220 ==.
                                   2243 ;	queue.c:985: prvUnlockQueue( pxQueue );
      000715 E5*00            [12] 2244 	mov	a,_bp
      000717 24 0B            [12] 2245 	add	a,#0x0b
      000719 F8               [12] 2246 	mov	r0,a
      00071A 86 82            [24] 2247 	mov	dpl,@r0
      00071C 08               [12] 2248 	inc	r0
      00071D 86 83            [24] 2249 	mov	dph,@r0
      00071F 08               [12] 2250 	inc	r0
      000720 86 F0            [24] 2251 	mov	b,@r0
      000722 C0 07            [24] 2252 	push	ar7
      000724 C0 06            [24] 2253 	push	ar6
      000726 12r19r84         [24] 2254 	lcall	_prvUnlockQueue
      000729 D0 06            [24] 2255 	pop	ar6
      00072B D0 07            [24] 2256 	pop	ar7
                           00072D  2257 	C$queue.c$992$5_0$220 ==.
                                   2258 ;	queue.c:992: if( xTaskResumeAll() == pdFALSE )
      00072D C0 07            [24] 2259 	push	ar7
      00072F C0 06            [24] 2260 	push	ar6
      000731 12r00r00         [24] 2261 	lcall	_xTaskResumeAll
      000734 E5 82            [12] 2262 	mov	a,dpl
      000736 D0 06            [24] 2263 	pop	ar6
      000738 D0 07            [24] 2264 	pop	ar7
      00073A 60 03            [24] 2265 	jz	00187$
      00073C 02r05r02         [24] 2266 	ljmp	00128$
      00073F                       2267 00187$:
                           00073F  2268 	C$queue.c$994$6_0$221 ==.
                                   2269 ;	queue.c:994: portYIELD_WITHIN_API();
      00073F C0 07            [24] 2270 	push	ar7
      000741 C0 06            [24] 2271 	push	ar6
      000743 12r00r00         [24] 2272 	lcall	_vPortYield
      000746 D0 06            [24] 2273 	pop	ar6
      000748 D0 07            [24] 2274 	pop	ar7
      00074A 02r05r02         [24] 2275 	ljmp	00128$
      00074D                       2276 00122$:
                           00074D  2277 	C$queue.c$1000$5_0$222 ==.
                                   2278 ;	queue.c:1000: prvUnlockQueue( pxQueue );
      00074D E5*00            [12] 2279 	mov	a,_bp
      00074F 24 0B            [12] 2280 	add	a,#0x0b
      000751 F8               [12] 2281 	mov	r0,a
      000752 86 82            [24] 2282 	mov	dpl,@r0
      000754 08               [12] 2283 	inc	r0
      000755 86 83            [24] 2284 	mov	dph,@r0
      000757 08               [12] 2285 	inc	r0
      000758 86 F0            [24] 2286 	mov	b,@r0
      00075A C0 07            [24] 2287 	push	ar7
      00075C C0 06            [24] 2288 	push	ar6
      00075E 12r19r84         [24] 2289 	lcall	_prvUnlockQueue
      000761 D0 06            [24] 2290 	pop	ar6
      000763 D0 07            [24] 2291 	pop	ar7
                           000765  2292 	C$queue.c$1001$5_0$222 ==.
                                   2293 ;	queue.c:1001: ( void ) xTaskResumeAll();
      000765 C0 07            [24] 2294 	push	ar7
      000767 C0 06            [24] 2295 	push	ar6
      000769 12r00r00         [24] 2296 	lcall	_xTaskResumeAll
      00076C D0 06            [24] 2297 	pop	ar6
      00076E D0 07            [24] 2298 	pop	ar7
      000770 02r05r02         [24] 2299 	ljmp	00128$
      000773                       2300 00125$:
                           000773  2301 	C$queue.c$1007$4_0$223 ==.
                                   2302 ;	queue.c:1007: prvUnlockQueue( pxQueue );
      000773 E5*00            [12] 2303 	mov	a,_bp
      000775 24 0B            [12] 2304 	add	a,#0x0b
      000777 F8               [12] 2305 	mov	r0,a
      000778 86 82            [24] 2306 	mov	dpl,@r0
      00077A 08               [12] 2307 	inc	r0
      00077B 86 83            [24] 2308 	mov	dph,@r0
      00077D 08               [12] 2309 	inc	r0
      00077E 86 F0            [24] 2310 	mov	b,@r0
      000780 12r19r84         [24] 2311 	lcall	_prvUnlockQueue
                           000783  2312 	C$queue.c$1008$4_0$223 ==.
                                   2313 ;	queue.c:1008: ( void ) xTaskResumeAll();
      000783 12r00r00         [24] 2314 	lcall	_xTaskResumeAll
                           000786  2315 	C$queue.c$1011$4_0$223 ==.
                                   2316 ;	queue.c:1011: return errQUEUE_FULL;
      000786 75 82 00         [24] 2317 	mov	dpl,#0x00
      000789                       2318 00130$:
                           000789  2319 	C$queue.c$1014$2_0$201 ==.
                                   2320 ;	queue.c:1014: }
      000789 85*00 81         [24] 2321 	mov	sp,_bp
      00078C D0*00            [24] 2322 	pop	_bp
                           00078E  2323 	C$queue.c$1014$2_0$201 ==.
                           00078E  2324 	XG$xQueueGenericSend$0$0 ==.
      00078E 22               [24] 2325 	ret
                                   2326 ;------------------------------------------------------------
                                   2327 ;Allocation info for local variables in function 'xQueueGenericSendFromISR'
                                   2328 ;------------------------------------------------------------
                                   2329 ;pvItemToQueue             Allocated to stack - _bp -5
                                   2330 ;pxHigherPriorityTaskWoken Allocated to stack - _bp -8
                                   2331 ;xCopyPosition             Allocated to stack - _bp -9
                                   2332 ;xQueue                    Allocated to registers r2 r3 r4 
                                   2333 ;xReturn                   Allocated to registers r7 
                                   2334 ;uxSavedInterruptStatus    Allocated to registers 
                                   2335 ;pxQueue                   Allocated to stack - _bp +1
                                   2336 ;cTxLock                   Allocated to registers r7 
                                   2337 ;uxPreviousMessagesWaiting Allocated to registers 
                                   2338 ;------------------------------------------------------------
                           00078F  2339 	G$xQueueGenericSendFromISR$0$0 ==.
                           00078F  2340 	C$queue.c$1017$2_0$225 ==.
                                   2341 ;	queue.c:1017: BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                   2342 ;	-----------------------------------------
                                   2343 ;	 function xQueueGenericSendFromISR
                                   2344 ;	-----------------------------------------
      00078F                       2345 _xQueueGenericSendFromISR:
      00078F C0*00            [24] 2346 	push	_bp
      000791 85 81*00         [24] 2347 	mov	_bp,sp
      000794 05 81            [12] 2348 	inc	sp
      000796 05 81            [12] 2349 	inc	sp
      000798 05 81            [12] 2350 	inc	sp
      00079A AA 82            [24] 2351 	mov	r2,dpl
      00079C AB 83            [24] 2352 	mov	r3,dph
      00079E AC F0            [24] 2353 	mov	r4,b
                           0007A0  2354 	C$queue.c$1024$2_0$225 ==.
                                   2355 ;	queue.c:1024: Queue_t * const pxQueue = xQueue;
      0007A0 A8*00            [24] 2356 	mov	r0,_bp
      0007A2 08               [12] 2357 	inc	r0
      0007A3 A6 02            [24] 2358 	mov	@r0,ar2
      0007A5 08               [12] 2359 	inc	r0
      0007A6 A6 03            [24] 2360 	mov	@r0,ar3
      0007A8 08               [12] 2361 	inc	r0
      0007A9 A6 04            [24] 2362 	mov	@r0,ar4
                           0007AB  2363 	C$queue.c$1053$2_0$226 ==.
                                   2364 ;	queue.c:1053: if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
      0007AB 74 24            [12] 2365 	mov	a,#0x24
      0007AD 2A               [12] 2366 	add	a,r2
      0007AE FD               [12] 2367 	mov	r5,a
      0007AF 74 00            [12] 2368 	mov	a,#0x00
      0007B1 3B               [12] 2369 	addc	a,r3
      0007B2 FE               [12] 2370 	mov	r6,a
      0007B3 8C 07            [24] 2371 	mov	ar7,r4
      0007B5 8D 82            [24] 2372 	mov	dpl,r5
      0007B7 8E 83            [24] 2373 	mov	dph,r6
      0007B9 8F F0            [24] 2374 	mov	b,r7
      0007BB 12r00r00         [24] 2375 	lcall	__gptrget
      0007BE FD               [12] 2376 	mov	r5,a
      0007BF 74 25            [12] 2377 	mov	a,#0x25
      0007C1 2A               [12] 2378 	add	a,r2
      0007C2 FC               [12] 2379 	mov	r4,a
      0007C3 74 00            [12] 2380 	mov	a,#0x00
      0007C5 3B               [12] 2381 	addc	a,r3
      0007C6 FE               [12] 2382 	mov	r6,a
      0007C7 8C 07            [24] 2383 	mov	ar7,r4
      0007C9 8C 82            [24] 2384 	mov	dpl,r4
      0007CB 8E 83            [24] 2385 	mov	dph,r6
      0007CD 8F F0            [24] 2386 	mov	b,r7
      0007CF 12r00r00         [24] 2387 	lcall	__gptrget
      0007D2 FC               [12] 2388 	mov	r4,a
      0007D3 C3               [12] 2389 	clr	c
      0007D4 ED               [12] 2390 	mov	a,r5
      0007D5 9C               [12] 2391 	subb	a,r4
      0007D6 50 03            [24] 2392 	jnc	00138$
      0007D8 02r07rE8         [24] 2393 	ljmp	00110$
      0007DB                       2394 00138$:
      0007DB E5*00            [12] 2395 	mov	a,_bp
      0007DD 24 F7            [12] 2396 	add	a,#0xf7
      0007DF F8               [12] 2397 	mov	r0,a
      0007E0 B6 02 02         [24] 2398 	cjne	@r0,#0x02,00139$
      0007E3 80 03            [24] 2399 	sjmp	00140$
      0007E5                       2400 00139$:
      0007E5 02r08rD4         [24] 2401 	ljmp	00111$
      0007E8                       2402 00140$:
      0007E8                       2403 00110$:
                           0007E8  2404 	C$queue.c$1055$3_0$227 ==.
                                   2405 ;	queue.c:1055: const int8_t cTxLock = pxQueue->cTxLock;
      0007E8 A8*00            [24] 2406 	mov	r0,_bp
      0007EA 08               [12] 2407 	inc	r0
      0007EB 74 28            [12] 2408 	mov	a,#0x28
      0007ED 26               [12] 2409 	add	a,@r0
      0007EE FD               [12] 2410 	mov	r5,a
      0007EF 74 00            [12] 2411 	mov	a,#0x00
      0007F1 08               [12] 2412 	inc	r0
      0007F2 36               [12] 2413 	addc	a,@r0
      0007F3 FE               [12] 2414 	mov	r6,a
      0007F4 08               [12] 2415 	inc	r0
      0007F5 86 07            [24] 2416 	mov	ar7,@r0
      0007F7 8D 82            [24] 2417 	mov	dpl,r5
      0007F9 8E 83            [24] 2418 	mov	dph,r6
      0007FB 8F F0            [24] 2419 	mov	b,r7
      0007FD 12r00r00         [24] 2420 	lcall	__gptrget
      000800 FF               [12] 2421 	mov	r7,a
                           000801  2422 	C$queue.c$1056$3_0$227 ==.
                                   2423 ;	queue.c:1056: const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
      000801 A8*00            [24] 2424 	mov	r0,_bp
      000803 08               [12] 2425 	inc	r0
      000804 74 24            [12] 2426 	mov	a,#0x24
      000806 26               [12] 2427 	add	a,@r0
      000807 FC               [12] 2428 	mov	r4,a
      000808 74 00            [12] 2429 	mov	a,#0x00
      00080A 08               [12] 2430 	inc	r0
      00080B 36               [12] 2431 	addc	a,@r0
      00080C FD               [12] 2432 	mov	r5,a
      00080D 08               [12] 2433 	inc	r0
      00080E 86 06            [24] 2434 	mov	ar6,@r0
      000810 8C 82            [24] 2435 	mov	dpl,r4
      000812 8D 83            [24] 2436 	mov	dph,r5
      000814 8E F0            [24] 2437 	mov	b,r6
      000816 12r00r00         [24] 2438 	lcall	__gptrget
                           000819  2439 	C$queue.c$1065$3_0$227 ==.
                                   2440 ;	queue.c:1065: ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
      000819 C0 07            [24] 2441 	push	ar7
      00081B E5*00            [12] 2442 	mov	a,_bp
      00081D 24 F7            [12] 2443 	add	a,#0xf7
      00081F F8               [12] 2444 	mov	r0,a
      000820 E6               [12] 2445 	mov	a,@r0
      000821 C0 E0            [24] 2446 	push	acc
      000823 E5*00            [12] 2447 	mov	a,_bp
      000825 24 FB            [12] 2448 	add	a,#0xfb
      000827 F8               [12] 2449 	mov	r0,a
      000828 E6               [12] 2450 	mov	a,@r0
      000829 C0 E0            [24] 2451 	push	acc
      00082B 08               [12] 2452 	inc	r0
      00082C E6               [12] 2453 	mov	a,@r0
      00082D C0 E0            [24] 2454 	push	acc
      00082F 08               [12] 2455 	inc	r0
      000830 E6               [12] 2456 	mov	a,@r0
      000831 C0 E0            [24] 2457 	push	acc
      000833 A8*00            [24] 2458 	mov	r0,_bp
      000835 08               [12] 2459 	inc	r0
      000836 86 82            [24] 2460 	mov	dpl,@r0
      000838 08               [12] 2461 	inc	r0
      000839 86 83            [24] 2462 	mov	dph,@r0
      00083B 08               [12] 2463 	inc	r0
      00083C 86 F0            [24] 2464 	mov	b,@r0
      00083E 12r14rD3         [24] 2465 	lcall	_prvCopyDataToQueue
      000841 E5 81            [12] 2466 	mov	a,sp
      000843 24 FC            [12] 2467 	add	a,#0xfc
      000845 F5 81            [12] 2468 	mov	sp,a
      000847 D0 07            [24] 2469 	pop	ar7
                           000849  2470 	C$queue.c$1069$3_0$227 ==.
                                   2471 ;	queue.c:1069: if( cTxLock == queueUNLOCKED )
      000849 BF FF 02         [24] 2472 	cjne	r7,#0xff,00141$
      00084C 80 03            [24] 2473 	sjmp	00142$
      00084E                       2474 00141$:
      00084E 02r08rB5         [24] 2475 	ljmp	00108$
      000851                       2476 00142$:
                           000851  2477 	C$queue.c$1131$5_0$229 ==.
                                   2478 ;	queue.c:1131: if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
      000851 A8*00            [24] 2479 	mov	r0,_bp
      000853 08               [12] 2480 	inc	r0
      000854 74 18            [12] 2481 	mov	a,#0x18
      000856 26               [12] 2482 	add	a,@r0
      000857 FC               [12] 2483 	mov	r4,a
      000858 74 00            [12] 2484 	mov	a,#0x00
      00085A 08               [12] 2485 	inc	r0
      00085B 36               [12] 2486 	addc	a,@r0
      00085C FD               [12] 2487 	mov	r5,a
      00085D 08               [12] 2488 	inc	r0
      00085E 86 06            [24] 2489 	mov	ar6,@r0
      000860 8C 82            [24] 2490 	mov	dpl,r4
      000862 8D 83            [24] 2491 	mov	dph,r5
      000864 8E F0            [24] 2492 	mov	b,r6
      000866 12r00r00         [24] 2493 	lcall	__gptrget
      000869 70 03            [24] 2494 	jnz	00143$
      00086B 02r08rCF         [24] 2495 	ljmp	00109$
      00086E                       2496 00143$:
                           00086E  2497 	C$queue.c$1133$6_0$230 ==.
                                   2498 ;	queue.c:1133: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
      00086E A8*00            [24] 2499 	mov	r0,_bp
      000870 08               [12] 2500 	inc	r0
      000871 74 18            [12] 2501 	mov	a,#0x18
      000873 26               [12] 2502 	add	a,@r0
      000874 FC               [12] 2503 	mov	r4,a
      000875 74 00            [12] 2504 	mov	a,#0x00
      000877 08               [12] 2505 	inc	r0
      000878 36               [12] 2506 	addc	a,@r0
      000879 FD               [12] 2507 	mov	r5,a
      00087A 08               [12] 2508 	inc	r0
      00087B 86 06            [24] 2509 	mov	ar6,@r0
      00087D 8C 82            [24] 2510 	mov	dpl,r4
      00087F 8D 83            [24] 2511 	mov	dph,r5
      000881 8E F0            [24] 2512 	mov	b,r6
      000883 12r00r00         [24] 2513 	lcall	_xTaskRemoveFromEventList
      000886 E5 82            [12] 2514 	mov	a,dpl
      000888 70 03            [24] 2515 	jnz	00144$
      00088A 02r08rCF         [24] 2516 	ljmp	00109$
      00088D                       2517 00144$:
                           00088D  2518 	C$queue.c$1137$7_0$231 ==.
                                   2519 ;	queue.c:1137: if( pxHigherPriorityTaskWoken != NULL )
      00088D E5*00            [12] 2520 	mov	a,_bp
      00088F 24 F8            [12] 2521 	add	a,#0xf8
      000891 F8               [12] 2522 	mov	r0,a
      000892 E6               [12] 2523 	mov	a,@r0
      000893 08               [12] 2524 	inc	r0
      000894 46               [12] 2525 	orl	a,@r0
      000895 70 03            [24] 2526 	jnz	00145$
      000897 02r08rCF         [24] 2527 	ljmp	00109$
      00089A                       2528 00145$:
                           00089A  2529 	C$queue.c$1139$8_0$232 ==.
                                   2530 ;	queue.c:1139: *pxHigherPriorityTaskWoken = pdTRUE;
      00089A E5*00            [12] 2531 	mov	a,_bp
      00089C 24 F8            [12] 2532 	add	a,#0xf8
      00089E F8               [12] 2533 	mov	r0,a
      00089F 86 04            [24] 2534 	mov	ar4,@r0
      0008A1 08               [12] 2535 	inc	r0
      0008A2 86 05            [24] 2536 	mov	ar5,@r0
      0008A4 08               [12] 2537 	inc	r0
      0008A5 86 06            [24] 2538 	mov	ar6,@r0
      0008A7 8C 82            [24] 2539 	mov	dpl,r4
      0008A9 8D 83            [24] 2540 	mov	dph,r5
      0008AB 8E F0            [24] 2541 	mov	b,r6
      0008AD 74 01            [12] 2542 	mov	a,#0x01
      0008AF 12r00r00         [24] 2543 	lcall	__gptrput
                           0008B2  2544 	C$queue.c$1157$3_0$227 ==.
                                   2545 ;	queue.c:1157: ( void ) uxPreviousMessagesWaiting;
      0008B2 02r08rCF         [24] 2546 	ljmp	00109$
      0008B5                       2547 00108$:
                           0008B5  2548 	C$queue.c$1167$4_0$236 ==.
                                   2549 ;	queue.c:1167: pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
      0008B5 A8*00            [24] 2550 	mov	r0,_bp
      0008B7 08               [12] 2551 	inc	r0
      0008B8 74 28            [12] 2552 	mov	a,#0x28
      0008BA 26               [12] 2553 	add	a,@r0
      0008BB FC               [12] 2554 	mov	r4,a
      0008BC 74 00            [12] 2555 	mov	a,#0x00
      0008BE 08               [12] 2556 	inc	r0
      0008BF 36               [12] 2557 	addc	a,@r0
      0008C0 FD               [12] 2558 	mov	r5,a
      0008C1 08               [12] 2559 	inc	r0
      0008C2 86 06            [24] 2560 	mov	ar6,@r0
      0008C4 0F               [12] 2561 	inc	r7
      0008C5 8C 82            [24] 2562 	mov	dpl,r4
      0008C7 8D 83            [24] 2563 	mov	dph,r5
      0008C9 8E F0            [24] 2564 	mov	b,r6
      0008CB EF               [12] 2565 	mov	a,r7
      0008CC 12r00r00         [24] 2566 	lcall	__gptrput
      0008CF                       2567 00109$:
                           0008CF  2568 	C$queue.c$1170$3_0$227 ==.
                                   2569 ;	queue.c:1170: xReturn = pdPASS;
      0008CF 7F 01            [12] 2570 	mov	r7,#0x01
      0008D1 02r08rD6         [24] 2571 	ljmp	00112$
      0008D4                       2572 00111$:
                           0008D4  2573 	C$queue.c$1175$3_0$237 ==.
                                   2574 ;	queue.c:1175: xReturn = errQUEUE_FULL;
      0008D4 7F 00            [12] 2575 	mov	r7,#0x00
      0008D6                       2576 00112$:
                           0008D6  2577 	C$queue.c$1180$1_0$225 ==.
                                   2578 ;	queue.c:1180: return xReturn;
      0008D6 8F 82            [24] 2579 	mov	dpl,r7
      0008D8                       2580 00114$:
                           0008D8  2581 	C$queue.c$1181$1_0$225 ==.
                                   2582 ;	queue.c:1181: }
      0008D8 85*00 81         [24] 2583 	mov	sp,_bp
      0008DB D0*00            [24] 2584 	pop	_bp
                           0008DD  2585 	C$queue.c$1181$1_0$225 ==.
                           0008DD  2586 	XG$xQueueGenericSendFromISR$0$0 ==.
      0008DD 22               [24] 2587 	ret
                                   2588 ;------------------------------------------------------------
                                   2589 ;Allocation info for local variables in function 'xQueueGiveFromISR'
                                   2590 ;------------------------------------------------------------
                                   2591 ;pxHigherPriorityTaskWoken Allocated to stack - _bp -5
                                   2592 ;xQueue                    Allocated to stack - _bp +1
                                   2593 ;xReturn                   Allocated to registers r7 
                                   2594 ;uxSavedInterruptStatus    Allocated to registers 
                                   2595 ;pxQueue                   Allocated to registers 
                                   2596 ;uxMessagesWaiting         Allocated to stack - _bp +7
                                   2597 ;cTxLock                   Allocated to registers r7 
                                   2598 ;sloc0                     Allocated to stack - _bp +4
                                   2599 ;------------------------------------------------------------
                           0008DE  2600 	G$xQueueGiveFromISR$0$0 ==.
                           0008DE  2601 	C$queue.c$1184$1_0$239 ==.
                                   2602 ;	queue.c:1184: BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                                   2603 ;	-----------------------------------------
                                   2604 ;	 function xQueueGiveFromISR
                                   2605 ;	-----------------------------------------
      0008DE                       2606 _xQueueGiveFromISR:
      0008DE C0*00            [24] 2607 	push	_bp
      0008E0 85 81*00         [24] 2608 	mov	_bp,sp
      0008E3 C0 82            [24] 2609 	push	dpl
      0008E5 C0 83            [24] 2610 	push	dph
      0008E7 C0 F0            [24] 2611 	push	b
      0008E9 E5 81            [12] 2612 	mov	a,sp
      0008EB 24 04            [12] 2613 	add	a,#0x04
      0008ED F5 81            [12] 2614 	mov	sp,a
                           0008EF  2615 	C$queue.c$1226$2_0$240 ==.
                                   2616 ;	queue.c:1226: const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
      0008EF A8*00            [24] 2617 	mov	r0,_bp
      0008F1 08               [12] 2618 	inc	r0
      0008F2 74 24            [12] 2619 	mov	a,#0x24
      0008F4 26               [12] 2620 	add	a,@r0
      0008F5 FA               [12] 2621 	mov	r2,a
      0008F6 74 00            [12] 2622 	mov	a,#0x00
      0008F8 08               [12] 2623 	inc	r0
      0008F9 36               [12] 2624 	addc	a,@r0
      0008FA FB               [12] 2625 	mov	r3,a
      0008FB 08               [12] 2626 	inc	r0
      0008FC 86 04            [24] 2627 	mov	ar4,@r0
      0008FE 8A 82            [24] 2628 	mov	dpl,r2
      000900 8B 83            [24] 2629 	mov	dph,r3
      000902 8C F0            [24] 2630 	mov	b,r4
      000904 E5*00            [12] 2631 	mov	a,_bp
      000906 24 07            [12] 2632 	add	a,#0x07
      000908 F8               [12] 2633 	mov	r0,a
      000909 12r00r00         [24] 2634 	lcall	__gptrget
      00090C F6               [12] 2635 	mov	@r0,a
                           00090D  2636 	C$queue.c$1231$2_0$240 ==.
                                   2637 ;	queue.c:1231: if( uxMessagesWaiting < pxQueue->uxLength )
      00090D A8*00            [24] 2638 	mov	r0,_bp
      00090F 08               [12] 2639 	inc	r0
      000910 74 25            [12] 2640 	mov	a,#0x25
      000912 26               [12] 2641 	add	a,@r0
      000913 FD               [12] 2642 	mov	r5,a
      000914 74 00            [12] 2643 	mov	a,#0x00
      000916 08               [12] 2644 	inc	r0
      000917 36               [12] 2645 	addc	a,@r0
      000918 FE               [12] 2646 	mov	r6,a
      000919 08               [12] 2647 	inc	r0
      00091A 86 07            [24] 2648 	mov	ar7,@r0
      00091C 8D 82            [24] 2649 	mov	dpl,r5
      00091E 8E 83            [24] 2650 	mov	dph,r6
      000920 8F F0            [24] 2651 	mov	b,r7
      000922 12r00r00         [24] 2652 	lcall	__gptrget
      000925 FD               [12] 2653 	mov	r5,a
      000926 E5*00            [12] 2654 	mov	a,_bp
      000928 24 07            [12] 2655 	add	a,#0x07
      00092A F8               [12] 2656 	mov	r0,a
      00092B C3               [12] 2657 	clr	c
      00092C E6               [12] 2658 	mov	a,@r0
      00092D 9D               [12] 2659 	subb	a,r5
      00092E 40 03            [24] 2660 	jc	00137$
      000930 02r09rEF         [24] 2661 	ljmp	00111$
      000933                       2662 00137$:
                           000933  2663 	C$queue.c$1233$3_0$241 ==.
                                   2664 ;	queue.c:1233: const int8_t cTxLock = pxQueue->cTxLock;
      000933 A8*00            [24] 2665 	mov	r0,_bp
      000935 08               [12] 2666 	inc	r0
      000936 E5*00            [12] 2667 	mov	a,_bp
      000938 24 04            [12] 2668 	add	a,#0x04
      00093A F9               [12] 2669 	mov	r1,a
      00093B 74 28            [12] 2670 	mov	a,#0x28
      00093D 26               [12] 2671 	add	a,@r0
      00093E F7               [12] 2672 	mov	@r1,a
      00093F 74 00            [12] 2673 	mov	a,#0x00
      000941 08               [12] 2674 	inc	r0
      000942 36               [12] 2675 	addc	a,@r0
      000943 09               [12] 2676 	inc	r1
      000944 F7               [12] 2677 	mov	@r1,a
      000945 08               [12] 2678 	inc	r0
      000946 E6               [12] 2679 	mov	a,@r0
      000947 09               [12] 2680 	inc	r1
      000948 F7               [12] 2681 	mov	@r1,a
      000949 E5*00            [12] 2682 	mov	a,_bp
      00094B 24 04            [12] 2683 	add	a,#0x04
      00094D F8               [12] 2684 	mov	r0,a
      00094E 86 82            [24] 2685 	mov	dpl,@r0
      000950 08               [12] 2686 	inc	r0
      000951 86 83            [24] 2687 	mov	dph,@r0
      000953 08               [12] 2688 	inc	r0
      000954 86 F0            [24] 2689 	mov	b,@r0
      000956 12r00r00         [24] 2690 	lcall	__gptrget
      000959 FF               [12] 2691 	mov	r7,a
                           00095A  2692 	C$queue.c$1243$3_0$241 ==.
                                   2693 ;	queue.c:1243: pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
      00095A E5*00            [12] 2694 	mov	a,_bp
      00095C 24 07            [12] 2695 	add	a,#0x07
      00095E F8               [12] 2696 	mov	r0,a
      00095F E6               [12] 2697 	mov	a,@r0
      000960 04               [12] 2698 	inc	a
      000961 FE               [12] 2699 	mov	r6,a
      000962 8A 82            [24] 2700 	mov	dpl,r2
      000964 8B 83            [24] 2701 	mov	dph,r3
      000966 8C F0            [24] 2702 	mov	b,r4
      000968 EE               [12] 2703 	mov	a,r6
      000969 12r00r00         [24] 2704 	lcall	__gptrput
                           00096C  2705 	C$queue.c$1247$3_0$241 ==.
                                   2706 ;	queue.c:1247: if( cTxLock == queueUNLOCKED )
      00096C BF FF 02         [24] 2707 	cjne	r7,#0xff,00138$
      00096F 80 03            [24] 2708 	sjmp	00139$
      000971                       2709 00138$:
      000971 02r09rD8         [24] 2710 	ljmp	00108$
      000974                       2711 00139$:
                           000974  2712 	C$queue.c$1302$5_0$243 ==.
                                   2713 ;	queue.c:1302: if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
      000974 A8*00            [24] 2714 	mov	r0,_bp
      000976 08               [12] 2715 	inc	r0
      000977 74 18            [12] 2716 	mov	a,#0x18
      000979 26               [12] 2717 	add	a,@r0
      00097A FC               [12] 2718 	mov	r4,a
      00097B 74 00            [12] 2719 	mov	a,#0x00
      00097D 08               [12] 2720 	inc	r0
      00097E 36               [12] 2721 	addc	a,@r0
      00097F FD               [12] 2722 	mov	r5,a
      000980 08               [12] 2723 	inc	r0
      000981 86 06            [24] 2724 	mov	ar6,@r0
      000983 8C 82            [24] 2725 	mov	dpl,r4
      000985 8D 83            [24] 2726 	mov	dph,r5
      000987 8E F0            [24] 2727 	mov	b,r6
      000989 12r00r00         [24] 2728 	lcall	__gptrget
      00098C 70 03            [24] 2729 	jnz	00140$
      00098E 02r09rEA         [24] 2730 	ljmp	00109$
      000991                       2731 00140$:
                           000991  2732 	C$queue.c$1304$6_0$244 ==.
                                   2733 ;	queue.c:1304: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
      000991 A8*00            [24] 2734 	mov	r0,_bp
      000993 08               [12] 2735 	inc	r0
      000994 74 18            [12] 2736 	mov	a,#0x18
      000996 26               [12] 2737 	add	a,@r0
      000997 FC               [12] 2738 	mov	r4,a
      000998 74 00            [12] 2739 	mov	a,#0x00
      00099A 08               [12] 2740 	inc	r0
      00099B 36               [12] 2741 	addc	a,@r0
      00099C FD               [12] 2742 	mov	r5,a
      00099D 08               [12] 2743 	inc	r0
      00099E 86 06            [24] 2744 	mov	ar6,@r0
      0009A0 8C 82            [24] 2745 	mov	dpl,r4
      0009A2 8D 83            [24] 2746 	mov	dph,r5
      0009A4 8E F0            [24] 2747 	mov	b,r6
      0009A6 12r00r00         [24] 2748 	lcall	_xTaskRemoveFromEventList
      0009A9 E5 82            [12] 2749 	mov	a,dpl
      0009AB 70 03            [24] 2750 	jnz	00141$
      0009AD 02r09rEA         [24] 2751 	ljmp	00109$
      0009B0                       2752 00141$:
                           0009B0  2753 	C$queue.c$1308$7_0$245 ==.
                                   2754 ;	queue.c:1308: if( pxHigherPriorityTaskWoken != NULL )
      0009B0 E5*00            [12] 2755 	mov	a,_bp
      0009B2 24 FB            [12] 2756 	add	a,#0xfb
      0009B4 F8               [12] 2757 	mov	r0,a
      0009B5 E6               [12] 2758 	mov	a,@r0
      0009B6 08               [12] 2759 	inc	r0
      0009B7 46               [12] 2760 	orl	a,@r0
      0009B8 70 03            [24] 2761 	jnz	00142$
      0009BA 02r09rEA         [24] 2762 	ljmp	00109$
      0009BD                       2763 00142$:
                           0009BD  2764 	C$queue.c$1310$8_0$246 ==.
                                   2765 ;	queue.c:1310: *pxHigherPriorityTaskWoken = pdTRUE;
      0009BD E5*00            [12] 2766 	mov	a,_bp
      0009BF 24 FB            [12] 2767 	add	a,#0xfb
      0009C1 F8               [12] 2768 	mov	r0,a
      0009C2 86 04            [24] 2769 	mov	ar4,@r0
      0009C4 08               [12] 2770 	inc	r0
      0009C5 86 05            [24] 2771 	mov	ar5,@r0
      0009C7 08               [12] 2772 	inc	r0
      0009C8 86 06            [24] 2773 	mov	ar6,@r0
      0009CA 8C 82            [24] 2774 	mov	dpl,r4
      0009CC 8D 83            [24] 2775 	mov	dph,r5
      0009CE 8E F0            [24] 2776 	mov	b,r6
      0009D0 74 01            [12] 2777 	mov	a,#0x01
      0009D2 12r00r00         [24] 2778 	lcall	__gptrput
      0009D5 02r09rEA         [24] 2779 	ljmp	00109$
      0009D8                       2780 00108$:
                           0009D8  2781 	C$queue.c$1335$4_0$250 ==.
                                   2782 ;	queue.c:1335: pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
      0009D8 0F               [12] 2783 	inc	r7
      0009D9 E5*00            [12] 2784 	mov	a,_bp
      0009DB 24 04            [12] 2785 	add	a,#0x04
      0009DD F8               [12] 2786 	mov	r0,a
      0009DE 86 82            [24] 2787 	mov	dpl,@r0
      0009E0 08               [12] 2788 	inc	r0
      0009E1 86 83            [24] 2789 	mov	dph,@r0
      0009E3 08               [12] 2790 	inc	r0
      0009E4 86 F0            [24] 2791 	mov	b,@r0
      0009E6 EF               [12] 2792 	mov	a,r7
      0009E7 12r00r00         [24] 2793 	lcall	__gptrput
      0009EA                       2794 00109$:
                           0009EA  2795 	C$queue.c$1338$3_0$241 ==.
                                   2796 ;	queue.c:1338: xReturn = pdPASS;
      0009EA 7F 01            [12] 2797 	mov	r7,#0x01
      0009EC 02r09rF1         [24] 2798 	ljmp	00112$
      0009EF                       2799 00111$:
                           0009EF  2800 	C$queue.c$1343$3_0$251 ==.
                                   2801 ;	queue.c:1343: xReturn = errQUEUE_FULL;
      0009EF 7F 00            [12] 2802 	mov	r7,#0x00
      0009F1                       2803 00112$:
                           0009F1  2804 	C$queue.c$1348$1_0$239 ==.
                                   2805 ;	queue.c:1348: return xReturn;
      0009F1 8F 82            [24] 2806 	mov	dpl,r7
      0009F3                       2807 00113$:
                           0009F3  2808 	C$queue.c$1349$1_0$239 ==.
                                   2809 ;	queue.c:1349: }
      0009F3 85*00 81         [24] 2810 	mov	sp,_bp
      0009F6 D0*00            [24] 2811 	pop	_bp
                           0009F8  2812 	C$queue.c$1349$1_0$239 ==.
                           0009F8  2813 	XG$xQueueGiveFromISR$0$0 ==.
      0009F8 22               [24] 2814 	ret
                                   2815 ;------------------------------------------------------------
                                   2816 ;Allocation info for local variables in function 'xQueueReceive'
                                   2817 ;------------------------------------------------------------
                                   2818 ;pvBuffer                  Allocated to stack - _bp -5
                                   2819 ;xTicksToWait              Allocated to stack - _bp -7
                                   2820 ;xQueue                    Allocated to registers r4 r5 r7 
                                   2821 ;xEntryTimeSet             Allocated to stack - _bp +8
                                   2822 ;xTimeOut                  Allocated to stack - _bp +9
                                   2823 ;pxQueue                   Allocated to stack - _bp +5
                                   2824 ;uxMessagesWaiting         Allocated to registers r5 
                                   2825 ;sloc0                     Allocated to stack - _bp +1
                                   2826 ;sloc1                     Allocated to stack - _bp +15
                                   2827 ;sloc2                     Allocated to stack - _bp +4
                                   2828 ;------------------------------------------------------------
                           0009F9  2829 	G$xQueueReceive$0$0 ==.
                           0009F9  2830 	C$queue.c$1352$1_0$253 ==.
                                   2831 ;	queue.c:1352: BaseType_t xQueueReceive( QueueHandle_t xQueue,
                                   2832 ;	-----------------------------------------
                                   2833 ;	 function xQueueReceive
                                   2834 ;	-----------------------------------------
      0009F9                       2835 _xQueueReceive:
      0009F9 C0*00            [24] 2836 	push	_bp
      0009FB 85 81*00         [24] 2837 	mov	_bp,sp
      0009FE E5 81            [12] 2838 	mov	a,sp
      000A00 24 0B            [12] 2839 	add	a,#0x0b
      000A02 F5 81            [12] 2840 	mov	sp,a
      000A04 AC 82            [24] 2841 	mov	r4,dpl
      000A06 AD 83            [24] 2842 	mov	r5,dph
      000A08 AF F0            [24] 2843 	mov	r7,b
                           000A0A  2844 	C$queue.c$1356$2_0$253 ==.
                                   2845 ;	queue.c:1356: BaseType_t xEntryTimeSet = pdFALSE;
      000A0A E5*00            [12] 2846 	mov	a,_bp
      000A0C 24 08            [12] 2847 	add	a,#0x08
      000A0E F8               [12] 2848 	mov	r0,a
      000A0F 76 00            [12] 2849 	mov	@r0,#0x00
                           000A11  2850 	C$queue.c$1358$2_0$253 ==.
                                   2851 ;	queue.c:1358: Queue_t * const pxQueue = xQueue;
      000A11 E5*00            [12] 2852 	mov	a,_bp
      000A13 24 05            [12] 2853 	add	a,#0x05
      000A15 F8               [12] 2854 	mov	r0,a
      000A16 A6 04            [24] 2855 	mov	@r0,ar4
      000A18 08               [12] 2856 	inc	r0
      000A19 A6 05            [24] 2857 	mov	@r0,ar5
      000A1B 08               [12] 2858 	inc	r0
      000A1C A6 07            [24] 2859 	mov	@r0,ar7
                           000A1E  2860 	C$queue.c$1365$6_0$264 ==.
                                   2861 ;	queue.c:1365: configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
      000A1E E5*00            [12] 2862 	mov	a,_bp
      000A20 24 09            [12] 2863 	add	a,#0x09
      000A22 FE               [12] 2864 	mov	r6,a
      000A23 E5*00            [12] 2865 	mov	a,_bp
      000A25 24 04            [12] 2866 	add	a,#0x04
      000A27 F8               [12] 2867 	mov	r0,a
      000A28 A6 06            [24] 2868 	mov	@r0,ar6
      000A2A A8*00            [24] 2869 	mov	r0,_bp
      000A2C 08               [12] 2870 	inc	r0
      000A2D 74 24            [12] 2871 	mov	a,#0x24
      000A2F 2C               [12] 2872 	add	a,r4
      000A30 F6               [12] 2873 	mov	@r0,a
      000A31 74 00            [12] 2874 	mov	a,#0x00
      000A33 3D               [12] 2875 	addc	a,r5
      000A34 08               [12] 2876 	inc	r0
      000A35 F6               [12] 2877 	mov	@r0,a
      000A36 08               [12] 2878 	inc	r0
      000A37 A6 07            [24] 2879 	mov	@r0,ar7
      000A39                       2880 00128$:
                           000A39  2881 	C$queue.c$1379$3_0$255 ==.
                                   2882 ;	queue.c:1379: taskENTER_CRITICAL();
      000A39 C0 E0            [24] 2883 	push ACC 
      000A3B C0 A8            [24] 2884 	push IE 
                                   2885 ;	assignBit
      000A3D C2 AF            [12] 2886 	clr	_EA
                           000A3F  2887 	C$queue.c$1381$4_0$256 ==.
                                   2888 ;	queue.c:1381: const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
      000A3F A8*00            [24] 2889 	mov	r0,_bp
      000A41 08               [12] 2890 	inc	r0
      000A42 86 82            [24] 2891 	mov	dpl,@r0
      000A44 08               [12] 2892 	inc	r0
      000A45 86 83            [24] 2893 	mov	dph,@r0
      000A47 08               [12] 2894 	inc	r0
      000A48 86 F0            [24] 2895 	mov	b,@r0
      000A4A 12r00r00         [24] 2896 	lcall	__gptrget
      000A4D FC               [12] 2897 	mov	r4,a
      000A4E 8C 05            [24] 2898 	mov	ar5,r4
                           000A50  2899 	C$queue.c$1385$4_0$256 ==.
                                   2900 ;	queue.c:1385: if( uxMessagesWaiting > ( UBaseType_t ) 0 )
      000A50 EC               [12] 2901 	mov	a,r4
      000A51 70 03            [24] 2902 	jnz	00178$
      000A53 02r0ArE8         [24] 2903 	ljmp	00111$
      000A56                       2904 00178$:
                           000A56  2905 	C$queue.c$1388$5_0$257 ==.
                                   2906 ;	queue.c:1388: prvCopyDataFromQueue( pxQueue, pvBuffer );
      000A56 C0 05            [24] 2907 	push	ar5
      000A58 E5*00            [12] 2908 	mov	a,_bp
      000A5A 24 FB            [12] 2909 	add	a,#0xfb
      000A5C F8               [12] 2910 	mov	r0,a
      000A5D E6               [12] 2911 	mov	a,@r0
      000A5E C0 E0            [24] 2912 	push	acc
      000A60 08               [12] 2913 	inc	r0
      000A61 E6               [12] 2914 	mov	a,@r0
      000A62 C0 E0            [24] 2915 	push	acc
      000A64 08               [12] 2916 	inc	r0
      000A65 E6               [12] 2917 	mov	a,@r0
      000A66 C0 E0            [24] 2918 	push	acc
      000A68 E5*00            [12] 2919 	mov	a,_bp
      000A6A 24 05            [12] 2920 	add	a,#0x05
      000A6C F8               [12] 2921 	mov	r0,a
      000A6D 86 82            [24] 2922 	mov	dpl,@r0
      000A6F 08               [12] 2923 	inc	r0
      000A70 86 83            [24] 2924 	mov	dph,@r0
      000A72 08               [12] 2925 	inc	r0
      000A73 86 F0            [24] 2926 	mov	b,@r0
      000A75 12r18r2D         [24] 2927 	lcall	_prvCopyDataFromQueue
      000A78 15 81            [12] 2928 	dec	sp
      000A7A 15 81            [12] 2929 	dec	sp
      000A7C 15 81            [12] 2930 	dec	sp
      000A7E D0 05            [24] 2931 	pop	ar5
                           000A80  2932 	C$queue.c$1390$5_0$257 ==.
                                   2933 ;	queue.c:1390: pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
      000A80 E5*00            [12] 2934 	mov	a,_bp
      000A82 24 05            [12] 2935 	add	a,#0x05
      000A84 F8               [12] 2936 	mov	r0,a
      000A85 74 24            [12] 2937 	mov	a,#0x24
      000A87 26               [12] 2938 	add	a,@r0
      000A88 FB               [12] 2939 	mov	r3,a
      000A89 74 00            [12] 2940 	mov	a,#0x00
      000A8B 08               [12] 2941 	inc	r0
      000A8C 36               [12] 2942 	addc	a,@r0
      000A8D FC               [12] 2943 	mov	r4,a
      000A8E 08               [12] 2944 	inc	r0
      000A8F 86 07            [24] 2945 	mov	ar7,@r0
      000A91 ED               [12] 2946 	mov	a,r5
      000A92 14               [12] 2947 	dec	a
      000A93 FA               [12] 2948 	mov	r2,a
      000A94 8B 82            [24] 2949 	mov	dpl,r3
      000A96 8C 83            [24] 2950 	mov	dph,r4
      000A98 8F F0            [24] 2951 	mov	b,r7
      000A9A EA               [12] 2952 	mov	a,r2
      000A9B 12r00r00         [24] 2953 	lcall	__gptrput
                           000A9E  2954 	C$queue.c$1395$5_0$257 ==.
                                   2955 ;	queue.c:1395: if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
      000A9E E5*00            [12] 2956 	mov	a,_bp
      000AA0 24 05            [12] 2957 	add	a,#0x05
      000AA2 F8               [12] 2958 	mov	r0,a
      000AA3 74 0C            [12] 2959 	mov	a,#0x0c
      000AA5 26               [12] 2960 	add	a,@r0
      000AA6 FB               [12] 2961 	mov	r3,a
      000AA7 74 00            [12] 2962 	mov	a,#0x00
      000AA9 08               [12] 2963 	inc	r0
      000AAA 36               [12] 2964 	addc	a,@r0
      000AAB FC               [12] 2965 	mov	r4,a
      000AAC 08               [12] 2966 	inc	r0
      000AAD 86 07            [24] 2967 	mov	ar7,@r0
      000AAF 8B 82            [24] 2968 	mov	dpl,r3
      000AB1 8C 83            [24] 2969 	mov	dph,r4
      000AB3 8F F0            [24] 2970 	mov	b,r7
      000AB5 12r00r00         [24] 2971 	lcall	__gptrget
      000AB8 70 03            [24] 2972 	jnz	00179$
      000ABA 02r0ArD7         [24] 2973 	ljmp	00104$
      000ABD                       2974 00179$:
                           000ABD  2975 	C$queue.c$1397$6_0$258 ==.
                                   2976 ;	queue.c:1397: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
      000ABD E5*00            [12] 2977 	mov	a,_bp
      000ABF 24 05            [12] 2978 	add	a,#0x05
      000AC1 F8               [12] 2979 	mov	r0,a
      000AC2 74 0C            [12] 2980 	mov	a,#0x0c
      000AC4 26               [12] 2981 	add	a,@r0
      000AC5 FB               [12] 2982 	mov	r3,a
      000AC6 74 00            [12] 2983 	mov	a,#0x00
      000AC8 08               [12] 2984 	inc	r0
      000AC9 36               [12] 2985 	addc	a,@r0
      000ACA FC               [12] 2986 	mov	r4,a
      000ACB 08               [12] 2987 	inc	r0
      000ACC 86 07            [24] 2988 	mov	ar7,@r0
      000ACE 8B 82            [24] 2989 	mov	dpl,r3
      000AD0 8C 83            [24] 2990 	mov	dph,r4
      000AD2 8F F0            [24] 2991 	mov	b,r7
      000AD4 12r00r00         [24] 2992 	lcall	_xTaskRemoveFromEventList
      000AD7                       2993 00104$:
                           000AD7  2994 	C$queue.c$1411$5_0$257 ==.
                                   2995 ;	queue.c:1411: taskEXIT_CRITICAL();
      000AD7 D0 E0            [24] 2996 	pop ACC 
      000AD9 53 E0 80         [24] 2997 	anl	_ACC,#0x80
      000ADC E5 E0            [12] 2998 	mov	a,_ACC
      000ADE 42 A8            [12] 2999 	orl	_IE,a
      000AE0 D0 E0            [24] 3000 	pop ACC 
                           000AE2  3001 	C$queue.c$1412$5_0$257 ==.
                                   3002 ;	queue.c:1412: return pdPASS;
      000AE2 75 82 01         [24] 3003 	mov	dpl,#0x01
      000AE5 02r0CrAF         [24] 3004 	ljmp	00130$
      000AE8                       3005 00111$:
                           000AE8  3006 	C$queue.c$1416$5_0$262 ==.
                                   3007 ;	queue.c:1416: if( xTicksToWait == ( TickType_t ) 0 )
      000AE8 E5*00            [12] 3008 	mov	a,_bp
      000AEA 24 F9            [12] 3009 	add	a,#0xf9
      000AEC F8               [12] 3010 	mov	r0,a
      000AED E6               [12] 3011 	mov	a,@r0
      000AEE 08               [12] 3012 	inc	r0
      000AEF 46               [12] 3013 	orl	a,@r0
      000AF0 60 03            [24] 3014 	jz	00180$
      000AF2 02r0Br06         [24] 3015 	ljmp	00108$
      000AF5                       3016 00180$:
                           000AF5  3017 	C$queue.c$1420$6_0$263 ==.
                                   3018 ;	queue.c:1420: taskEXIT_CRITICAL();
      000AF5 D0 E0            [24] 3019 	pop ACC 
      000AF7 53 E0 80         [24] 3020 	anl	_ACC,#0x80
      000AFA E5 E0            [12] 3021 	mov	a,_ACC
      000AFC 42 A8            [12] 3022 	orl	_IE,a
      000AFE D0 E0            [24] 3023 	pop ACC 
                           000B00  3024 	C$queue.c$1422$6_0$263 ==.
                                   3025 ;	queue.c:1422: return errQUEUE_EMPTY;
      000B00 75 82 00         [24] 3026 	mov	dpl,#0x00
      000B03 02r0CrAF         [24] 3027 	ljmp	00130$
      000B06                       3028 00108$:
                           000B06  3029 	C$queue.c$1424$5_0$262 ==.
                                   3030 ;	queue.c:1424: else if( xEntryTimeSet == pdFALSE )
      000B06 E5*00            [12] 3031 	mov	a,_bp
      000B08 24 08            [12] 3032 	add	a,#0x08
      000B0A F8               [12] 3033 	mov	r0,a
      000B0B E6               [12] 3034 	mov	a,@r0
      000B0C 60 03            [24] 3035 	jz	00181$
      000B0E 02r0Br2B         [24] 3036 	ljmp	00112$
      000B11                       3037 00181$:
                           000B11  3038 	C$queue.c$1428$6_0$264 ==.
                                   3039 ;	queue.c:1428: vTaskInternalSetTimeOutState( &xTimeOut );
      000B11 8E 03            [24] 3040 	mov	ar3,r6
      000B13 7C 00            [12] 3041 	mov	r4,#0x00
      000B15 7F 40            [12] 3042 	mov	r7,#0x40
      000B17 8B 82            [24] 3043 	mov	dpl,r3
      000B19 8C 83            [24] 3044 	mov	dph,r4
      000B1B 8F F0            [24] 3045 	mov	b,r7
      000B1D C0 06            [24] 3046 	push	ar6
      000B1F 12r00r00         [24] 3047 	lcall	_vTaskInternalSetTimeOutState
      000B22 D0 06            [24] 3048 	pop	ar6
                           000B24  3049 	C$queue.c$1429$6_0$264 ==.
                                   3050 ;	queue.c:1429: xEntryTimeSet = pdTRUE;
      000B24 E5*00            [12] 3051 	mov	a,_bp
      000B26 24 08            [12] 3052 	add	a,#0x08
      000B28 F8               [12] 3053 	mov	r0,a
      000B29 76 01            [12] 3054 	mov	@r0,#0x01
      000B2B                       3055 00112$:
                           000B2B  3056 	C$queue.c$1438$3_0$255 ==.
                                   3057 ;	queue.c:1438: taskEXIT_CRITICAL();
      000B2B D0 E0            [24] 3058 	pop ACC 
      000B2D 53 E0 80         [24] 3059 	anl	_ACC,#0x80
      000B30 E5 E0            [12] 3060 	mov	a,_ACC
      000B32 42 A8            [12] 3061 	orl	_IE,a
      000B34 D0 E0            [24] 3062 	pop ACC 
                           000B36  3063 	C$queue.c$1443$3_0$255 ==.
                                   3064 ;	queue.c:1443: vTaskSuspendAll();
      000B36 C0 06            [24] 3065 	push	ar6
      000B38 12r00r00         [24] 3066 	lcall	_vTaskSuspendAll
      000B3B D0 06            [24] 3067 	pop	ar6
                           000B3D  3068 	C$queue.c$1444$3_0$255 ==.
                                   3069 ;	queue.c:1444: prvLockQueue( pxQueue );
      000B3D C0 E0            [24] 3070 	push ACC 
      000B3F C0 A8            [24] 3071 	push IE 
                                   3072 ;	assignBit
      000B41 C2 AF            [12] 3073 	clr	_EA
      000B43 E5*00            [12] 3074 	mov	a,_bp
      000B45 24 05            [12] 3075 	add	a,#0x05
      000B47 F8               [12] 3076 	mov	r0,a
      000B48 74 27            [12] 3077 	mov	a,#0x27
      000B4A 26               [12] 3078 	add	a,@r0
      000B4B FB               [12] 3079 	mov	r3,a
      000B4C 74 00            [12] 3080 	mov	a,#0x00
      000B4E 08               [12] 3081 	inc	r0
      000B4F 36               [12] 3082 	addc	a,@r0
      000B50 FC               [12] 3083 	mov	r4,a
      000B51 08               [12] 3084 	inc	r0
      000B52 86 07            [24] 3085 	mov	ar7,@r0
      000B54 8B 82            [24] 3086 	mov	dpl,r3
      000B56 8C 83            [24] 3087 	mov	dph,r4
      000B58 8F F0            [24] 3088 	mov	b,r7
      000B5A 12r00r00         [24] 3089 	lcall	__gptrget
      000B5D FA               [12] 3090 	mov	r2,a
      000B5E BA FF 02         [24] 3091 	cjne	r2,#0xff,00182$
      000B61 80 03            [24] 3092 	sjmp	00183$
      000B63                       3093 00182$:
      000B63 02r0Br71         [24] 3094 	ljmp	00114$
      000B66                       3095 00183$:
      000B66 8B 82            [24] 3096 	mov	dpl,r3
      000B68 8C 83            [24] 3097 	mov	dph,r4
      000B6A 8F F0            [24] 3098 	mov	b,r7
      000B6C 74 00            [12] 3099 	mov	a,#0x00
      000B6E 12r00r00         [24] 3100 	lcall	__gptrput
      000B71                       3101 00114$:
      000B71 E5*00            [12] 3102 	mov	a,_bp
      000B73 24 05            [12] 3103 	add	a,#0x05
      000B75 F8               [12] 3104 	mov	r0,a
      000B76 74 28            [12] 3105 	mov	a,#0x28
      000B78 26               [12] 3106 	add	a,@r0
      000B79 FB               [12] 3107 	mov	r3,a
      000B7A 74 00            [12] 3108 	mov	a,#0x00
      000B7C 08               [12] 3109 	inc	r0
      000B7D 36               [12] 3110 	addc	a,@r0
      000B7E FC               [12] 3111 	mov	r4,a
      000B7F 08               [12] 3112 	inc	r0
      000B80 86 07            [24] 3113 	mov	ar7,@r0
      000B82 8B 82            [24] 3114 	mov	dpl,r3
      000B84 8C 83            [24] 3115 	mov	dph,r4
      000B86 8F F0            [24] 3116 	mov	b,r7
      000B88 12r00r00         [24] 3117 	lcall	__gptrget
      000B8B FA               [12] 3118 	mov	r2,a
      000B8C BA FF 02         [24] 3119 	cjne	r2,#0xff,00184$
      000B8F 80 03            [24] 3120 	sjmp	00185$
      000B91                       3121 00184$:
      000B91 02r0Br9F         [24] 3122 	ljmp	00116$
      000B94                       3123 00185$:
      000B94 8B 82            [24] 3124 	mov	dpl,r3
      000B96 8C 83            [24] 3125 	mov	dph,r4
      000B98 8F F0            [24] 3126 	mov	b,r7
      000B9A 74 00            [12] 3127 	mov	a,#0x00
      000B9C 12r00r00         [24] 3128 	lcall	__gptrput
      000B9F                       3129 00116$:
      000B9F C0 06            [24] 3130 	push	ar6
      000BA1 D0 E0            [24] 3131 	pop ACC 
      000BA3 53 E0 80         [24] 3132 	anl	_ACC,#0x80
      000BA6 E5 E0            [12] 3133 	mov	a,_ACC
      000BA8 42 A8            [12] 3134 	orl	_IE,a
      000BAA D0 E0            [24] 3135 	pop ACC 
                           000BAC  3136 	C$queue.c$1447$3_0$255 ==.
                                   3137 ;	queue.c:1447: if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
      000BAC E5*00            [12] 3138 	mov	a,_bp
      000BAE 24 F9            [12] 3139 	add	a,#0xf9
      000BB0 FF               [12] 3140 	mov	r7,a
      000BB1 7C 00            [12] 3141 	mov	r4,#0x00
      000BB3 7B 40            [12] 3142 	mov	r3,#0x40
      000BB5 E5*00            [12] 3143 	mov	a,_bp
      000BB7 24 04            [12] 3144 	add	a,#0x04
      000BB9 F8               [12] 3145 	mov	r0,a
      000BBA 86 02            [24] 3146 	mov	ar2,@r0
      000BBC 7D 00            [12] 3147 	mov	r5,#0x00
      000BBE 7E 40            [12] 3148 	mov	r6,#0x40
      000BC0 C0 06            [24] 3149 	push	ar6
      000BC2 C0 07            [24] 3150 	push	ar7
      000BC4 C0 04            [24] 3151 	push	ar4
      000BC6 C0 03            [24] 3152 	push	ar3
      000BC8 8A 82            [24] 3153 	mov	dpl,r2
      000BCA 8D 83            [24] 3154 	mov	dph,r5
      000BCC 8E F0            [24] 3155 	mov	b,r6
      000BCE 12r00r00         [24] 3156 	lcall	_xTaskCheckForTimeOut
      000BD1 AF 82            [24] 3157 	mov	r7,dpl
      000BD3 15 81            [12] 3158 	dec	sp
      000BD5 15 81            [12] 3159 	dec	sp
      000BD7 15 81            [12] 3160 	dec	sp
      000BD9 D0 06            [24] 3161 	pop	ar6
      000BDB D0 06            [24] 3162 	pop	ar6
      000BDD EF               [12] 3163 	mov	a,r7
      000BDE 60 03            [24] 3164 	jz	00186$
      000BE0 02r0Cr76         [24] 3165 	ljmp	00125$
      000BE3                       3166 00186$:
                           000BE3  3167 	C$queue.c$1451$4_0$269 ==.
                                   3168 ;	queue.c:1451: if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      000BE3 E5*00            [12] 3169 	mov	a,_bp
      000BE5 24 05            [12] 3170 	add	a,#0x05
      000BE7 F8               [12] 3171 	mov	r0,a
      000BE8 86 82            [24] 3172 	mov	dpl,@r0
      000BEA 08               [12] 3173 	inc	r0
      000BEB 86 83            [24] 3174 	mov	dph,@r0
      000BED 08               [12] 3175 	inc	r0
      000BEE 86 F0            [24] 3176 	mov	b,@r0
      000BF0 C0 06            [24] 3177 	push	ar6
      000BF2 12r1Br1C         [24] 3178 	lcall	_prvIsQueueEmpty
      000BF5 E5 82            [12] 3179 	mov	a,dpl
      000BF7 D0 06            [24] 3180 	pop	ar6
      000BF9 70 03            [24] 3181 	jnz	00187$
      000BFB 02r0Cr58         [24] 3182 	ljmp	00120$
      000BFE                       3183 00187$:
                           000BFE  3184 	C$queue.c$1454$5_0$270 ==.
                                   3185 ;	queue.c:1454: vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
      000BFE E5*00            [12] 3186 	mov	a,_bp
      000C00 24 05            [12] 3187 	add	a,#0x05
      000C02 F8               [12] 3188 	mov	r0,a
      000C03 74 18            [12] 3189 	mov	a,#0x18
      000C05 26               [12] 3190 	add	a,@r0
      000C06 FC               [12] 3191 	mov	r4,a
      000C07 74 00            [12] 3192 	mov	a,#0x00
      000C09 08               [12] 3193 	inc	r0
      000C0A 36               [12] 3194 	addc	a,@r0
      000C0B FD               [12] 3195 	mov	r5,a
      000C0C 08               [12] 3196 	inc	r0
      000C0D 86 07            [24] 3197 	mov	ar7,@r0
      000C0F C0 06            [24] 3198 	push	ar6
      000C11 E5*00            [12] 3199 	mov	a,_bp
      000C13 24 F9            [12] 3200 	add	a,#0xf9
      000C15 F8               [12] 3201 	mov	r0,a
      000C16 E6               [12] 3202 	mov	a,@r0
      000C17 C0 E0            [24] 3203 	push	acc
      000C19 08               [12] 3204 	inc	r0
      000C1A E6               [12] 3205 	mov	a,@r0
      000C1B C0 E0            [24] 3206 	push	acc
      000C1D 8C 82            [24] 3207 	mov	dpl,r4
      000C1F 8D 83            [24] 3208 	mov	dph,r5
      000C21 8F F0            [24] 3209 	mov	b,r7
      000C23 12r00r00         [24] 3210 	lcall	_vTaskPlaceOnEventList
      000C26 15 81            [12] 3211 	dec	sp
      000C28 15 81            [12] 3212 	dec	sp
      000C2A D0 06            [24] 3213 	pop	ar6
                           000C2C  3214 	C$queue.c$1455$5_0$270 ==.
                                   3215 ;	queue.c:1455: prvUnlockQueue( pxQueue );
      000C2C E5*00            [12] 3216 	mov	a,_bp
      000C2E 24 05            [12] 3217 	add	a,#0x05
      000C30 F8               [12] 3218 	mov	r0,a
      000C31 86 82            [24] 3219 	mov	dpl,@r0
      000C33 08               [12] 3220 	inc	r0
      000C34 86 83            [24] 3221 	mov	dph,@r0
      000C36 08               [12] 3222 	inc	r0
      000C37 86 F0            [24] 3223 	mov	b,@r0
      000C39 C0 06            [24] 3224 	push	ar6
      000C3B 12r19r84         [24] 3225 	lcall	_prvUnlockQueue
      000C3E D0 06            [24] 3226 	pop	ar6
                           000C40  3227 	C$queue.c$1457$5_0$270 ==.
                                   3228 ;	queue.c:1457: if( xTaskResumeAll() == pdFALSE )
      000C40 C0 06            [24] 3229 	push	ar6
      000C42 12r00r00         [24] 3230 	lcall	_xTaskResumeAll
      000C45 E5 82            [12] 3231 	mov	a,dpl
      000C47 D0 06            [24] 3232 	pop	ar6
      000C49 60 03            [24] 3233 	jz	00188$
      000C4B 02r0Ar39         [24] 3234 	ljmp	00128$
      000C4E                       3235 00188$:
                           000C4E  3236 	C$queue.c$1459$6_0$271 ==.
                                   3237 ;	queue.c:1459: portYIELD_WITHIN_API();
      000C4E C0 06            [24] 3238 	push	ar6
      000C50 12r00r00         [24] 3239 	lcall	_vPortYield
      000C53 D0 06            [24] 3240 	pop	ar6
      000C55 02r0Ar39         [24] 3241 	ljmp	00128$
      000C58                       3242 00120$:
                           000C58  3243 	C$queue.c$1470$5_0$273 ==.
                                   3244 ;	queue.c:1470: prvUnlockQueue( pxQueue );
      000C58 E5*00            [12] 3245 	mov	a,_bp
      000C5A 24 05            [12] 3246 	add	a,#0x05
      000C5C F8               [12] 3247 	mov	r0,a
      000C5D 86 82            [24] 3248 	mov	dpl,@r0
      000C5F 08               [12] 3249 	inc	r0
      000C60 86 83            [24] 3250 	mov	dph,@r0
      000C62 08               [12] 3251 	inc	r0
      000C63 86 F0            [24] 3252 	mov	b,@r0
      000C65 C0 06            [24] 3253 	push	ar6
      000C67 12r19r84         [24] 3254 	lcall	_prvUnlockQueue
      000C6A D0 06            [24] 3255 	pop	ar6
                           000C6C  3256 	C$queue.c$1471$5_0$273 ==.
                                   3257 ;	queue.c:1471: ( void ) xTaskResumeAll();
      000C6C C0 06            [24] 3258 	push	ar6
      000C6E 12r00r00         [24] 3259 	lcall	_xTaskResumeAll
      000C71 D0 06            [24] 3260 	pop	ar6
      000C73 02r0Ar39         [24] 3261 	ljmp	00128$
      000C76                       3262 00125$:
                           000C76  3263 	C$queue.c$1478$4_0$274 ==.
                                   3264 ;	queue.c:1478: prvUnlockQueue( pxQueue );
      000C76 E5*00            [12] 3265 	mov	a,_bp
      000C78 24 05            [12] 3266 	add	a,#0x05
      000C7A F8               [12] 3267 	mov	r0,a
      000C7B 86 82            [24] 3268 	mov	dpl,@r0
      000C7D 08               [12] 3269 	inc	r0
      000C7E 86 83            [24] 3270 	mov	dph,@r0
      000C80 08               [12] 3271 	inc	r0
      000C81 86 F0            [24] 3272 	mov	b,@r0
      000C83 C0 06            [24] 3273 	push	ar6
      000C85 12r19r84         [24] 3274 	lcall	_prvUnlockQueue
      000C88 D0 06            [24] 3275 	pop	ar6
                           000C8A  3276 	C$queue.c$1479$4_0$274 ==.
                                   3277 ;	queue.c:1479: ( void ) xTaskResumeAll();
      000C8A C0 06            [24] 3278 	push	ar6
      000C8C 12r00r00         [24] 3279 	lcall	_xTaskResumeAll
      000C8F D0 06            [24] 3280 	pop	ar6
                           000C91  3281 	C$queue.c$1481$4_0$274 ==.
                                   3282 ;	queue.c:1481: if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      000C91 E5*00            [12] 3283 	mov	a,_bp
      000C93 24 05            [12] 3284 	add	a,#0x05
      000C95 F8               [12] 3285 	mov	r0,a
      000C96 86 82            [24] 3286 	mov	dpl,@r0
      000C98 08               [12] 3287 	inc	r0
      000C99 86 83            [24] 3288 	mov	dph,@r0
      000C9B 08               [12] 3289 	inc	r0
      000C9C 86 F0            [24] 3290 	mov	b,@r0
      000C9E C0 06            [24] 3291 	push	ar6
      000CA0 12r1Br1C         [24] 3292 	lcall	_prvIsQueueEmpty
      000CA3 E5 82            [12] 3293 	mov	a,dpl
      000CA5 D0 06            [24] 3294 	pop	ar6
      000CA7 70 03            [24] 3295 	jnz	00189$
      000CA9 02r0Ar39         [24] 3296 	ljmp	00128$
      000CAC                       3297 00189$:
                           000CAC  3298 	C$queue.c$1484$5_0$275 ==.
                                   3299 ;	queue.c:1484: return errQUEUE_EMPTY;
      000CAC 75 82 00         [24] 3300 	mov	dpl,#0x00
      000CAF                       3301 00130$:
                           000CAF  3302 	C$queue.c$1492$2_0$253 ==.
                                   3303 ;	queue.c:1492: }
      000CAF 85*00 81         [24] 3304 	mov	sp,_bp
      000CB2 D0*00            [24] 3305 	pop	_bp
                           000CB4  3306 	C$queue.c$1492$2_0$253 ==.
                           000CB4  3307 	XG$xQueueReceive$0$0 ==.
      000CB4 22               [24] 3308 	ret
                                   3309 ;------------------------------------------------------------
                                   3310 ;Allocation info for local variables in function 'xQueueSemaphoreTake'
                                   3311 ;------------------------------------------------------------
                                   3312 ;xTicksToWait              Allocated to stack - _bp -4
                                   3313 ;xQueue                    Allocated to registers r4 r5 r7 
                                   3314 ;xEntryTimeSet             Allocated to stack - _bp +5
                                   3315 ;xTimeOut                  Allocated to stack - _bp +6
                                   3316 ;pxQueue                   Allocated to stack - _bp +9
                                   3317 ;uxSemaphoreCount          Allocated to registers r7 
                                   3318 ;sloc0                     Allocated to stack - _bp +2
                                   3319 ;sloc1                     Allocated to stack - _bp +15
                                   3320 ;sloc2                     Allocated to stack - _bp +1
                                   3321 ;------------------------------------------------------------
                           000CB5  3322 	G$xQueueSemaphoreTake$0$0 ==.
                           000CB5  3323 	C$queue.c$1495$2_0$278 ==.
                                   3324 ;	queue.c:1495: BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                   3325 ;	-----------------------------------------
                                   3326 ;	 function xQueueSemaphoreTake
                                   3327 ;	-----------------------------------------
      000CB5                       3328 _xQueueSemaphoreTake:
      000CB5 C0*00            [24] 3329 	push	_bp
      000CB7 85 81*00         [24] 3330 	mov	_bp,sp
      000CBA E5 81            [12] 3331 	mov	a,sp
      000CBC 24 0B            [12] 3332 	add	a,#0x0b
      000CBE F5 81            [12] 3333 	mov	sp,a
      000CC0 AC 82            [24] 3334 	mov	r4,dpl
      000CC2 AD 83            [24] 3335 	mov	r5,dph
      000CC4 AF F0            [24] 3336 	mov	r7,b
                           000CC6  3337 	C$queue.c$1498$2_0$278 ==.
                                   3338 ;	queue.c:1498: BaseType_t xEntryTimeSet = pdFALSE;
      000CC6 E5*00            [12] 3339 	mov	a,_bp
      000CC8 24 05            [12] 3340 	add	a,#0x05
      000CCA F8               [12] 3341 	mov	r0,a
      000CCB 76 00            [12] 3342 	mov	@r0,#0x00
                           000CCD  3343 	C$queue.c$1500$2_0$278 ==.
                                   3344 ;	queue.c:1500: Queue_t * const pxQueue = xQueue;
      000CCD E5*00            [12] 3345 	mov	a,_bp
      000CCF 24 09            [12] 3346 	add	a,#0x09
      000CD1 F8               [12] 3347 	mov	r0,a
      000CD2 A6 04            [24] 3348 	mov	@r0,ar4
      000CD4 08               [12] 3349 	inc	r0
      000CD5 A6 05            [24] 3350 	mov	@r0,ar5
      000CD7 08               [12] 3351 	inc	r0
      000CD8 A6 07            [24] 3352 	mov	@r0,ar7
                           000CDA  3353 	C$queue.c$1511$6_0$289 ==.
                                   3354 ;	queue.c:1511: configASSERT( pxQueue->uxItemSize == 0 );
      000CDA E5*00            [12] 3355 	mov	a,_bp
      000CDC 24 06            [12] 3356 	add	a,#0x06
      000CDE FE               [12] 3357 	mov	r6,a
      000CDF A8*00            [24] 3358 	mov	r0,_bp
      000CE1 08               [12] 3359 	inc	r0
      000CE2 A6 06            [24] 3360 	mov	@r0,ar6
      000CE4 A8*00            [24] 3361 	mov	r0,_bp
      000CE6 08               [12] 3362 	inc	r0
      000CE7 08               [12] 3363 	inc	r0
      000CE8 74 24            [12] 3364 	mov	a,#0x24
      000CEA 2C               [12] 3365 	add	a,r4
      000CEB F6               [12] 3366 	mov	@r0,a
      000CEC 74 00            [12] 3367 	mov	a,#0x00
      000CEE 3D               [12] 3368 	addc	a,r5
      000CEF 08               [12] 3369 	inc	r0
      000CF0 F6               [12] 3370 	mov	@r0,a
      000CF1 08               [12] 3371 	inc	r0
      000CF2 A6 07            [24] 3372 	mov	@r0,ar7
      000CF4                       3373 00128$:
                           000CF4  3374 	C$queue.c$1525$3_0$280 ==.
                                   3375 ;	queue.c:1525: taskENTER_CRITICAL();
      000CF4 C0 E0            [24] 3376 	push ACC 
      000CF6 C0 A8            [24] 3377 	push IE 
                                   3378 ;	assignBit
      000CF8 C2 AF            [12] 3379 	clr	_EA
                           000CFA  3380 	C$queue.c$1529$4_0$281 ==.
                                   3381 ;	queue.c:1529: const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
      000CFA A8*00            [24] 3382 	mov	r0,_bp
      000CFC 08               [12] 3383 	inc	r0
      000CFD 08               [12] 3384 	inc	r0
      000CFE 86 82            [24] 3385 	mov	dpl,@r0
      000D00 08               [12] 3386 	inc	r0
      000D01 86 83            [24] 3387 	mov	dph,@r0
      000D03 08               [12] 3388 	inc	r0
      000D04 86 F0            [24] 3389 	mov	b,@r0
      000D06 12r00r00         [24] 3390 	lcall	__gptrget
      000D09 FC               [12] 3391 	mov	r4,a
      000D0A 8C 07            [24] 3392 	mov	ar7,r4
                           000D0C  3393 	C$queue.c$1533$4_0$281 ==.
                                   3394 ;	queue.c:1533: if( uxSemaphoreCount > ( UBaseType_t ) 0 )
      000D0C EC               [12] 3395 	mov	a,r4
      000D0D 70 03            [24] 3396 	jnz	00178$
      000D0F 02r0Dr6F         [24] 3397 	ljmp	00111$
      000D12                       3398 00178$:
                           000D12  3399 	C$queue.c$1539$5_0$282 ==.
                                   3400 ;	queue.c:1539: pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
      000D12 EF               [12] 3401 	mov	a,r7
      000D13 14               [12] 3402 	dec	a
      000D14 FC               [12] 3403 	mov	r4,a
      000D15 A8*00            [24] 3404 	mov	r0,_bp
      000D17 08               [12] 3405 	inc	r0
      000D18 08               [12] 3406 	inc	r0
      000D19 86 82            [24] 3407 	mov	dpl,@r0
      000D1B 08               [12] 3408 	inc	r0
      000D1C 86 83            [24] 3409 	mov	dph,@r0
      000D1E 08               [12] 3410 	inc	r0
      000D1F 86 F0            [24] 3411 	mov	b,@r0
      000D21 EC               [12] 3412 	mov	a,r4
      000D22 12r00r00         [24] 3413 	lcall	__gptrput
                           000D25  3414 	C$queue.c$1558$5_0$282 ==.
                                   3415 ;	queue.c:1558: if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
      000D25 E5*00            [12] 3416 	mov	a,_bp
      000D27 24 09            [12] 3417 	add	a,#0x09
      000D29 F8               [12] 3418 	mov	r0,a
      000D2A 74 0C            [12] 3419 	mov	a,#0x0c
      000D2C 26               [12] 3420 	add	a,@r0
      000D2D FB               [12] 3421 	mov	r3,a
      000D2E 74 00            [12] 3422 	mov	a,#0x00
      000D30 08               [12] 3423 	inc	r0
      000D31 36               [12] 3424 	addc	a,@r0
      000D32 FC               [12] 3425 	mov	r4,a
      000D33 08               [12] 3426 	inc	r0
      000D34 86 07            [24] 3427 	mov	ar7,@r0
      000D36 8B 82            [24] 3428 	mov	dpl,r3
      000D38 8C 83            [24] 3429 	mov	dph,r4
      000D3A 8F F0            [24] 3430 	mov	b,r7
      000D3C 12r00r00         [24] 3431 	lcall	__gptrget
      000D3F 70 03            [24] 3432 	jnz	00179$
      000D41 02r0Dr5E         [24] 3433 	ljmp	00104$
      000D44                       3434 00179$:
                           000D44  3435 	C$queue.c$1560$6_0$283 ==.
                                   3436 ;	queue.c:1560: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
      000D44 E5*00            [12] 3437 	mov	a,_bp
      000D46 24 09            [12] 3438 	add	a,#0x09
      000D48 F8               [12] 3439 	mov	r0,a
      000D49 74 0C            [12] 3440 	mov	a,#0x0c
      000D4B 26               [12] 3441 	add	a,@r0
      000D4C FB               [12] 3442 	mov	r3,a
      000D4D 74 00            [12] 3443 	mov	a,#0x00
      000D4F 08               [12] 3444 	inc	r0
      000D50 36               [12] 3445 	addc	a,@r0
      000D51 FC               [12] 3446 	mov	r4,a
      000D52 08               [12] 3447 	inc	r0
      000D53 86 07            [24] 3448 	mov	ar7,@r0
      000D55 8B 82            [24] 3449 	mov	dpl,r3
      000D57 8C 83            [24] 3450 	mov	dph,r4
      000D59 8F F0            [24] 3451 	mov	b,r7
      000D5B 12r00r00         [24] 3452 	lcall	_xTaskRemoveFromEventList
      000D5E                       3453 00104$:
                           000D5E  3454 	C$queue.c$1574$5_0$282 ==.
                                   3455 ;	queue.c:1574: taskEXIT_CRITICAL();
      000D5E D0 E0            [24] 3456 	pop ACC 
      000D60 53 E0 80         [24] 3457 	anl	_ACC,#0x80
      000D63 E5 E0            [12] 3458 	mov	a,_ACC
      000D65 42 A8            [12] 3459 	orl	_IE,a
      000D67 D0 E0            [24] 3460 	pop ACC 
                           000D69  3461 	C$queue.c$1575$5_0$282 ==.
                                   3462 ;	queue.c:1575: return pdPASS;
      000D69 75 82 01         [24] 3463 	mov	dpl,#0x01
      000D6C 02r0Fr34         [24] 3464 	ljmp	00130$
      000D6F                       3465 00111$:
                           000D6F  3466 	C$queue.c$1579$5_0$287 ==.
                                   3467 ;	queue.c:1579: if( xTicksToWait == ( TickType_t ) 0 )
      000D6F E5*00            [12] 3468 	mov	a,_bp
      000D71 24 FC            [12] 3469 	add	a,#0xfc
      000D73 F8               [12] 3470 	mov	r0,a
      000D74 E6               [12] 3471 	mov	a,@r0
      000D75 08               [12] 3472 	inc	r0
      000D76 46               [12] 3473 	orl	a,@r0
      000D77 60 03            [24] 3474 	jz	00180$
      000D79 02r0Dr8D         [24] 3475 	ljmp	00108$
      000D7C                       3476 00180$:
                           000D7C  3477 	C$queue.c$1592$6_0$288 ==.
                                   3478 ;	queue.c:1592: taskEXIT_CRITICAL();
      000D7C D0 E0            [24] 3479 	pop ACC 
      000D7E 53 E0 80         [24] 3480 	anl	_ACC,#0x80
      000D81 E5 E0            [12] 3481 	mov	a,_ACC
      000D83 42 A8            [12] 3482 	orl	_IE,a
      000D85 D0 E0            [24] 3483 	pop ACC 
                           000D87  3484 	C$queue.c$1594$6_0$288 ==.
                                   3485 ;	queue.c:1594: return errQUEUE_EMPTY;
      000D87 75 82 00         [24] 3486 	mov	dpl,#0x00
      000D8A 02r0Fr34         [24] 3487 	ljmp	00130$
      000D8D                       3488 00108$:
                           000D8D  3489 	C$queue.c$1596$5_0$287 ==.
                                   3490 ;	queue.c:1596: else if( xEntryTimeSet == pdFALSE )
      000D8D E5*00            [12] 3491 	mov	a,_bp
      000D8F 24 05            [12] 3492 	add	a,#0x05
      000D91 F8               [12] 3493 	mov	r0,a
      000D92 E6               [12] 3494 	mov	a,@r0
      000D93 60 03            [24] 3495 	jz	00181$
      000D95 02r0DrB2         [24] 3496 	ljmp	00112$
      000D98                       3497 00181$:
                           000D98  3498 	C$queue.c$1600$6_0$289 ==.
                                   3499 ;	queue.c:1600: vTaskInternalSetTimeOutState( &xTimeOut );
      000D98 8E 03            [24] 3500 	mov	ar3,r6
      000D9A 7C 00            [12] 3501 	mov	r4,#0x00
      000D9C 7F 40            [12] 3502 	mov	r7,#0x40
      000D9E 8B 82            [24] 3503 	mov	dpl,r3
      000DA0 8C 83            [24] 3504 	mov	dph,r4
      000DA2 8F F0            [24] 3505 	mov	b,r7
      000DA4 C0 06            [24] 3506 	push	ar6
      000DA6 12r00r00         [24] 3507 	lcall	_vTaskInternalSetTimeOutState
      000DA9 D0 06            [24] 3508 	pop	ar6
                           000DAB  3509 	C$queue.c$1601$6_0$289 ==.
                                   3510 ;	queue.c:1601: xEntryTimeSet = pdTRUE;
      000DAB E5*00            [12] 3511 	mov	a,_bp
      000DAD 24 05            [12] 3512 	add	a,#0x05
      000DAF F8               [12] 3513 	mov	r0,a
      000DB0 76 01            [12] 3514 	mov	@r0,#0x01
      000DB2                       3515 00112$:
                           000DB2  3516 	C$queue.c$1610$3_0$280 ==.
                                   3517 ;	queue.c:1610: taskEXIT_CRITICAL();
      000DB2 D0 E0            [24] 3518 	pop ACC 
      000DB4 53 E0 80         [24] 3519 	anl	_ACC,#0x80
      000DB7 E5 E0            [12] 3520 	mov	a,_ACC
      000DB9 42 A8            [12] 3521 	orl	_IE,a
      000DBB D0 E0            [24] 3522 	pop ACC 
                           000DBD  3523 	C$queue.c$1615$3_0$280 ==.
                                   3524 ;	queue.c:1615: vTaskSuspendAll();
      000DBD C0 06            [24] 3525 	push	ar6
      000DBF 12r00r00         [24] 3526 	lcall	_vTaskSuspendAll
      000DC2 D0 06            [24] 3527 	pop	ar6
                           000DC4  3528 	C$queue.c$1616$3_0$280 ==.
                                   3529 ;	queue.c:1616: prvLockQueue( pxQueue );
      000DC4 C0 E0            [24] 3530 	push ACC 
      000DC6 C0 A8            [24] 3531 	push IE 
                                   3532 ;	assignBit
      000DC8 C2 AF            [12] 3533 	clr	_EA
      000DCA E5*00            [12] 3534 	mov	a,_bp
      000DCC 24 09            [12] 3535 	add	a,#0x09
      000DCE F8               [12] 3536 	mov	r0,a
      000DCF 74 27            [12] 3537 	mov	a,#0x27
      000DD1 26               [12] 3538 	add	a,@r0
      000DD2 FB               [12] 3539 	mov	r3,a
      000DD3 74 00            [12] 3540 	mov	a,#0x00
      000DD5 08               [12] 3541 	inc	r0
      000DD6 36               [12] 3542 	addc	a,@r0
      000DD7 FC               [12] 3543 	mov	r4,a
      000DD8 08               [12] 3544 	inc	r0
      000DD9 86 07            [24] 3545 	mov	ar7,@r0
      000DDB 8B 82            [24] 3546 	mov	dpl,r3
      000DDD 8C 83            [24] 3547 	mov	dph,r4
      000DDF 8F F0            [24] 3548 	mov	b,r7
      000DE1 12r00r00         [24] 3549 	lcall	__gptrget
      000DE4 FA               [12] 3550 	mov	r2,a
      000DE5 BA FF 02         [24] 3551 	cjne	r2,#0xff,00182$
      000DE8 80 03            [24] 3552 	sjmp	00183$
      000DEA                       3553 00182$:
      000DEA 02r0DrF8         [24] 3554 	ljmp	00114$
      000DED                       3555 00183$:
      000DED 8B 82            [24] 3556 	mov	dpl,r3
      000DEF 8C 83            [24] 3557 	mov	dph,r4
      000DF1 8F F0            [24] 3558 	mov	b,r7
      000DF3 74 00            [12] 3559 	mov	a,#0x00
      000DF5 12r00r00         [24] 3560 	lcall	__gptrput
      000DF8                       3561 00114$:
      000DF8 E5*00            [12] 3562 	mov	a,_bp
      000DFA 24 09            [12] 3563 	add	a,#0x09
      000DFC F8               [12] 3564 	mov	r0,a
      000DFD 74 28            [12] 3565 	mov	a,#0x28
      000DFF 26               [12] 3566 	add	a,@r0
      000E00 FB               [12] 3567 	mov	r3,a
      000E01 74 00            [12] 3568 	mov	a,#0x00
      000E03 08               [12] 3569 	inc	r0
      000E04 36               [12] 3570 	addc	a,@r0
      000E05 FC               [12] 3571 	mov	r4,a
      000E06 08               [12] 3572 	inc	r0
      000E07 86 07            [24] 3573 	mov	ar7,@r0
      000E09 8B 82            [24] 3574 	mov	dpl,r3
      000E0B 8C 83            [24] 3575 	mov	dph,r4
      000E0D 8F F0            [24] 3576 	mov	b,r7
      000E0F 12r00r00         [24] 3577 	lcall	__gptrget
      000E12 FA               [12] 3578 	mov	r2,a
      000E13 BA FF 02         [24] 3579 	cjne	r2,#0xff,00184$
      000E16 80 03            [24] 3580 	sjmp	00185$
      000E18                       3581 00184$:
      000E18 02r0Er26         [24] 3582 	ljmp	00116$
      000E1B                       3583 00185$:
      000E1B 8B 82            [24] 3584 	mov	dpl,r3
      000E1D 8C 83            [24] 3585 	mov	dph,r4
      000E1F 8F F0            [24] 3586 	mov	b,r7
      000E21 74 00            [12] 3587 	mov	a,#0x00
      000E23 12r00r00         [24] 3588 	lcall	__gptrput
      000E26                       3589 00116$:
      000E26 C0 06            [24] 3590 	push	ar6
      000E28 D0 E0            [24] 3591 	pop ACC 
      000E2A 53 E0 80         [24] 3592 	anl	_ACC,#0x80
      000E2D E5 E0            [12] 3593 	mov	a,_ACC
      000E2F 42 A8            [12] 3594 	orl	_IE,a
      000E31 D0 E0            [24] 3595 	pop ACC 
                           000E33  3596 	C$queue.c$1619$3_0$280 ==.
                                   3597 ;	queue.c:1619: if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
      000E33 E5*00            [12] 3598 	mov	a,_bp
      000E35 24 FC            [12] 3599 	add	a,#0xfc
      000E37 FF               [12] 3600 	mov	r7,a
      000E38 7C 00            [12] 3601 	mov	r4,#0x00
      000E3A 7B 40            [12] 3602 	mov	r3,#0x40
      000E3C A8*00            [24] 3603 	mov	r0,_bp
      000E3E 08               [12] 3604 	inc	r0
      000E3F 86 02            [24] 3605 	mov	ar2,@r0
      000E41 7D 00            [12] 3606 	mov	r5,#0x00
      000E43 7E 40            [12] 3607 	mov	r6,#0x40
      000E45 C0 06            [24] 3608 	push	ar6
      000E47 C0 07            [24] 3609 	push	ar7
      000E49 C0 04            [24] 3610 	push	ar4
      000E4B C0 03            [24] 3611 	push	ar3
      000E4D 8A 82            [24] 3612 	mov	dpl,r2
      000E4F 8D 83            [24] 3613 	mov	dph,r5
      000E51 8E F0            [24] 3614 	mov	b,r6
      000E53 12r00r00         [24] 3615 	lcall	_xTaskCheckForTimeOut
      000E56 AF 82            [24] 3616 	mov	r7,dpl
      000E58 15 81            [12] 3617 	dec	sp
      000E5A 15 81            [12] 3618 	dec	sp
      000E5C 15 81            [12] 3619 	dec	sp
      000E5E D0 06            [24] 3620 	pop	ar6
      000E60 D0 06            [24] 3621 	pop	ar6
      000E62 EF               [12] 3622 	mov	a,r7
      000E63 60 03            [24] 3623 	jz	00186$
      000E65 02r0ErFB         [24] 3624 	ljmp	00125$
      000E68                       3625 00186$:
                           000E68  3626 	C$queue.c$1625$4_0$294 ==.
                                   3627 ;	queue.c:1625: if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      000E68 E5*00            [12] 3628 	mov	a,_bp
      000E6A 24 09            [12] 3629 	add	a,#0x09
      000E6C F8               [12] 3630 	mov	r0,a
      000E6D 86 82            [24] 3631 	mov	dpl,@r0
      000E6F 08               [12] 3632 	inc	r0
      000E70 86 83            [24] 3633 	mov	dph,@r0
      000E72 08               [12] 3634 	inc	r0
      000E73 86 F0            [24] 3635 	mov	b,@r0
      000E75 C0 06            [24] 3636 	push	ar6
      000E77 12r1Br1C         [24] 3637 	lcall	_prvIsQueueEmpty
      000E7A E5 82            [12] 3638 	mov	a,dpl
      000E7C D0 06            [24] 3639 	pop	ar6
      000E7E 70 03            [24] 3640 	jnz	00187$
      000E80 02r0ErDD         [24] 3641 	ljmp	00120$
      000E83                       3642 00187$:
                           000E83  3643 	C$queue.c$1646$5_0$295 ==.
                                   3644 ;	queue.c:1646: vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
      000E83 E5*00            [12] 3645 	mov	a,_bp
      000E85 24 09            [12] 3646 	add	a,#0x09
      000E87 F8               [12] 3647 	mov	r0,a
      000E88 74 18            [12] 3648 	mov	a,#0x18
      000E8A 26               [12] 3649 	add	a,@r0
      000E8B FC               [12] 3650 	mov	r4,a
      000E8C 74 00            [12] 3651 	mov	a,#0x00
      000E8E 08               [12] 3652 	inc	r0
      000E8F 36               [12] 3653 	addc	a,@r0
      000E90 FD               [12] 3654 	mov	r5,a
      000E91 08               [12] 3655 	inc	r0
      000E92 86 07            [24] 3656 	mov	ar7,@r0
      000E94 C0 06            [24] 3657 	push	ar6
      000E96 E5*00            [12] 3658 	mov	a,_bp
      000E98 24 FC            [12] 3659 	add	a,#0xfc
      000E9A F8               [12] 3660 	mov	r0,a
      000E9B E6               [12] 3661 	mov	a,@r0
      000E9C C0 E0            [24] 3662 	push	acc
      000E9E 08               [12] 3663 	inc	r0
      000E9F E6               [12] 3664 	mov	a,@r0
      000EA0 C0 E0            [24] 3665 	push	acc
      000EA2 8C 82            [24] 3666 	mov	dpl,r4
      000EA4 8D 83            [24] 3667 	mov	dph,r5
      000EA6 8F F0            [24] 3668 	mov	b,r7
      000EA8 12r00r00         [24] 3669 	lcall	_vTaskPlaceOnEventList
      000EAB 15 81            [12] 3670 	dec	sp
      000EAD 15 81            [12] 3671 	dec	sp
      000EAF D0 06            [24] 3672 	pop	ar6
                           000EB1  3673 	C$queue.c$1647$5_0$295 ==.
                                   3674 ;	queue.c:1647: prvUnlockQueue( pxQueue );
      000EB1 E5*00            [12] 3675 	mov	a,_bp
      000EB3 24 09            [12] 3676 	add	a,#0x09
      000EB5 F8               [12] 3677 	mov	r0,a
      000EB6 86 82            [24] 3678 	mov	dpl,@r0
      000EB8 08               [12] 3679 	inc	r0
      000EB9 86 83            [24] 3680 	mov	dph,@r0
      000EBB 08               [12] 3681 	inc	r0
      000EBC 86 F0            [24] 3682 	mov	b,@r0
      000EBE C0 06            [24] 3683 	push	ar6
      000EC0 12r19r84         [24] 3684 	lcall	_prvUnlockQueue
      000EC3 D0 06            [24] 3685 	pop	ar6
                           000EC5  3686 	C$queue.c$1649$5_0$295 ==.
                                   3687 ;	queue.c:1649: if( xTaskResumeAll() == pdFALSE )
      000EC5 C0 06            [24] 3688 	push	ar6
      000EC7 12r00r00         [24] 3689 	lcall	_xTaskResumeAll
      000ECA E5 82            [12] 3690 	mov	a,dpl
      000ECC D0 06            [24] 3691 	pop	ar6
      000ECE 60 03            [24] 3692 	jz	00188$
      000ED0 02r0CrF4         [24] 3693 	ljmp	00128$
      000ED3                       3694 00188$:
                           000ED3  3695 	C$queue.c$1651$6_0$296 ==.
                                   3696 ;	queue.c:1651: portYIELD_WITHIN_API();
      000ED3 C0 06            [24] 3697 	push	ar6
      000ED5 12r00r00         [24] 3698 	lcall	_vPortYield
      000ED8 D0 06            [24] 3699 	pop	ar6
      000EDA 02r0CrF4         [24] 3700 	ljmp	00128$
      000EDD                       3701 00120$:
                           000EDD  3702 	C$queue.c$1662$5_0$298 ==.
                                   3703 ;	queue.c:1662: prvUnlockQueue( pxQueue );
      000EDD E5*00            [12] 3704 	mov	a,_bp
      000EDF 24 09            [12] 3705 	add	a,#0x09
      000EE1 F8               [12] 3706 	mov	r0,a
      000EE2 86 82            [24] 3707 	mov	dpl,@r0
      000EE4 08               [12] 3708 	inc	r0
      000EE5 86 83            [24] 3709 	mov	dph,@r0
      000EE7 08               [12] 3710 	inc	r0
      000EE8 86 F0            [24] 3711 	mov	b,@r0
      000EEA C0 06            [24] 3712 	push	ar6
      000EEC 12r19r84         [24] 3713 	lcall	_prvUnlockQueue
      000EEF D0 06            [24] 3714 	pop	ar6
                           000EF1  3715 	C$queue.c$1663$5_0$298 ==.
                                   3716 ;	queue.c:1663: ( void ) xTaskResumeAll();
      000EF1 C0 06            [24] 3717 	push	ar6
      000EF3 12r00r00         [24] 3718 	lcall	_xTaskResumeAll
      000EF6 D0 06            [24] 3719 	pop	ar6
      000EF8 02r0CrF4         [24] 3720 	ljmp	00128$
      000EFB                       3721 00125$:
                           000EFB  3722 	C$queue.c$1669$4_0$299 ==.
                                   3723 ;	queue.c:1669: prvUnlockQueue( pxQueue );
      000EFB E5*00            [12] 3724 	mov	a,_bp
      000EFD 24 09            [12] 3725 	add	a,#0x09
      000EFF F8               [12] 3726 	mov	r0,a
      000F00 86 82            [24] 3727 	mov	dpl,@r0
      000F02 08               [12] 3728 	inc	r0
      000F03 86 83            [24] 3729 	mov	dph,@r0
      000F05 08               [12] 3730 	inc	r0
      000F06 86 F0            [24] 3731 	mov	b,@r0
      000F08 C0 06            [24] 3732 	push	ar6
      000F0A 12r19r84         [24] 3733 	lcall	_prvUnlockQueue
      000F0D D0 06            [24] 3734 	pop	ar6
                           000F0F  3735 	C$queue.c$1670$4_0$299 ==.
                                   3736 ;	queue.c:1670: ( void ) xTaskResumeAll();
      000F0F C0 06            [24] 3737 	push	ar6
      000F11 12r00r00         [24] 3738 	lcall	_xTaskResumeAll
      000F14 D0 06            [24] 3739 	pop	ar6
                           000F16  3740 	C$queue.c$1676$4_0$299 ==.
                                   3741 ;	queue.c:1676: if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      000F16 E5*00            [12] 3742 	mov	a,_bp
      000F18 24 09            [12] 3743 	add	a,#0x09
      000F1A F8               [12] 3744 	mov	r0,a
      000F1B 86 82            [24] 3745 	mov	dpl,@r0
      000F1D 08               [12] 3746 	inc	r0
      000F1E 86 83            [24] 3747 	mov	dph,@r0
      000F20 08               [12] 3748 	inc	r0
      000F21 86 F0            [24] 3749 	mov	b,@r0
      000F23 C0 06            [24] 3750 	push	ar6
      000F25 12r1Br1C         [24] 3751 	lcall	_prvIsQueueEmpty
      000F28 E5 82            [12] 3752 	mov	a,dpl
      000F2A D0 06            [24] 3753 	pop	ar6
      000F2C 70 03            [24] 3754 	jnz	00189$
      000F2E 02r0CrF4         [24] 3755 	ljmp	00128$
      000F31                       3756 00189$:
                           000F31  3757 	C$queue.c$1703$5_0$300 ==.
                                   3758 ;	queue.c:1703: return errQUEUE_EMPTY;
      000F31 75 82 00         [24] 3759 	mov	dpl,#0x00
      000F34                       3760 00130$:
                           000F34  3761 	C$queue.c$1711$2_0$278 ==.
                                   3762 ;	queue.c:1711: }
      000F34 85*00 81         [24] 3763 	mov	sp,_bp
      000F37 D0*00            [24] 3764 	pop	_bp
                           000F39  3765 	C$queue.c$1711$2_0$278 ==.
                           000F39  3766 	XG$xQueueSemaphoreTake$0$0 ==.
      000F39 22               [24] 3767 	ret
                                   3768 ;------------------------------------------------------------
                                   3769 ;Allocation info for local variables in function 'xQueuePeek'
                                   3770 ;------------------------------------------------------------
                                   3771 ;pvBuffer                  Allocated to stack - _bp -5
                                   3772 ;xTicksToWait              Allocated to stack - _bp -7
                                   3773 ;xQueue                    Allocated to registers r5 r3 r7 
                                   3774 ;xEntryTimeSet             Allocated to registers r4 
                                   3775 ;xTimeOut                  Allocated to stack - _bp +8
                                   3776 ;pcOriginalReadPosition    Allocated to registers r6 r5 r4 
                                   3777 ;pxQueue                   Allocated to stack - _bp +11
                                   3778 ;uxMessagesWaiting         Allocated to registers 
                                   3779 ;sloc0                     Allocated to stack - _bp +5
                                   3780 ;sloc1                     Allocated to stack - _bp +1
                                   3781 ;sloc2                     Allocated to stack - _bp +2
                                   3782 ;------------------------------------------------------------
                           000F3A  3783 	G$xQueuePeek$0$0 ==.
                           000F3A  3784 	C$queue.c$1714$2_0$303 ==.
                                   3785 ;	queue.c:1714: BaseType_t xQueuePeek( QueueHandle_t xQueue,
                                   3786 ;	-----------------------------------------
                                   3787 ;	 function xQueuePeek
                                   3788 ;	-----------------------------------------
      000F3A                       3789 _xQueuePeek:
      000F3A C0*00            [24] 3790 	push	_bp
      000F3C 85 81*00         [24] 3791 	mov	_bp,sp
      000F3F E5 81            [12] 3792 	mov	a,sp
      000F41 24 0D            [12] 3793 	add	a,#0x0d
      000F43 F5 81            [12] 3794 	mov	sp,a
      000F45 AD 82            [24] 3795 	mov	r5,dpl
      000F47 AB 83            [24] 3796 	mov	r3,dph
      000F49 AF F0            [24] 3797 	mov	r7,b
                           000F4B  3798 	C$queue.c$1718$2_0$303 ==.
                                   3799 ;	queue.c:1718: BaseType_t xEntryTimeSet = pdFALSE;
      000F4B 7C 00            [12] 3800 	mov	r4,#0x00
                           000F4D  3801 	C$queue.c$1721$2_0$303 ==.
                                   3802 ;	queue.c:1721: Queue_t * const pxQueue = xQueue;
      000F4D E5*00            [12] 3803 	mov	a,_bp
      000F4F 24 0B            [12] 3804 	add	a,#0x0b
      000F51 F8               [12] 3805 	mov	r0,a
      000F52 A6 05            [24] 3806 	mov	@r0,ar5
      000F54 08               [12] 3807 	inc	r0
      000F55 A6 03            [24] 3808 	mov	@r0,ar3
      000F57 08               [12] 3809 	inc	r0
      000F58 A6 07            [24] 3810 	mov	@r0,ar7
                           000F5A  3811 	C$queue.c$1728$6_0$314 ==.
                                   3812 ;	queue.c:1728: configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
      000F5A E5*00            [12] 3813 	mov	a,_bp
      000F5C 24 08            [12] 3814 	add	a,#0x08
      000F5E FE               [12] 3815 	mov	r6,a
      000F5F A8*00            [24] 3816 	mov	r0,_bp
      000F61 08               [12] 3817 	inc	r0
      000F62 A6 06            [24] 3818 	mov	@r0,ar6
      000F64 E5*00            [12] 3819 	mov	a,_bp
      000F66 24 05            [12] 3820 	add	a,#0x05
      000F68 F8               [12] 3821 	mov	r0,a
      000F69 74 24            [12] 3822 	mov	a,#0x24
      000F6B 2D               [12] 3823 	add	a,r5
      000F6C F6               [12] 3824 	mov	@r0,a
      000F6D 74 00            [12] 3825 	mov	a,#0x00
      000F6F 3B               [12] 3826 	addc	a,r3
      000F70 08               [12] 3827 	inc	r0
      000F71 F6               [12] 3828 	mov	@r0,a
      000F72 08               [12] 3829 	inc	r0
      000F73 A6 07            [24] 3830 	mov	@r0,ar7
      000F75                       3831 00128$:
                           000F75  3832 	C$queue.c$1742$3_0$305 ==.
                                   3833 ;	queue.c:1742: taskENTER_CRITICAL();
      000F75 C0 E0            [24] 3834 	push ACC 
      000F77 C0 A8            [24] 3835 	push IE 
                                   3836 ;	assignBit
      000F79 C2 AF            [12] 3837 	clr	_EA
                           000F7B  3838 	C$queue.c$1744$4_0$306 ==.
                                   3839 ;	queue.c:1744: const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
      000F7B E5*00            [12] 3840 	mov	a,_bp
      000F7D 24 05            [12] 3841 	add	a,#0x05
      000F7F F8               [12] 3842 	mov	r0,a
      000F80 86 82            [24] 3843 	mov	dpl,@r0
      000F82 08               [12] 3844 	inc	r0
      000F83 86 83            [24] 3845 	mov	dph,@r0
      000F85 08               [12] 3846 	inc	r0
      000F86 86 F0            [24] 3847 	mov	b,@r0
      000F88 12r00r00         [24] 3848 	lcall	__gptrget
      000F8B 70 03            [24] 3849 	jnz	00178$
      000F8D 02r10r66         [24] 3850 	ljmp	00111$
      000F90                       3851 00178$:
                           000F90  3852 	C$queue.c$1748$4_0$306 ==.
                                   3853 ;	queue.c:1748: if( uxMessagesWaiting > ( UBaseType_t ) 0 )
                           000F90  3854 	C$queue.c$1753$5_0$307 ==.
                                   3855 ;	queue.c:1753: pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
      000F90 E5*00            [12] 3856 	mov	a,_bp
      000F92 24 0B            [12] 3857 	add	a,#0x0b
      000F94 F8               [12] 3858 	mov	r0,a
      000F95 74 06            [12] 3859 	mov	a,#0x06
      000F97 26               [12] 3860 	add	a,@r0
      000F98 FA               [12] 3861 	mov	r2,a
      000F99 74 00            [12] 3862 	mov	a,#0x00
      000F9B 08               [12] 3863 	inc	r0
      000F9C 36               [12] 3864 	addc	a,@r0
      000F9D FB               [12] 3865 	mov	r3,a
      000F9E 08               [12] 3866 	inc	r0
      000F9F 86 07            [24] 3867 	mov	ar7,@r0
      000FA1 74 03            [12] 3868 	mov	a,#0x03
      000FA3 2A               [12] 3869 	add	a,r2
      000FA4 FA               [12] 3870 	mov	r2,a
      000FA5 74 00            [12] 3871 	mov	a,#0x00
      000FA7 3B               [12] 3872 	addc	a,r3
      000FA8 FB               [12] 3873 	mov	r3,a
      000FA9 8A 82            [24] 3874 	mov	dpl,r2
      000FAB 8B 83            [24] 3875 	mov	dph,r3
      000FAD 8F F0            [24] 3876 	mov	b,r7
      000FAF 12r00r00         [24] 3877 	lcall	__gptrget
      000FB2 FE               [12] 3878 	mov	r6,a
      000FB3 A3               [24] 3879 	inc	dptr
      000FB4 12r00r00         [24] 3880 	lcall	__gptrget
      000FB7 FD               [12] 3881 	mov	r5,a
      000FB8 A3               [24] 3882 	inc	dptr
      000FB9 12r00r00         [24] 3883 	lcall	__gptrget
      000FBC FC               [12] 3884 	mov	r4,a
                           000FBD  3885 	C$queue.c$1755$5_0$307 ==.
                                   3886 ;	queue.c:1755: prvCopyDataFromQueue( pxQueue, pvBuffer );
      000FBD C0 06            [24] 3887 	push	ar6
      000FBF C0 05            [24] 3888 	push	ar5
      000FC1 C0 04            [24] 3889 	push	ar4
      000FC3 E5*00            [12] 3890 	mov	a,_bp
      000FC5 24 FB            [12] 3891 	add	a,#0xfb
      000FC7 F8               [12] 3892 	mov	r0,a
      000FC8 E6               [12] 3893 	mov	a,@r0
      000FC9 C0 E0            [24] 3894 	push	acc
      000FCB 08               [12] 3895 	inc	r0
      000FCC E6               [12] 3896 	mov	a,@r0
      000FCD C0 E0            [24] 3897 	push	acc
      000FCF 08               [12] 3898 	inc	r0
      000FD0 E6               [12] 3899 	mov	a,@r0
      000FD1 C0 E0            [24] 3900 	push	acc
      000FD3 E5*00            [12] 3901 	mov	a,_bp
      000FD5 24 0B            [12] 3902 	add	a,#0x0b
      000FD7 F8               [12] 3903 	mov	r0,a
      000FD8 86 82            [24] 3904 	mov	dpl,@r0
      000FDA 08               [12] 3905 	inc	r0
      000FDB 86 83            [24] 3906 	mov	dph,@r0
      000FDD 08               [12] 3907 	inc	r0
      000FDE 86 F0            [24] 3908 	mov	b,@r0
      000FE0 12r18r2D         [24] 3909 	lcall	_prvCopyDataFromQueue
      000FE3 15 81            [12] 3910 	dec	sp
      000FE5 15 81            [12] 3911 	dec	sp
      000FE7 15 81            [12] 3912 	dec	sp
      000FE9 D0 04            [24] 3913 	pop	ar4
      000FEB D0 05            [24] 3914 	pop	ar5
      000FED D0 06            [24] 3915 	pop	ar6
                           000FEF  3916 	C$queue.c$1759$5_0$307 ==.
                                   3917 ;	queue.c:1759: pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
      000FEF E5*00            [12] 3918 	mov	a,_bp
      000FF1 24 0B            [12] 3919 	add	a,#0x0b
      000FF3 F8               [12] 3920 	mov	r0,a
      000FF4 74 06            [12] 3921 	mov	a,#0x06
      000FF6 26               [12] 3922 	add	a,@r0
      000FF7 FA               [12] 3923 	mov	r2,a
      000FF8 74 00            [12] 3924 	mov	a,#0x00
      000FFA 08               [12] 3925 	inc	r0
      000FFB 36               [12] 3926 	addc	a,@r0
      000FFC FB               [12] 3927 	mov	r3,a
      000FFD 08               [12] 3928 	inc	r0
      000FFE 86 07            [24] 3929 	mov	ar7,@r0
      001000 74 03            [12] 3930 	mov	a,#0x03
      001002 2A               [12] 3931 	add	a,r2
      001003 FA               [12] 3932 	mov	r2,a
      001004 74 00            [12] 3933 	mov	a,#0x00
      001006 3B               [12] 3934 	addc	a,r3
      001007 FB               [12] 3935 	mov	r3,a
      001008 8A 82            [24] 3936 	mov	dpl,r2
      00100A 8B 83            [24] 3937 	mov	dph,r3
      00100C 8F F0            [24] 3938 	mov	b,r7
      00100E EE               [12] 3939 	mov	a,r6
      00100F 12r00r00         [24] 3940 	lcall	__gptrput
      001012 A3               [24] 3941 	inc	dptr
      001013 ED               [12] 3942 	mov	a,r5
      001014 12r00r00         [24] 3943 	lcall	__gptrput
      001017 A3               [24] 3944 	inc	dptr
      001018 EC               [12] 3945 	mov	a,r4
      001019 12r00r00         [24] 3946 	lcall	__gptrput
                           00101C  3947 	C$queue.c$1763$5_0$307 ==.
                                   3948 ;	queue.c:1763: if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
      00101C E5*00            [12] 3949 	mov	a,_bp
      00101E 24 0B            [12] 3950 	add	a,#0x0b
      001020 F8               [12] 3951 	mov	r0,a
      001021 74 18            [12] 3952 	mov	a,#0x18
      001023 26               [12] 3953 	add	a,@r0
      001024 FA               [12] 3954 	mov	r2,a
      001025 74 00            [12] 3955 	mov	a,#0x00
      001027 08               [12] 3956 	inc	r0
      001028 36               [12] 3957 	addc	a,@r0
      001029 FB               [12] 3958 	mov	r3,a
      00102A 08               [12] 3959 	inc	r0
      00102B 86 07            [24] 3960 	mov	ar7,@r0
      00102D 8A 82            [24] 3961 	mov	dpl,r2
      00102F 8B 83            [24] 3962 	mov	dph,r3
      001031 8F F0            [24] 3963 	mov	b,r7
      001033 12r00r00         [24] 3964 	lcall	__gptrget
      001036 70 03            [24] 3965 	jnz	00179$
      001038 02r10r55         [24] 3966 	ljmp	00104$
      00103B                       3967 00179$:
                           00103B  3968 	C$queue.c$1765$6_0$308 ==.
                                   3969 ;	queue.c:1765: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
      00103B E5*00            [12] 3970 	mov	a,_bp
      00103D 24 0B            [12] 3971 	add	a,#0x0b
      00103F F8               [12] 3972 	mov	r0,a
      001040 74 18            [12] 3973 	mov	a,#0x18
      001042 26               [12] 3974 	add	a,@r0
      001043 FA               [12] 3975 	mov	r2,a
      001044 74 00            [12] 3976 	mov	a,#0x00
      001046 08               [12] 3977 	inc	r0
      001047 36               [12] 3978 	addc	a,@r0
      001048 FB               [12] 3979 	mov	r3,a
      001049 08               [12] 3980 	inc	r0
      00104A 86 07            [24] 3981 	mov	ar7,@r0
      00104C 8A 82            [24] 3982 	mov	dpl,r2
      00104E 8B 83            [24] 3983 	mov	dph,r3
      001050 8F F0            [24] 3984 	mov	b,r7
      001052 12r00r00         [24] 3985 	lcall	_xTaskRemoveFromEventList
      001055                       3986 00104$:
                           001055  3987 	C$queue.c$1780$5_0$307 ==.
                                   3988 ;	queue.c:1780: taskEXIT_CRITICAL();
      001055 D0 E0            [24] 3989 	pop ACC 
      001057 53 E0 80         [24] 3990 	anl	_ACC,#0x80
      00105A E5 E0            [12] 3991 	mov	a,_ACC
      00105C 42 A8            [12] 3992 	orl	_IE,a
      00105E D0 E0            [24] 3993 	pop ACC 
                           001060  3994 	C$queue.c$1781$5_0$307 ==.
                                   3995 ;	queue.c:1781: return pdPASS;
      001060 75 82 01         [24] 3996 	mov	dpl,#0x01
      001063 02r12r62         [24] 3997 	ljmp	00130$
      001066                       3998 00111$:
                           001066  3999 	C$queue.c$1785$5_0$312 ==.
                                   4000 ;	queue.c:1785: if( xTicksToWait == ( TickType_t ) 0 )
      001066 E5*00            [12] 4001 	mov	a,_bp
      001068 24 F9            [12] 4002 	add	a,#0xf9
      00106A F8               [12] 4003 	mov	r0,a
      00106B E6               [12] 4004 	mov	a,@r0
      00106C 08               [12] 4005 	inc	r0
      00106D 46               [12] 4006 	orl	a,@r0
      00106E 60 03            [24] 4007 	jz	00180$
      001070 02r10r84         [24] 4008 	ljmp	00108$
      001073                       4009 00180$:
                           001073  4010 	C$queue.c$1789$6_0$313 ==.
                                   4011 ;	queue.c:1789: taskEXIT_CRITICAL();
      001073 D0 E0            [24] 4012 	pop ACC 
      001075 53 E0 80         [24] 4013 	anl	_ACC,#0x80
      001078 E5 E0            [12] 4014 	mov	a,_ACC
      00107A 42 A8            [12] 4015 	orl	_IE,a
      00107C D0 E0            [24] 4016 	pop ACC 
                           00107E  4017 	C$queue.c$1791$6_0$313 ==.
                                   4018 ;	queue.c:1791: return errQUEUE_EMPTY;
      00107E 75 82 00         [24] 4019 	mov	dpl,#0x00
      001081 02r12r62         [24] 4020 	ljmp	00130$
      001084                       4021 00108$:
                           001084  4022 	C$queue.c$1793$5_0$312 ==.
                                   4023 ;	queue.c:1793: else if( xEntryTimeSet == pdFALSE )
      001084 EC               [12] 4024 	mov	a,r4
      001085 60 03            [24] 4025 	jz	00181$
      001087 02r10r9F         [24] 4026 	ljmp	00112$
      00108A                       4027 00181$:
                           00108A  4028 	C$queue.c$1798$6_0$314 ==.
                                   4029 ;	queue.c:1798: vTaskInternalSetTimeOutState( &xTimeOut );
      00108A 8E 02            [24] 4030 	mov	ar2,r6
      00108C 7B 00            [12] 4031 	mov	r3,#0x00
      00108E 7F 40            [12] 4032 	mov	r7,#0x40
      001090 8A 82            [24] 4033 	mov	dpl,r2
      001092 8B 83            [24] 4034 	mov	dph,r3
      001094 8F F0            [24] 4035 	mov	b,r7
      001096 C0 06            [24] 4036 	push	ar6
      001098 12r00r00         [24] 4037 	lcall	_vTaskInternalSetTimeOutState
      00109B D0 06            [24] 4038 	pop	ar6
                           00109D  4039 	C$queue.c$1799$6_0$314 ==.
                                   4040 ;	queue.c:1799: xEntryTimeSet = pdTRUE;
      00109D 7C 01            [12] 4041 	mov	r4,#0x01
      00109F                       4042 00112$:
                           00109F  4043 	C$queue.c$1808$2_0$303 ==.
                                   4044 ;	queue.c:1808: taskEXIT_CRITICAL();
      00109F D0 E0            [24] 4045 	pop ACC 
      0010A1 53 E0 80         [24] 4046 	anl	_ACC,#0x80
      0010A4 E5 E0            [12] 4047 	mov	a,_ACC
      0010A6 42 A8            [12] 4048 	orl	_IE,a
      0010A8 D0 E0            [24] 4049 	pop ACC 
                           0010AA  4050 	C$queue.c$1813$3_0$305 ==.
                                   4051 ;	queue.c:1813: vTaskSuspendAll();
      0010AA C0 06            [24] 4052 	push	ar6
      0010AC C0 04            [24] 4053 	push	ar4
      0010AE 12r00r00         [24] 4054 	lcall	_vTaskSuspendAll
      0010B1 D0 04            [24] 4055 	pop	ar4
      0010B3 D0 06            [24] 4056 	pop	ar6
                           0010B5  4057 	C$queue.c$1814$3_0$305 ==.
                                   4058 ;	queue.c:1814: prvLockQueue( pxQueue );
      0010B5 C0 E0            [24] 4059 	push ACC 
      0010B7 C0 A8            [24] 4060 	push IE 
                                   4061 ;	assignBit
      0010B9 C2 AF            [12] 4062 	clr	_EA
      0010BB E5*00            [12] 4063 	mov	a,_bp
      0010BD 24 0B            [12] 4064 	add	a,#0x0b
      0010BF F8               [12] 4065 	mov	r0,a
      0010C0 74 27            [12] 4066 	mov	a,#0x27
      0010C2 26               [12] 4067 	add	a,@r0
      0010C3 FA               [12] 4068 	mov	r2,a
      0010C4 74 00            [12] 4069 	mov	a,#0x00
      0010C6 08               [12] 4070 	inc	r0
      0010C7 36               [12] 4071 	addc	a,@r0
      0010C8 FB               [12] 4072 	mov	r3,a
      0010C9 08               [12] 4073 	inc	r0
      0010CA 86 07            [24] 4074 	mov	ar7,@r0
      0010CC 8A 82            [24] 4075 	mov	dpl,r2
      0010CE 8B 83            [24] 4076 	mov	dph,r3
      0010D0 8F F0            [24] 4077 	mov	b,r7
      0010D2 12r00r00         [24] 4078 	lcall	__gptrget
      0010D5 FD               [12] 4079 	mov	r5,a
      0010D6 BD FF 02         [24] 4080 	cjne	r5,#0xff,00182$
      0010D9 80 03            [24] 4081 	sjmp	00183$
      0010DB                       4082 00182$:
      0010DB 02r10rE9         [24] 4083 	ljmp	00114$
      0010DE                       4084 00183$:
      0010DE 8A 82            [24] 4085 	mov	dpl,r2
      0010E0 8B 83            [24] 4086 	mov	dph,r3
      0010E2 8F F0            [24] 4087 	mov	b,r7
      0010E4 74 00            [12] 4088 	mov	a,#0x00
      0010E6 12r00r00         [24] 4089 	lcall	__gptrput
      0010E9                       4090 00114$:
      0010E9 E5*00            [12] 4091 	mov	a,_bp
      0010EB 24 0B            [12] 4092 	add	a,#0x0b
      0010ED F8               [12] 4093 	mov	r0,a
      0010EE 74 28            [12] 4094 	mov	a,#0x28
      0010F0 26               [12] 4095 	add	a,@r0
      0010F1 FA               [12] 4096 	mov	r2,a
      0010F2 74 00            [12] 4097 	mov	a,#0x00
      0010F4 08               [12] 4098 	inc	r0
      0010F5 36               [12] 4099 	addc	a,@r0
      0010F6 FB               [12] 4100 	mov	r3,a
      0010F7 08               [12] 4101 	inc	r0
      0010F8 86 07            [24] 4102 	mov	ar7,@r0
      0010FA 8A 82            [24] 4103 	mov	dpl,r2
      0010FC 8B 83            [24] 4104 	mov	dph,r3
      0010FE 8F F0            [24] 4105 	mov	b,r7
      001100 12r00r00         [24] 4106 	lcall	__gptrget
      001103 FD               [12] 4107 	mov	r5,a
      001104 BD FF 02         [24] 4108 	cjne	r5,#0xff,00184$
      001107 80 03            [24] 4109 	sjmp	00185$
      001109                       4110 00184$:
      001109 02r11r17         [24] 4111 	ljmp	00116$
      00110C                       4112 00185$:
      00110C 8A 82            [24] 4113 	mov	dpl,r2
      00110E 8B 83            [24] 4114 	mov	dph,r3
      001110 8F F0            [24] 4115 	mov	b,r7
      001112 74 00            [12] 4116 	mov	a,#0x00
      001114 12r00r00         [24] 4117 	lcall	__gptrput
      001117                       4118 00116$:
      001117 C0 04            [24] 4119 	push	ar4
      001119 D0 E0            [24] 4120 	pop ACC 
      00111B 53 E0 80         [24] 4121 	anl	_ACC,#0x80
      00111E E5 E0            [12] 4122 	mov	a,_ACC
      001120 42 A8            [12] 4123 	orl	_IE,a
      001122 D0 E0            [24] 4124 	pop ACC 
                           001124  4125 	C$queue.c$1817$3_0$305 ==.
                                   4126 ;	queue.c:1817: if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
      001124 E5*00            [12] 4127 	mov	a,_bp
      001126 24 F9            [12] 4128 	add	a,#0xf9
      001128 FF               [12] 4129 	mov	r7,a
      001129 A8*00            [24] 4130 	mov	r0,_bp
      00112B 08               [12] 4131 	inc	r0
      00112C 08               [12] 4132 	inc	r0
      00112D A6 07            [24] 4133 	mov	@r0,ar7
      00112F 08               [12] 4134 	inc	r0
      001130 76 00            [12] 4135 	mov	@r0,#0x00
      001132 08               [12] 4136 	inc	r0
      001133 76 40            [12] 4137 	mov	@r0,#0x40
      001135 A8*00            [24] 4138 	mov	r0,_bp
      001137 08               [12] 4139 	inc	r0
      001138 86 04            [24] 4140 	mov	ar4,@r0
      00113A 7D 00            [12] 4141 	mov	r5,#0x00
      00113C 7F 40            [12] 4142 	mov	r7,#0x40
      00113E C0 06            [24] 4143 	push	ar6
      001140 C0 04            [24] 4144 	push	ar4
      001142 A8*00            [24] 4145 	mov	r0,_bp
      001144 08               [12] 4146 	inc	r0
      001145 08               [12] 4147 	inc	r0
      001146 E6               [12] 4148 	mov	a,@r0
      001147 C0 E0            [24] 4149 	push	acc
      001149 08               [12] 4150 	inc	r0
      00114A E6               [12] 4151 	mov	a,@r0
      00114B C0 E0            [24] 4152 	push	acc
      00114D 08               [12] 4153 	inc	r0
      00114E E6               [12] 4154 	mov	a,@r0
      00114F C0 E0            [24] 4155 	push	acc
      001151 8C 82            [24] 4156 	mov	dpl,r4
      001153 8D 83            [24] 4157 	mov	dph,r5
      001155 8F F0            [24] 4158 	mov	b,r7
      001157 12r00r00         [24] 4159 	lcall	_xTaskCheckForTimeOut
      00115A AF 82            [24] 4160 	mov	r7,dpl
      00115C 15 81            [12] 4161 	dec	sp
      00115E 15 81            [12] 4162 	dec	sp
      001160 15 81            [12] 4163 	dec	sp
      001162 D0 04            [24] 4164 	pop	ar4
      001164 D0 06            [24] 4165 	pop	ar6
      001166 D0 04            [24] 4166 	pop	ar4
      001168 EF               [12] 4167 	mov	a,r7
      001169 60 03            [24] 4168 	jz	00186$
      00116B 02r12r1D         [24] 4169 	ljmp	00125$
      00116E                       4170 00186$:
                           00116E  4171 	C$queue.c$1821$4_0$319 ==.
                                   4172 ;	queue.c:1821: if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      00116E E5*00            [12] 4173 	mov	a,_bp
      001170 24 0B            [12] 4174 	add	a,#0x0b
      001172 F8               [12] 4175 	mov	r0,a
      001173 86 82            [24] 4176 	mov	dpl,@r0
      001175 08               [12] 4177 	inc	r0
      001176 86 83            [24] 4178 	mov	dph,@r0
      001178 08               [12] 4179 	inc	r0
      001179 86 F0            [24] 4180 	mov	b,@r0
      00117B C0 06            [24] 4181 	push	ar6
      00117D C0 04            [24] 4182 	push	ar4
      00117F 12r1Br1C         [24] 4183 	lcall	_prvIsQueueEmpty
      001182 E5 82            [12] 4184 	mov	a,dpl
      001184 D0 04            [24] 4185 	pop	ar4
      001186 D0 06            [24] 4186 	pop	ar6
      001188 70 03            [24] 4187 	jnz	00187$
      00118A 02r11rF7         [24] 4188 	ljmp	00120$
      00118D                       4189 00187$:
                           00118D  4190 	C$queue.c$1824$5_0$320 ==.
                                   4191 ;	queue.c:1824: vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
      00118D E5*00            [12] 4192 	mov	a,_bp
      00118F 24 0B            [12] 4193 	add	a,#0x0b
      001191 F8               [12] 4194 	mov	r0,a
      001192 74 18            [12] 4195 	mov	a,#0x18
      001194 26               [12] 4196 	add	a,@r0
      001195 FB               [12] 4197 	mov	r3,a
      001196 74 00            [12] 4198 	mov	a,#0x00
      001198 08               [12] 4199 	inc	r0
      001199 36               [12] 4200 	addc	a,@r0
      00119A FD               [12] 4201 	mov	r5,a
      00119B 08               [12] 4202 	inc	r0
      00119C 86 07            [24] 4203 	mov	ar7,@r0
      00119E C0 06            [24] 4204 	push	ar6
      0011A0 C0 04            [24] 4205 	push	ar4
      0011A2 E5*00            [12] 4206 	mov	a,_bp
      0011A4 24 F9            [12] 4207 	add	a,#0xf9
      0011A6 F8               [12] 4208 	mov	r0,a
      0011A7 E6               [12] 4209 	mov	a,@r0
      0011A8 C0 E0            [24] 4210 	push	acc
      0011AA 08               [12] 4211 	inc	r0
      0011AB E6               [12] 4212 	mov	a,@r0
      0011AC C0 E0            [24] 4213 	push	acc
      0011AE 8B 82            [24] 4214 	mov	dpl,r3
      0011B0 8D 83            [24] 4215 	mov	dph,r5
      0011B2 8F F0            [24] 4216 	mov	b,r7
      0011B4 12r00r00         [24] 4217 	lcall	_vTaskPlaceOnEventList
      0011B7 15 81            [12] 4218 	dec	sp
      0011B9 15 81            [12] 4219 	dec	sp
      0011BB D0 04            [24] 4220 	pop	ar4
      0011BD D0 06            [24] 4221 	pop	ar6
                           0011BF  4222 	C$queue.c$1825$5_0$320 ==.
                                   4223 ;	queue.c:1825: prvUnlockQueue( pxQueue );
      0011BF E5*00            [12] 4224 	mov	a,_bp
      0011C1 24 0B            [12] 4225 	add	a,#0x0b
      0011C3 F8               [12] 4226 	mov	r0,a
      0011C4 86 82            [24] 4227 	mov	dpl,@r0
      0011C6 08               [12] 4228 	inc	r0
      0011C7 86 83            [24] 4229 	mov	dph,@r0
      0011C9 08               [12] 4230 	inc	r0
      0011CA 86 F0            [24] 4231 	mov	b,@r0
      0011CC C0 06            [24] 4232 	push	ar6
      0011CE C0 04            [24] 4233 	push	ar4
      0011D0 12r19r84         [24] 4234 	lcall	_prvUnlockQueue
      0011D3 D0 04            [24] 4235 	pop	ar4
      0011D5 D0 06            [24] 4236 	pop	ar6
                           0011D7  4237 	C$queue.c$1827$5_0$320 ==.
                                   4238 ;	queue.c:1827: if( xTaskResumeAll() == pdFALSE )
      0011D7 C0 06            [24] 4239 	push	ar6
      0011D9 C0 04            [24] 4240 	push	ar4
      0011DB 12r00r00         [24] 4241 	lcall	_xTaskResumeAll
      0011DE E5 82            [12] 4242 	mov	a,dpl
      0011E0 D0 04            [24] 4243 	pop	ar4
      0011E2 D0 06            [24] 4244 	pop	ar6
      0011E4 60 03            [24] 4245 	jz	00188$
      0011E6 02r0Fr75         [24] 4246 	ljmp	00128$
      0011E9                       4247 00188$:
                           0011E9  4248 	C$queue.c$1829$6_0$321 ==.
                                   4249 ;	queue.c:1829: portYIELD_WITHIN_API();
      0011E9 C0 06            [24] 4250 	push	ar6
      0011EB C0 04            [24] 4251 	push	ar4
      0011ED 12r00r00         [24] 4252 	lcall	_vPortYield
      0011F0 D0 04            [24] 4253 	pop	ar4
      0011F2 D0 06            [24] 4254 	pop	ar6
      0011F4 02r0Fr75         [24] 4255 	ljmp	00128$
      0011F7                       4256 00120$:
                           0011F7  4257 	C$queue.c$1840$5_0$323 ==.
                                   4258 ;	queue.c:1840: prvUnlockQueue( pxQueue );
      0011F7 E5*00            [12] 4259 	mov	a,_bp
      0011F9 24 0B            [12] 4260 	add	a,#0x0b
      0011FB F8               [12] 4261 	mov	r0,a
      0011FC 86 82            [24] 4262 	mov	dpl,@r0
      0011FE 08               [12] 4263 	inc	r0
      0011FF 86 83            [24] 4264 	mov	dph,@r0
      001201 08               [12] 4265 	inc	r0
      001202 86 F0            [24] 4266 	mov	b,@r0
      001204 C0 06            [24] 4267 	push	ar6
      001206 C0 04            [24] 4268 	push	ar4
      001208 12r19r84         [24] 4269 	lcall	_prvUnlockQueue
      00120B D0 04            [24] 4270 	pop	ar4
      00120D D0 06            [24] 4271 	pop	ar6
                           00120F  4272 	C$queue.c$1841$5_0$323 ==.
                                   4273 ;	queue.c:1841: ( void ) xTaskResumeAll();
      00120F C0 06            [24] 4274 	push	ar6
      001211 C0 04            [24] 4275 	push	ar4
      001213 12r00r00         [24] 4276 	lcall	_xTaskResumeAll
      001216 D0 04            [24] 4277 	pop	ar4
      001218 D0 06            [24] 4278 	pop	ar6
      00121A 02r0Fr75         [24] 4279 	ljmp	00128$
      00121D                       4280 00125$:
                           00121D  4281 	C$queue.c$1848$4_0$324 ==.
                                   4282 ;	queue.c:1848: prvUnlockQueue( pxQueue );
      00121D E5*00            [12] 4283 	mov	a,_bp
      00121F 24 0B            [12] 4284 	add	a,#0x0b
      001221 F8               [12] 4285 	mov	r0,a
      001222 86 82            [24] 4286 	mov	dpl,@r0
      001224 08               [12] 4287 	inc	r0
      001225 86 83            [24] 4288 	mov	dph,@r0
      001227 08               [12] 4289 	inc	r0
      001228 86 F0            [24] 4290 	mov	b,@r0
      00122A C0 06            [24] 4291 	push	ar6
      00122C C0 04            [24] 4292 	push	ar4
      00122E 12r19r84         [24] 4293 	lcall	_prvUnlockQueue
      001231 D0 04            [24] 4294 	pop	ar4
      001233 D0 06            [24] 4295 	pop	ar6
                           001235  4296 	C$queue.c$1849$4_0$324 ==.
                                   4297 ;	queue.c:1849: ( void ) xTaskResumeAll();
      001235 C0 06            [24] 4298 	push	ar6
      001237 C0 04            [24] 4299 	push	ar4
      001239 12r00r00         [24] 4300 	lcall	_xTaskResumeAll
      00123C D0 04            [24] 4301 	pop	ar4
      00123E D0 06            [24] 4302 	pop	ar6
                           001240  4303 	C$queue.c$1851$4_0$324 ==.
                                   4304 ;	queue.c:1851: if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
      001240 E5*00            [12] 4305 	mov	a,_bp
      001242 24 0B            [12] 4306 	add	a,#0x0b
      001244 F8               [12] 4307 	mov	r0,a
      001245 86 82            [24] 4308 	mov	dpl,@r0
      001247 08               [12] 4309 	inc	r0
      001248 86 83            [24] 4310 	mov	dph,@r0
      00124A 08               [12] 4311 	inc	r0
      00124B 86 F0            [24] 4312 	mov	b,@r0
      00124D C0 06            [24] 4313 	push	ar6
      00124F C0 04            [24] 4314 	push	ar4
      001251 12r1Br1C         [24] 4315 	lcall	_prvIsQueueEmpty
      001254 E5 82            [12] 4316 	mov	a,dpl
      001256 D0 04            [24] 4317 	pop	ar4
      001258 D0 06            [24] 4318 	pop	ar6
      00125A 70 03            [24] 4319 	jnz	00189$
      00125C 02r0Fr75         [24] 4320 	ljmp	00128$
      00125F                       4321 00189$:
                           00125F  4322 	C$queue.c$1854$5_0$325 ==.
                                   4323 ;	queue.c:1854: return errQUEUE_EMPTY;
      00125F 75 82 00         [24] 4324 	mov	dpl,#0x00
      001262                       4325 00130$:
                           001262  4326 	C$queue.c$1862$2_0$303 ==.
                                   4327 ;	queue.c:1862: }
      001262 85*00 81         [24] 4328 	mov	sp,_bp
      001265 D0*00            [24] 4329 	pop	_bp
                           001267  4330 	C$queue.c$1862$2_0$303 ==.
                           001267  4331 	XG$xQueuePeek$0$0 ==.
      001267 22               [24] 4332 	ret
                                   4333 ;------------------------------------------------------------
                                   4334 ;Allocation info for local variables in function 'xQueueReceiveFromISR'
                                   4335 ;------------------------------------------------------------
                                   4336 ;pvBuffer                  Allocated to stack - _bp -5
                                   4337 ;pxHigherPriorityTaskWoken Allocated to stack - _bp -8
                                   4338 ;xQueue                    Allocated to stack - _bp +1
                                   4339 ;xReturn                   Allocated to registers r7 
                                   4340 ;uxSavedInterruptStatus    Allocated to registers 
                                   4341 ;pxQueue                   Allocated to registers 
                                   4342 ;uxMessagesWaiting         Allocated to registers r4 
                                   4343 ;cRxLock                   Allocated to registers r7 
                                   4344 ;------------------------------------------------------------
                           001268  4345 	G$xQueueReceiveFromISR$0$0 ==.
                           001268  4346 	C$queue.c$1865$2_0$328 ==.
                                   4347 ;	queue.c:1865: BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                   4348 ;	-----------------------------------------
                                   4349 ;	 function xQueueReceiveFromISR
                                   4350 ;	-----------------------------------------
      001268                       4351 _xQueueReceiveFromISR:
      001268 C0*00            [24] 4352 	push	_bp
      00126A 85 81*00         [24] 4353 	mov	_bp,sp
      00126D C0 82            [24] 4354 	push	dpl
      00126F C0 83            [24] 4355 	push	dph
      001271 C0 F0            [24] 4356 	push	b
                           001273  4357 	C$queue.c$1894$2_0$329 ==.
                                   4358 ;	queue.c:1894: const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
      001273 A8*00            [24] 4359 	mov	r0,_bp
      001275 08               [12] 4360 	inc	r0
      001276 74 24            [12] 4361 	mov	a,#0x24
      001278 26               [12] 4362 	add	a,@r0
      001279 FA               [12] 4363 	mov	r2,a
      00127A 74 00            [12] 4364 	mov	a,#0x00
      00127C 08               [12] 4365 	inc	r0
      00127D 36               [12] 4366 	addc	a,@r0
      00127E FB               [12] 4367 	mov	r3,a
      00127F 08               [12] 4368 	inc	r0
      001280 86 04            [24] 4369 	mov	ar4,@r0
      001282 8A 82            [24] 4370 	mov	dpl,r2
      001284 8B 83            [24] 4371 	mov	dph,r3
      001286 8C F0            [24] 4372 	mov	b,r4
      001288 12r00r00         [24] 4373 	lcall	__gptrget
      00128B FA               [12] 4374 	mov	r2,a
      00128C 8A 04            [24] 4375 	mov	ar4,r2
                           00128E  4376 	C$queue.c$1897$2_0$329 ==.
                                   4377 ;	queue.c:1897: if( uxMessagesWaiting > ( UBaseType_t ) 0 )
      00128E EA               [12] 4378 	mov	a,r2
      00128F 70 03            [24] 4379 	jnz	00137$
      001291 02r13r7E         [24] 4380 	ljmp	00111$
      001294                       4381 00137$:
                           001294  4382 	C$queue.c$1899$3_0$330 ==.
                                   4383 ;	queue.c:1899: const int8_t cRxLock = pxQueue->cRxLock;
      001294 A8*00            [24] 4384 	mov	r0,_bp
      001296 08               [12] 4385 	inc	r0
      001297 74 27            [12] 4386 	mov	a,#0x27
      001299 26               [12] 4387 	add	a,@r0
      00129A FA               [12] 4388 	mov	r2,a
      00129B 74 00            [12] 4389 	mov	a,#0x00
      00129D 08               [12] 4390 	inc	r0
      00129E 36               [12] 4391 	addc	a,@r0
      00129F FB               [12] 4392 	mov	r3,a
      0012A0 08               [12] 4393 	inc	r0
      0012A1 86 07            [24] 4394 	mov	ar7,@r0
      0012A3 8A 82            [24] 4395 	mov	dpl,r2
      0012A5 8B 83            [24] 4396 	mov	dph,r3
      0012A7 8F F0            [24] 4397 	mov	b,r7
      0012A9 12r00r00         [24] 4398 	lcall	__gptrget
      0012AC FF               [12] 4399 	mov	r7,a
                           0012AD  4400 	C$queue.c$1903$3_0$330 ==.
                                   4401 ;	queue.c:1903: prvCopyDataFromQueue( pxQueue, pvBuffer );
      0012AD C0 07            [24] 4402 	push	ar7
      0012AF C0 04            [24] 4403 	push	ar4
      0012B1 E5*00            [12] 4404 	mov	a,_bp
      0012B3 24 FB            [12] 4405 	add	a,#0xfb
      0012B5 F8               [12] 4406 	mov	r0,a
      0012B6 E6               [12] 4407 	mov	a,@r0
      0012B7 C0 E0            [24] 4408 	push	acc
      0012B9 08               [12] 4409 	inc	r0
      0012BA E6               [12] 4410 	mov	a,@r0
      0012BB C0 E0            [24] 4411 	push	acc
      0012BD 08               [12] 4412 	inc	r0
      0012BE E6               [12] 4413 	mov	a,@r0
      0012BF C0 E0            [24] 4414 	push	acc
      0012C1 A8*00            [24] 4415 	mov	r0,_bp
      0012C3 08               [12] 4416 	inc	r0
      0012C4 86 82            [24] 4417 	mov	dpl,@r0
      0012C6 08               [12] 4418 	inc	r0
      0012C7 86 83            [24] 4419 	mov	dph,@r0
      0012C9 08               [12] 4420 	inc	r0
      0012CA 86 F0            [24] 4421 	mov	b,@r0
      0012CC 12r18r2D         [24] 4422 	lcall	_prvCopyDataFromQueue
      0012CF 15 81            [12] 4423 	dec	sp
      0012D1 15 81            [12] 4424 	dec	sp
      0012D3 15 81            [12] 4425 	dec	sp
      0012D5 D0 04            [24] 4426 	pop	ar4
      0012D7 D0 07            [24] 4427 	pop	ar7
                           0012D9  4428 	C$queue.c$1904$3_0$330 ==.
                                   4429 ;	queue.c:1904: pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
      0012D9 A8*00            [24] 4430 	mov	r0,_bp
      0012DB 08               [12] 4431 	inc	r0
      0012DC 74 24            [12] 4432 	mov	a,#0x24
      0012DE 26               [12] 4433 	add	a,@r0
      0012DF FB               [12] 4434 	mov	r3,a
      0012E0 74 00            [12] 4435 	mov	a,#0x00
      0012E2 08               [12] 4436 	inc	r0
      0012E3 36               [12] 4437 	addc	a,@r0
      0012E4 FD               [12] 4438 	mov	r5,a
      0012E5 08               [12] 4439 	inc	r0
      0012E6 86 06            [24] 4440 	mov	ar6,@r0
      0012E8 1C               [12] 4441 	dec	r4
      0012E9 8B 82            [24] 4442 	mov	dpl,r3
      0012EB 8D 83            [24] 4443 	mov	dph,r5
      0012ED 8E F0            [24] 4444 	mov	b,r6
      0012EF EC               [12] 4445 	mov	a,r4
      0012F0 12r00r00         [24] 4446 	lcall	__gptrput
                           0012F3  4447 	C$queue.c$1910$3_0$330 ==.
                                   4448 ;	queue.c:1910: if( cRxLock == queueUNLOCKED )
      0012F3 BF FF 02         [24] 4449 	cjne	r7,#0xff,00138$
      0012F6 80 03            [24] 4450 	sjmp	00139$
      0012F8                       4451 00138$:
      0012F8 02r13r5F         [24] 4452 	ljmp	00108$
      0012FB                       4453 00139$:
                           0012FB  4454 	C$queue.c$1912$4_0$331 ==.
                                   4455 ;	queue.c:1912: if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
      0012FB A8*00            [24] 4456 	mov	r0,_bp
      0012FD 08               [12] 4457 	inc	r0
      0012FE 74 0C            [12] 4458 	mov	a,#0x0c
      001300 26               [12] 4459 	add	a,@r0
      001301 FC               [12] 4460 	mov	r4,a
      001302 74 00            [12] 4461 	mov	a,#0x00
      001304 08               [12] 4462 	inc	r0
      001305 36               [12] 4463 	addc	a,@r0
      001306 FD               [12] 4464 	mov	r5,a
      001307 08               [12] 4465 	inc	r0
      001308 86 06            [24] 4466 	mov	ar6,@r0
      00130A 8C 82            [24] 4467 	mov	dpl,r4
      00130C 8D 83            [24] 4468 	mov	dph,r5
      00130E 8E F0            [24] 4469 	mov	b,r6
      001310 12r00r00         [24] 4470 	lcall	__gptrget
      001313 70 03            [24] 4471 	jnz	00140$
      001315 02r13r79         [24] 4472 	ljmp	00109$
      001318                       4473 00140$:
                           001318  4474 	C$queue.c$1914$5_0$332 ==.
                                   4475 ;	queue.c:1914: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
      001318 A8*00            [24] 4476 	mov	r0,_bp
      00131A 08               [12] 4477 	inc	r0
      00131B 74 0C            [12] 4478 	mov	a,#0x0c
      00131D 26               [12] 4479 	add	a,@r0
      00131E FC               [12] 4480 	mov	r4,a
      00131F 74 00            [12] 4481 	mov	a,#0x00
      001321 08               [12] 4482 	inc	r0
      001322 36               [12] 4483 	addc	a,@r0
      001323 FD               [12] 4484 	mov	r5,a
      001324 08               [12] 4485 	inc	r0
      001325 86 06            [24] 4486 	mov	ar6,@r0
      001327 8C 82            [24] 4487 	mov	dpl,r4
      001329 8D 83            [24] 4488 	mov	dph,r5
      00132B 8E F0            [24] 4489 	mov	b,r6
      00132D 12r00r00         [24] 4490 	lcall	_xTaskRemoveFromEventList
      001330 E5 82            [12] 4491 	mov	a,dpl
      001332 70 03            [24] 4492 	jnz	00141$
      001334 02r13r79         [24] 4493 	ljmp	00109$
      001337                       4494 00141$:
                           001337  4495 	C$queue.c$1918$6_0$333 ==.
                                   4496 ;	queue.c:1918: if( pxHigherPriorityTaskWoken != NULL )
      001337 E5*00            [12] 4497 	mov	a,_bp
      001339 24 F8            [12] 4498 	add	a,#0xf8
      00133B F8               [12] 4499 	mov	r0,a
      00133C E6               [12] 4500 	mov	a,@r0
      00133D 08               [12] 4501 	inc	r0
      00133E 46               [12] 4502 	orl	a,@r0
      00133F 70 03            [24] 4503 	jnz	00142$
      001341 02r13r79         [24] 4504 	ljmp	00109$
      001344                       4505 00142$:
                           001344  4506 	C$queue.c$1920$7_0$334 ==.
                                   4507 ;	queue.c:1920: *pxHigherPriorityTaskWoken = pdTRUE;
      001344 E5*00            [12] 4508 	mov	a,_bp
      001346 24 F8            [12] 4509 	add	a,#0xf8
      001348 F8               [12] 4510 	mov	r0,a
      001349 86 04            [24] 4511 	mov	ar4,@r0
      00134B 08               [12] 4512 	inc	r0
      00134C 86 05            [24] 4513 	mov	ar5,@r0
      00134E 08               [12] 4514 	inc	r0
      00134F 86 06            [24] 4515 	mov	ar6,@r0
      001351 8C 82            [24] 4516 	mov	dpl,r4
      001353 8D 83            [24] 4517 	mov	dph,r5
      001355 8E F0            [24] 4518 	mov	b,r6
      001357 74 01            [12] 4519 	mov	a,#0x01
      001359 12r00r00         [24] 4520 	lcall	__gptrput
      00135C 02r13r79         [24] 4521 	ljmp	00109$
      00135F                       4522 00108$:
                           00135F  4523 	C$queue.c$1943$4_0$338 ==.
                                   4524 ;	queue.c:1943: pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
      00135F A8*00            [24] 4525 	mov	r0,_bp
      001361 08               [12] 4526 	inc	r0
      001362 74 27            [12] 4527 	mov	a,#0x27
      001364 26               [12] 4528 	add	a,@r0
      001365 FC               [12] 4529 	mov	r4,a
      001366 74 00            [12] 4530 	mov	a,#0x00
      001368 08               [12] 4531 	inc	r0
      001369 36               [12] 4532 	addc	a,@r0
      00136A FD               [12] 4533 	mov	r5,a
      00136B 08               [12] 4534 	inc	r0
      00136C 86 06            [24] 4535 	mov	ar6,@r0
      00136E 0F               [12] 4536 	inc	r7
      00136F 8C 82            [24] 4537 	mov	dpl,r4
      001371 8D 83            [24] 4538 	mov	dph,r5
      001373 8E F0            [24] 4539 	mov	b,r6
      001375 EF               [12] 4540 	mov	a,r7
      001376 12r00r00         [24] 4541 	lcall	__gptrput
      001379                       4542 00109$:
                           001379  4543 	C$queue.c$1946$3_0$330 ==.
                                   4544 ;	queue.c:1946: xReturn = pdPASS;
      001379 7F 01            [12] 4545 	mov	r7,#0x01
      00137B 02r13r80         [24] 4546 	ljmp	00112$
      00137E                       4547 00111$:
                           00137E  4548 	C$queue.c$1950$3_0$339 ==.
                                   4549 ;	queue.c:1950: xReturn = pdFAIL;
      00137E 7F 00            [12] 4550 	mov	r7,#0x00
      001380                       4551 00112$:
                           001380  4552 	C$queue.c$1956$1_0$328 ==.
                                   4553 ;	queue.c:1956: return xReturn;
      001380 8F 82            [24] 4554 	mov	dpl,r7
      001382                       4555 00113$:
                           001382  4556 	C$queue.c$1957$1_0$328 ==.
                                   4557 ;	queue.c:1957: }
      001382 85*00 81         [24] 4558 	mov	sp,_bp
      001385 D0*00            [24] 4559 	pop	_bp
                           001387  4560 	C$queue.c$1957$1_0$328 ==.
                           001387  4561 	XG$xQueueReceiveFromISR$0$0 ==.
      001387 22               [24] 4562 	ret
                                   4563 ;------------------------------------------------------------
                                   4564 ;Allocation info for local variables in function 'xQueuePeekFromISR'
                                   4565 ;------------------------------------------------------------
                                   4566 ;pvBuffer                  Allocated to stack - _bp -5
                                   4567 ;xQueue                    Allocated to registers r5 r6 r7 
                                   4568 ;xReturn                   Allocated to registers r7 
                                   4569 ;uxSavedInterruptStatus    Allocated to registers 
                                   4570 ;pcOriginalReadPosition    Allocated to registers r2 r3 r4 
                                   4571 ;pxQueue                   Allocated to registers 
                                   4572 ;------------------------------------------------------------
                           001388  4573 	G$xQueuePeekFromISR$0$0 ==.
                           001388  4574 	C$queue.c$1960$1_0$341 ==.
                                   4575 ;	queue.c:1960: BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
                                   4576 ;	-----------------------------------------
                                   4577 ;	 function xQueuePeekFromISR
                                   4578 ;	-----------------------------------------
      001388                       4579 _xQueuePeekFromISR:
      001388 C0*00            [24] 4580 	push	_bp
      00138A 85 81*00         [24] 4581 	mov	_bp,sp
      00138D AD 82            [24] 4582 	mov	r5,dpl
      00138F AE 83            [24] 4583 	mov	r6,dph
      001391 AF F0            [24] 4584 	mov	r7,b
                           001393  4585 	C$queue.c$1991$2_0$342 ==.
                                   4586 ;	queue.c:1991: if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
      001393 74 24            [12] 4587 	mov	a,#0x24
      001395 2D               [12] 4588 	add	a,r5
      001396 FA               [12] 4589 	mov	r2,a
      001397 74 00            [12] 4590 	mov	a,#0x00
      001399 3E               [12] 4591 	addc	a,r6
      00139A FB               [12] 4592 	mov	r3,a
      00139B 8F 04            [24] 4593 	mov	ar4,r7
      00139D 8A 82            [24] 4594 	mov	dpl,r2
      00139F 8B 83            [24] 4595 	mov	dph,r3
      0013A1 8C F0            [24] 4596 	mov	b,r4
      0013A3 12r00r00         [24] 4597 	lcall	__gptrget
      0013A6 70 03            [24] 4598 	jnz	00110$
      0013A8 02r14r31         [24] 4599 	ljmp	00102$
      0013AB                       4600 00110$:
                           0013AB  4601 	C$queue.c$1997$3_0$343 ==.
                                   4602 ;	queue.c:1997: pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
      0013AB 74 06            [12] 4603 	mov	a,#0x06
      0013AD 2D               [12] 4604 	add	a,r5
      0013AE FA               [12] 4605 	mov	r2,a
      0013AF 74 00            [12] 4606 	mov	a,#0x00
      0013B1 3E               [12] 4607 	addc	a,r6
      0013B2 FB               [12] 4608 	mov	r3,a
      0013B3 8F 04            [24] 4609 	mov	ar4,r7
      0013B5 74 03            [12] 4610 	mov	a,#0x03
      0013B7 2A               [12] 4611 	add	a,r2
      0013B8 FA               [12] 4612 	mov	r2,a
      0013B9 74 00            [12] 4613 	mov	a,#0x00
      0013BB 3B               [12] 4614 	addc	a,r3
      0013BC FB               [12] 4615 	mov	r3,a
      0013BD 8A 82            [24] 4616 	mov	dpl,r2
      0013BF 8B 83            [24] 4617 	mov	dph,r3
      0013C1 8C F0            [24] 4618 	mov	b,r4
      0013C3 12r00r00         [24] 4619 	lcall	__gptrget
      0013C6 FA               [12] 4620 	mov	r2,a
      0013C7 A3               [24] 4621 	inc	dptr
      0013C8 12r00r00         [24] 4622 	lcall	__gptrget
      0013CB FB               [12] 4623 	mov	r3,a
      0013CC A3               [24] 4624 	inc	dptr
      0013CD 12r00r00         [24] 4625 	lcall	__gptrget
      0013D0 FC               [12] 4626 	mov	r4,a
                           0013D1  4627 	C$queue.c$1998$3_0$343 ==.
                                   4628 ;	queue.c:1998: prvCopyDataFromQueue( pxQueue, pvBuffer );
      0013D1 C0 07            [24] 4629 	push	ar7
      0013D3 C0 06            [24] 4630 	push	ar6
      0013D5 C0 05            [24] 4631 	push	ar5
      0013D7 C0 04            [24] 4632 	push	ar4
      0013D9 C0 03            [24] 4633 	push	ar3
      0013DB C0 02            [24] 4634 	push	ar2
      0013DD E5*00            [12] 4635 	mov	a,_bp
      0013DF 24 FB            [12] 4636 	add	a,#0xfb
      0013E1 F8               [12] 4637 	mov	r0,a
      0013E2 E6               [12] 4638 	mov	a,@r0
      0013E3 C0 E0            [24] 4639 	push	acc
      0013E5 08               [12] 4640 	inc	r0
      0013E6 E6               [12] 4641 	mov	a,@r0
      0013E7 C0 E0            [24] 4642 	push	acc
      0013E9 08               [12] 4643 	inc	r0
      0013EA E6               [12] 4644 	mov	a,@r0
      0013EB C0 E0            [24] 4645 	push	acc
      0013ED 8D 82            [24] 4646 	mov	dpl,r5
      0013EF 8E 83            [24] 4647 	mov	dph,r6
      0013F1 8F F0            [24] 4648 	mov	b,r7
      0013F3 12r18r2D         [24] 4649 	lcall	_prvCopyDataFromQueue
      0013F6 15 81            [12] 4650 	dec	sp
      0013F8 15 81            [12] 4651 	dec	sp
      0013FA 15 81            [12] 4652 	dec	sp
      0013FC D0 02            [24] 4653 	pop	ar2
      0013FE D0 03            [24] 4654 	pop	ar3
      001400 D0 04            [24] 4655 	pop	ar4
      001402 D0 05            [24] 4656 	pop	ar5
      001404 D0 06            [24] 4657 	pop	ar6
      001406 D0 07            [24] 4658 	pop	ar7
                           001408  4659 	C$queue.c$1999$3_0$343 ==.
                                   4660 ;	queue.c:1999: pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
      001408 74 06            [12] 4661 	mov	a,#0x06
      00140A 2D               [12] 4662 	add	a,r5
      00140B FD               [12] 4663 	mov	r5,a
      00140C 74 00            [12] 4664 	mov	a,#0x00
      00140E 3E               [12] 4665 	addc	a,r6
      00140F FE               [12] 4666 	mov	r6,a
      001410 74 03            [12] 4667 	mov	a,#0x03
      001412 2D               [12] 4668 	add	a,r5
      001413 FD               [12] 4669 	mov	r5,a
      001414 74 00            [12] 4670 	mov	a,#0x00
      001416 3E               [12] 4671 	addc	a,r6
      001417 FE               [12] 4672 	mov	r6,a
      001418 8D 82            [24] 4673 	mov	dpl,r5
      00141A 8E 83            [24] 4674 	mov	dph,r6
      00141C 8F F0            [24] 4675 	mov	b,r7
      00141E EA               [12] 4676 	mov	a,r2
      00141F 12r00r00         [24] 4677 	lcall	__gptrput
      001422 A3               [24] 4678 	inc	dptr
      001423 EB               [12] 4679 	mov	a,r3
      001424 12r00r00         [24] 4680 	lcall	__gptrput
      001427 A3               [24] 4681 	inc	dptr
      001428 EC               [12] 4682 	mov	a,r4
      001429 12r00r00         [24] 4683 	lcall	__gptrput
                           00142C  4684 	C$queue.c$2001$3_0$343 ==.
                                   4685 ;	queue.c:2001: xReturn = pdPASS;
      00142C 7F 01            [12] 4686 	mov	r7,#0x01
      00142E 02r14r33         [24] 4687 	ljmp	00103$
      001431                       4688 00102$:
                           001431  4689 	C$queue.c$2005$3_0$344 ==.
                                   4690 ;	queue.c:2005: xReturn = pdFAIL;
      001431 7F 00            [12] 4691 	mov	r7,#0x00
      001433                       4692 00103$:
                           001433  4693 	C$queue.c$2011$1_0$341 ==.
                                   4694 ;	queue.c:2011: return xReturn;
      001433 8F 82            [24] 4695 	mov	dpl,r7
      001435                       4696 00104$:
                           001435  4697 	C$queue.c$2012$1_0$341 ==.
                                   4698 ;	queue.c:2012: }
      001435 D0*00            [24] 4699 	pop	_bp
                           001437  4700 	C$queue.c$2012$1_0$341 ==.
                           001437  4701 	XG$xQueuePeekFromISR$0$0 ==.
      001437 22               [24] 4702 	ret
                                   4703 ;------------------------------------------------------------
                                   4704 ;Allocation info for local variables in function 'uxQueueMessagesWaiting'
                                   4705 ;------------------------------------------------------------
                                   4706 ;xQueue                    Allocated to registers r5 r6 r7 
                                   4707 ;uxReturn                  Allocated to registers r5 
                                   4708 ;------------------------------------------------------------
                           001438  4709 	G$uxQueueMessagesWaiting$0$0 ==.
                           001438  4710 	C$queue.c$2015$1_0$346 ==.
                                   4711 ;	queue.c:2015: UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
                                   4712 ;	-----------------------------------------
                                   4713 ;	 function uxQueueMessagesWaiting
                                   4714 ;	-----------------------------------------
      001438                       4715 _uxQueueMessagesWaiting:
      001438 AD 82            [24] 4716 	mov	r5,dpl
      00143A AE 83            [24] 4717 	mov	r6,dph
      00143C AF F0            [24] 4718 	mov	r7,b
                           00143E  4719 	C$queue.c$2021$1_0$346 ==.
                                   4720 ;	queue.c:2021: taskENTER_CRITICAL();
      00143E C0 E0            [24] 4721 	push ACC 
      001440 C0 A8            [24] 4722 	push IE 
                                   4723 ;	assignBit
      001442 C2 AF            [12] 4724 	clr	_EA
                           001444  4725 	C$queue.c$2023$2_0$347 ==.
                                   4726 ;	queue.c:2023: uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
      001444 74 24            [12] 4727 	mov	a,#0x24
      001446 2D               [12] 4728 	add	a,r5
      001447 FD               [12] 4729 	mov	r5,a
      001448 74 00            [12] 4730 	mov	a,#0x00
      00144A 3E               [12] 4731 	addc	a,r6
      00144B FE               [12] 4732 	mov	r6,a
      00144C 8D 82            [24] 4733 	mov	dpl,r5
      00144E 8E 83            [24] 4734 	mov	dph,r6
      001450 8F F0            [24] 4735 	mov	b,r7
      001452 12r00r00         [24] 4736 	lcall	__gptrget
      001455 FD               [12] 4737 	mov	r5,a
                           001456  4738 	C$queue.c$2025$1_0$346 ==.
                                   4739 ;	queue.c:2025: taskEXIT_CRITICAL();
      001456 D0 E0            [24] 4740 	pop ACC 
      001458 53 E0 80         [24] 4741 	anl	_ACC,#0x80
      00145B E5 E0            [12] 4742 	mov	a,_ACC
      00145D 42 A8            [12] 4743 	orl	_IE,a
      00145F D0 E0            [24] 4744 	pop ACC 
                           001461  4745 	C$queue.c$2027$1_0$346 ==.
                                   4746 ;	queue.c:2027: return uxReturn;
      001461 8D 82            [24] 4747 	mov	dpl,r5
      001463                       4748 00101$:
                           001463  4749 	C$queue.c$2028$1_0$346 ==.
                                   4750 ;	queue.c:2028: } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
                           001463  4751 	C$queue.c$2028$1_0$346 ==.
                           001463  4752 	XG$uxQueueMessagesWaiting$0$0 ==.
      001463 22               [24] 4753 	ret
                                   4754 ;------------------------------------------------------------
                                   4755 ;Allocation info for local variables in function 'uxQueueSpacesAvailable'
                                   4756 ;------------------------------------------------------------
                                   4757 ;xQueue                    Allocated to registers r5 r6 r7 
                                   4758 ;uxReturn                  Allocated to registers r2 
                                   4759 ;pxQueue                   Allocated to registers 
                                   4760 ;------------------------------------------------------------
                           001464  4761 	G$uxQueueSpacesAvailable$0$0 ==.
                           001464  4762 	C$queue.c$2031$1_0$349 ==.
                                   4763 ;	queue.c:2031: UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
                                   4764 ;	-----------------------------------------
                                   4765 ;	 function uxQueueSpacesAvailable
                                   4766 ;	-----------------------------------------
      001464                       4767 _uxQueueSpacesAvailable:
      001464 AD 82            [24] 4768 	mov	r5,dpl
      001466 AE 83            [24] 4769 	mov	r6,dph
      001468 AF F0            [24] 4770 	mov	r7,b
                           00146A  4771 	C$queue.c$2038$1_0$349 ==.
                                   4772 ;	queue.c:2038: taskENTER_CRITICAL();
      00146A C0 E0            [24] 4773 	push ACC 
      00146C C0 A8            [24] 4774 	push IE 
                                   4775 ;	assignBit
      00146E C2 AF            [12] 4776 	clr	_EA
                           001470  4777 	C$queue.c$2040$2_0$350 ==.
                                   4778 ;	queue.c:2040: uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
      001470 74 25            [12] 4779 	mov	a,#0x25
      001472 2D               [12] 4780 	add	a,r5
      001473 FA               [12] 4781 	mov	r2,a
      001474 74 00            [12] 4782 	mov	a,#0x00
      001476 3E               [12] 4783 	addc	a,r6
      001477 FB               [12] 4784 	mov	r3,a
      001478 8F 04            [24] 4785 	mov	ar4,r7
      00147A 8A 82            [24] 4786 	mov	dpl,r2
      00147C 8B 83            [24] 4787 	mov	dph,r3
      00147E 8C F0            [24] 4788 	mov	b,r4
      001480 12r00r00         [24] 4789 	lcall	__gptrget
      001483 FA               [12] 4790 	mov	r2,a
      001484 74 24            [12] 4791 	mov	a,#0x24
      001486 2D               [12] 4792 	add	a,r5
      001487 FD               [12] 4793 	mov	r5,a
      001488 74 00            [12] 4794 	mov	a,#0x00
      00148A 3E               [12] 4795 	addc	a,r6
      00148B FE               [12] 4796 	mov	r6,a
      00148C 8D 82            [24] 4797 	mov	dpl,r5
      00148E 8E 83            [24] 4798 	mov	dph,r6
      001490 8F F0            [24] 4799 	mov	b,r7
      001492 12r00r00         [24] 4800 	lcall	__gptrget
      001495 FD               [12] 4801 	mov	r5,a
      001496 EA               [12] 4802 	mov	a,r2
      001497 C3               [12] 4803 	clr	c
      001498 9D               [12] 4804 	subb	a,r5
      001499 FA               [12] 4805 	mov	r2,a
                           00149A  4806 	C$queue.c$2042$1_0$349 ==.
                                   4807 ;	queue.c:2042: taskEXIT_CRITICAL();
      00149A D0 E0            [24] 4808 	pop ACC 
      00149C 53 E0 80         [24] 4809 	anl	_ACC,#0x80
      00149F E5 E0            [12] 4810 	mov	a,_ACC
      0014A1 42 A8            [12] 4811 	orl	_IE,a
      0014A3 D0 E0            [24] 4812 	pop ACC 
                           0014A5  4813 	C$queue.c$2044$1_0$349 ==.
                                   4814 ;	queue.c:2044: return uxReturn;
      0014A5 8A 82            [24] 4815 	mov	dpl,r2
      0014A7                       4816 00101$:
                           0014A7  4817 	C$queue.c$2045$1_0$349 ==.
                                   4818 ;	queue.c:2045: } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
                           0014A7  4819 	C$queue.c$2045$1_0$349 ==.
                           0014A7  4820 	XG$uxQueueSpacesAvailable$0$0 ==.
      0014A7 22               [24] 4821 	ret
                                   4822 ;------------------------------------------------------------
                                   4823 ;Allocation info for local variables in function 'uxQueueMessagesWaitingFromISR'
                                   4824 ;------------------------------------------------------------
                                   4825 ;xQueue                    Allocated to registers r5 r6 r7 
                                   4826 ;uxReturn                  Allocated to registers r5 
                                   4827 ;pxQueue                   Allocated to registers 
                                   4828 ;------------------------------------------------------------
                           0014A8  4829 	G$uxQueueMessagesWaitingFromISR$0$0 ==.
                           0014A8  4830 	C$queue.c$2048$1_0$352 ==.
                                   4831 ;	queue.c:2048: UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
                                   4832 ;	-----------------------------------------
                                   4833 ;	 function uxQueueMessagesWaitingFromISR
                                   4834 ;	-----------------------------------------
      0014A8                       4835 _uxQueueMessagesWaitingFromISR:
      0014A8 AD 82            [24] 4836 	mov	r5,dpl
      0014AA AE 83            [24] 4837 	mov	r6,dph
      0014AC AF F0            [24] 4838 	mov	r7,b
                           0014AE  4839 	C$queue.c$2054$1_0$352 ==.
                                   4840 ;	queue.c:2054: uxReturn = pxQueue->uxMessagesWaiting;
      0014AE 74 24            [12] 4841 	mov	a,#0x24
      0014B0 2D               [12] 4842 	add	a,r5
      0014B1 FD               [12] 4843 	mov	r5,a
      0014B2 74 00            [12] 4844 	mov	a,#0x00
      0014B4 3E               [12] 4845 	addc	a,r6
      0014B5 FE               [12] 4846 	mov	r6,a
      0014B6 8D 82            [24] 4847 	mov	dpl,r5
      0014B8 8E 83            [24] 4848 	mov	dph,r6
      0014BA 8F F0            [24] 4849 	mov	b,r7
      0014BC 12r00r00         [24] 4850 	lcall	__gptrget
      0014BF FD               [12] 4851 	mov	r5,a
                           0014C0  4852 	C$queue.c$2056$1_0$352 ==.
                                   4853 ;	queue.c:2056: return uxReturn;
      0014C0 8D 82            [24] 4854 	mov	dpl,r5
      0014C2                       4855 00101$:
                           0014C2  4856 	C$queue.c$2057$1_0$352 ==.
                                   4857 ;	queue.c:2057: } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
                           0014C2  4858 	C$queue.c$2057$1_0$352 ==.
                           0014C2  4859 	XG$uxQueueMessagesWaitingFromISR$0$0 ==.
      0014C2 22               [24] 4860 	ret
                                   4861 ;------------------------------------------------------------
                                   4862 ;Allocation info for local variables in function 'vQueueDelete'
                                   4863 ;------------------------------------------------------------
                                   4864 ;xQueue                    Allocated to registers r5 r6 r7 
                                   4865 ;pxQueue                   Allocated to registers r5 r6 r7 
                                   4866 ;------------------------------------------------------------
                           0014C3  4867 	G$vQueueDelete$0$0 ==.
                           0014C3  4868 	C$queue.c$2060$1_0$354 ==.
                                   4869 ;	queue.c:2060: void vQueueDelete( QueueHandle_t xQueue )
                                   4870 ;	-----------------------------------------
                                   4871 ;	 function vQueueDelete
                                   4872 ;	-----------------------------------------
      0014C3                       4873 _vQueueDelete:
      0014C3 AD 82            [24] 4874 	mov	r5,dpl
      0014C5 AE 83            [24] 4875 	mov	r6,dph
      0014C7 AF F0            [24] 4876 	mov	r7,b
                           0014C9  4877 	C$queue.c$2062$2_0$354 ==.
                                   4878 ;	queue.c:2062: Queue_t * const pxQueue = xQueue;
                           0014C9  4879 	C$queue.c$2077$2_0$355 ==.
                                   4880 ;	queue.c:2077: vPortFree( pxQueue );
      0014C9 8D 82            [24] 4881 	mov	dpl,r5
      0014CB 8E 83            [24] 4882 	mov	dph,r6
      0014CD 8F F0            [24] 4883 	mov	b,r7
      0014CF 12r00r00         [24] 4884 	lcall	_vPortFree
      0014D2                       4885 00101$:
                           0014D2  4886 	C$queue.c$2099$2_0$354 ==.
                                   4887 ;	queue.c:2099: }
                           0014D2  4888 	C$queue.c$2099$2_0$354 ==.
                           0014D2  4889 	XG$vQueueDelete$0$0 ==.
      0014D2 22               [24] 4890 	ret
                                   4891 ;------------------------------------------------------------
                                   4892 ;Allocation info for local variables in function 'prvCopyDataToQueue'
                                   4893 ;------------------------------------------------------------
                                   4894 ;pvItemToQueue             Allocated to stack - _bp -5
                                   4895 ;xPosition                 Allocated to stack - _bp -6
                                   4896 ;pxQueue                   Allocated to stack - _bp +1
                                   4897 ;xReturn                   Allocated to registers 
                                   4898 ;uxMessagesWaiting         Allocated to stack - _bp +13
                                   4899 ;sloc0                     Allocated to stack - _bp +10
                                   4900 ;sloc1                     Allocated to stack - _bp +7
                                   4901 ;sloc2                     Allocated to stack - _bp +4
                                   4902 ;------------------------------------------------------------
                           0014D3  4903 	Fqueue$prvCopyDataToQueue$0$0 ==.
                           0014D3  4904 	C$queue.c$2160$2_0$357 ==.
                                   4905 ;	queue.c:2160: static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                   4906 ;	-----------------------------------------
                                   4907 ;	 function prvCopyDataToQueue
                                   4908 ;	-----------------------------------------
      0014D3                       4909 _prvCopyDataToQueue:
      0014D3 C0*00            [24] 4910 	push	_bp
      0014D5 85 81*00         [24] 4911 	mov	_bp,sp
      0014D8 C0 82            [24] 4912 	push	dpl
      0014DA C0 83            [24] 4913 	push	dph
      0014DC C0 F0            [24] 4914 	push	b
      0014DE E5 81            [12] 4915 	mov	a,sp
      0014E0 24 0A            [12] 4916 	add	a,#0x0a
      0014E2 F5 81            [12] 4917 	mov	sp,a
                           0014E4  4918 	C$queue.c$2169$1_0$357 ==.
                                   4919 ;	queue.c:2169: uxMessagesWaiting = pxQueue->uxMessagesWaiting;
      0014E4 A8*00            [24] 4920 	mov	r0,_bp
      0014E6 08               [12] 4921 	inc	r0
      0014E7 74 24            [12] 4922 	mov	a,#0x24
      0014E9 26               [12] 4923 	add	a,@r0
      0014EA FA               [12] 4924 	mov	r2,a
      0014EB 74 00            [12] 4925 	mov	a,#0x00
      0014ED 08               [12] 4926 	inc	r0
      0014EE 36               [12] 4927 	addc	a,@r0
      0014EF FB               [12] 4928 	mov	r3,a
      0014F0 08               [12] 4929 	inc	r0
      0014F1 86 04            [24] 4930 	mov	ar4,@r0
      0014F3 8A 82            [24] 4931 	mov	dpl,r2
      0014F5 8B 83            [24] 4932 	mov	dph,r3
      0014F7 8C F0            [24] 4933 	mov	b,r4
      0014F9 E5*00            [12] 4934 	mov	a,_bp
      0014FB 24 0D            [12] 4935 	add	a,#0x0d
      0014FD F8               [12] 4936 	mov	r0,a
      0014FE 12r00r00         [24] 4937 	lcall	__gptrget
      001501 F6               [12] 4938 	mov	@r0,a
                           001502  4939 	C$queue.c$2171$1_0$357 ==.
                                   4940 ;	queue.c:2171: if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
      001502 A8*00            [24] 4941 	mov	r0,_bp
      001504 08               [12] 4942 	inc	r0
      001505 E5*00            [12] 4943 	mov	a,_bp
      001507 24 0A            [12] 4944 	add	a,#0x0a
      001509 F9               [12] 4945 	mov	r1,a
      00150A 74 26            [12] 4946 	mov	a,#0x26
      00150C 26               [12] 4947 	add	a,@r0
      00150D F7               [12] 4948 	mov	@r1,a
      00150E 74 00            [12] 4949 	mov	a,#0x00
      001510 08               [12] 4950 	inc	r0
      001511 36               [12] 4951 	addc	a,@r0
      001512 09               [12] 4952 	inc	r1
      001513 F7               [12] 4953 	mov	@r1,a
      001514 08               [12] 4954 	inc	r0
      001515 E6               [12] 4955 	mov	a,@r0
      001516 09               [12] 4956 	inc	r1
      001517 F7               [12] 4957 	mov	@r1,a
      001518 E5*00            [12] 4958 	mov	a,_bp
      00151A 24 0A            [12] 4959 	add	a,#0x0a
      00151C F8               [12] 4960 	mov	r0,a
      00151D 86 82            [24] 4961 	mov	dpl,@r0
      00151F 08               [12] 4962 	inc	r0
      001520 86 83            [24] 4963 	mov	dph,@r0
      001522 08               [12] 4964 	inc	r0
      001523 86 F0            [24] 4965 	mov	b,@r0
      001525 12r00r00         [24] 4966 	lcall	__gptrget
      001528 FE               [12] 4967 	mov	r6,a
      001529 EE               [12] 4968 	mov	a,r6
      00152A 70 03            [24] 4969 	jnz	00141$
      00152C 02r18r12         [24] 4970 	ljmp	00114$
      00152F                       4971 00141$:
                           00152F  4972 	C$queue.c$2188$1_0$357 ==.
                                   4973 ;	queue.c:2188: else if( xPosition == queueSEND_TO_BACK )
      00152F E5*00            [12] 4974 	mov	a,_bp
      001531 24 FA            [12] 4975 	add	a,#0xfa
      001533 F8               [12] 4976 	mov	r0,a
      001534 E6               [12] 4977 	mov	a,@r0
      001535 60 03            [24] 4978 	jz	00142$
      001537 02r16r8F         [24] 4979 	ljmp	00110$
      00153A                       4980 00142$:
                           00153A  4981 	C$queue.c$2190$1_0$357 ==.
                                   4982 ;	queue.c:2190: ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
      00153A C0 02            [24] 4983 	push	ar2
      00153C C0 03            [24] 4984 	push	ar3
      00153E C0 04            [24] 4985 	push	ar4
      001540 8E 04            [24] 4986 	mov	ar4,r6
      001542 7D 00            [12] 4987 	mov	r5,#0x00
      001544 A8*00            [24] 4988 	mov	r0,_bp
      001546 08               [12] 4989 	inc	r0
      001547 E5*00            [12] 4990 	mov	a,_bp
      001549 24 07            [12] 4991 	add	a,#0x07
      00154B F9               [12] 4992 	mov	r1,a
      00154C 74 03            [12] 4993 	mov	a,#0x03
      00154E 26               [12] 4994 	add	a,@r0
      00154F F7               [12] 4995 	mov	@r1,a
      001550 74 00            [12] 4996 	mov	a,#0x00
      001552 08               [12] 4997 	inc	r0
      001553 36               [12] 4998 	addc	a,@r0
      001554 09               [12] 4999 	inc	r1
      001555 F7               [12] 5000 	mov	@r1,a
      001556 08               [12] 5001 	inc	r0
      001557 E6               [12] 5002 	mov	a,@r0
      001558 09               [12] 5003 	inc	r1
      001559 F7               [12] 5004 	mov	@r1,a
      00155A E5*00            [12] 5005 	mov	a,_bp
      00155C 24 07            [12] 5006 	add	a,#0x07
      00155E F8               [12] 5007 	mov	r0,a
      00155F 86 82            [24] 5008 	mov	dpl,@r0
      001561 08               [12] 5009 	inc	r0
      001562 86 83            [24] 5010 	mov	dph,@r0
      001564 08               [12] 5011 	inc	r0
      001565 86 F0            [24] 5012 	mov	b,@r0
      001567 12r00r00         [24] 5013 	lcall	__gptrget
      00156A FA               [12] 5014 	mov	r2,a
      00156B A3               [24] 5015 	inc	dptr
      00156C 12r00r00         [24] 5016 	lcall	__gptrget
      00156F FB               [12] 5017 	mov	r3,a
      001570 A3               [24] 5018 	inc	dptr
      001571 12r00r00         [24] 5019 	lcall	__gptrget
      001574 FF               [12] 5020 	mov	r7,a
      001575 C0 04            [24] 5021 	push	ar4
      001577 C0 03            [24] 5022 	push	ar3
      001579 C0 02            [24] 5023 	push	ar2
      00157B C0 04            [24] 5024 	push	ar4
      00157D C0 05            [24] 5025 	push	ar5
      00157F E5*00            [12] 5026 	mov	a,_bp
      001581 24 FB            [12] 5027 	add	a,#0xfb
      001583 F8               [12] 5028 	mov	r0,a
      001584 E6               [12] 5029 	mov	a,@r0
      001585 C0 E0            [24] 5030 	push	acc
      001587 08               [12] 5031 	inc	r0
      001588 E6               [12] 5032 	mov	a,@r0
      001589 C0 E0            [24] 5033 	push	acc
      00158B 08               [12] 5034 	inc	r0
      00158C E6               [12] 5035 	mov	a,@r0
      00158D C0 E0            [24] 5036 	push	acc
      00158F 8A 82            [24] 5037 	mov	dpl,r2
      001591 8B 83            [24] 5038 	mov	dph,r3
      001593 8F F0            [24] 5039 	mov	b,r7
      001595 12r00r00         [24] 5040 	lcall	___memcpy
      001598 E5 81            [12] 5041 	mov	a,sp
      00159A 24 FB            [12] 5042 	add	a,#0xfb
      00159C F5 81            [12] 5043 	mov	sp,a
      00159E D0 02            [24] 5044 	pop	ar2
      0015A0 D0 03            [24] 5045 	pop	ar3
      0015A2 D0 04            [24] 5046 	pop	ar4
                           0015A4  5047 	C$queue.c$2191$2_0$359 ==.
                                   5048 ;	queue.c:2191: pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
      0015A4 E5*00            [12] 5049 	mov	a,_bp
      0015A6 24 07            [12] 5050 	add	a,#0x07
      0015A8 F8               [12] 5051 	mov	r0,a
      0015A9 86 82            [24] 5052 	mov	dpl,@r0
      0015AB 08               [12] 5053 	inc	r0
      0015AC 86 83            [24] 5054 	mov	dph,@r0
      0015AE 08               [12] 5055 	inc	r0
      0015AF 86 F0            [24] 5056 	mov	b,@r0
      0015B1 12r00r00         [24] 5057 	lcall	__gptrget
      0015B4 FC               [12] 5058 	mov	r4,a
      0015B5 A3               [24] 5059 	inc	dptr
      0015B6 12r00r00         [24] 5060 	lcall	__gptrget
      0015B9 FD               [12] 5061 	mov	r5,a
      0015BA A3               [24] 5062 	inc	dptr
      0015BB 12r00r00         [24] 5063 	lcall	__gptrget
      0015BE FF               [12] 5064 	mov	r7,a
      0015BF E5*00            [12] 5065 	mov	a,_bp
      0015C1 24 0A            [12] 5066 	add	a,#0x0a
      0015C3 F8               [12] 5067 	mov	r0,a
      0015C4 86 82            [24] 5068 	mov	dpl,@r0
      0015C6 08               [12] 5069 	inc	r0
      0015C7 86 83            [24] 5070 	mov	dph,@r0
      0015C9 08               [12] 5071 	inc	r0
      0015CA 86 F0            [24] 5072 	mov	b,@r0
      0015CC 12r00r00         [24] 5073 	lcall	__gptrget
      0015CF FB               [12] 5074 	mov	r3,a
      0015D0 E5*00            [12] 5075 	mov	a,_bp
      0015D2 24 04            [12] 5076 	add	a,#0x04
      0015D4 F8               [12] 5077 	mov	r0,a
      0015D5 EB               [12] 5078 	mov	a,r3
      0015D6 2C               [12] 5079 	add	a,r4
      0015D7 F6               [12] 5080 	mov	@r0,a
      0015D8 74 00            [12] 5081 	mov	a,#0x00
      0015DA 3D               [12] 5082 	addc	a,r5
      0015DB 08               [12] 5083 	inc	r0
      0015DC F6               [12] 5084 	mov	@r0,a
      0015DD 08               [12] 5085 	inc	r0
      0015DE A6 07            [24] 5086 	mov	@r0,ar7
      0015E0 E5*00            [12] 5087 	mov	a,_bp
      0015E2 24 07            [12] 5088 	add	a,#0x07
      0015E4 F8               [12] 5089 	mov	r0,a
      0015E5 86 82            [24] 5090 	mov	dpl,@r0
      0015E7 08               [12] 5091 	inc	r0
      0015E8 86 83            [24] 5092 	mov	dph,@r0
      0015EA 08               [12] 5093 	inc	r0
      0015EB 86 F0            [24] 5094 	mov	b,@r0
      0015ED E5*00            [12] 5095 	mov	a,_bp
      0015EF 24 04            [12] 5096 	add	a,#0x04
      0015F1 F9               [12] 5097 	mov	r1,a
      0015F2 E7               [12] 5098 	mov	a,@r1
      0015F3 12r00r00         [24] 5099 	lcall	__gptrput
      0015F6 A3               [24] 5100 	inc	dptr
      0015F7 09               [12] 5101 	inc	r1
      0015F8 E7               [12] 5102 	mov	a,@r1
      0015F9 12r00r00         [24] 5103 	lcall	__gptrput
      0015FC A3               [24] 5104 	inc	dptr
      0015FD 09               [12] 5105 	inc	r1
      0015FE E7               [12] 5106 	mov	a,@r1
      0015FF 12r00r00         [24] 5107 	lcall	__gptrput
                           001602  5108 	C$queue.c$2193$2_0$359 ==.
                                   5109 ;	queue.c:2193: if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
      001602 A8*00            [24] 5110 	mov	r0,_bp
      001604 08               [12] 5111 	inc	r0
      001605 74 06            [12] 5112 	mov	a,#0x06
      001607 26               [12] 5113 	add	a,@r0
      001608 FA               [12] 5114 	mov	r2,a
      001609 74 00            [12] 5115 	mov	a,#0x00
      00160B 08               [12] 5116 	inc	r0
      00160C 36               [12] 5117 	addc	a,@r0
      00160D FB               [12] 5118 	mov	r3,a
      00160E 08               [12] 5119 	inc	r0
      00160F 86 07            [24] 5120 	mov	ar7,@r0
      001611 8A 82            [24] 5121 	mov	dpl,r2
      001613 8B 83            [24] 5122 	mov	dph,r3
      001615 8F F0            [24] 5123 	mov	b,r7
      001617 12r00r00         [24] 5124 	lcall	__gptrget
      00161A FA               [12] 5125 	mov	r2,a
      00161B A3               [24] 5126 	inc	dptr
      00161C 12r00r00         [24] 5127 	lcall	__gptrget
      00161F FB               [12] 5128 	mov	r3,a
      001620 A3               [24] 5129 	inc	dptr
      001621 12r00r00         [24] 5130 	lcall	__gptrget
      001624 FF               [12] 5131 	mov	r7,a
      001625 E5*00            [12] 5132 	mov	a,_bp
      001627 24 04            [12] 5133 	add	a,#0x04
      001629 F8               [12] 5134 	mov	r0,a
      00162A C0 02            [24] 5135 	push	ar2
      00162C C0 03            [24] 5136 	push	ar3
      00162E C0 07            [24] 5137 	push	ar7
      001630 86 82            [24] 5138 	mov	dpl,@r0
      001632 08               [12] 5139 	inc	r0
      001633 86 83            [24] 5140 	mov	dph,@r0
      001635 08               [12] 5141 	inc	r0
      001636 86 F0            [24] 5142 	mov	b,@r0
      001638 12r00r00         [24] 5143 	lcall	___gptr_cmp
      00163B 15 81            [12] 5144 	dec	sp
      00163D 15 81            [12] 5145 	dec	sp
      00163F 15 81            [12] 5146 	dec	sp
      001641 D0 04            [24] 5147 	pop	ar4
      001643 D0 03            [24] 5148 	pop	ar3
      001645 D0 02            [24] 5149 	pop	ar2
      001647 50 03            [24] 5150 	jnc	00143$
      001649 02r18r12         [24] 5151 	ljmp	00114$
      00164C                       5152 00143$:
                           00164C  5153 	C$queue.c$2195$1_0$357 ==.
                                   5154 ;	queue.c:2195: pxQueue->pcWriteTo = pxQueue->pcHead;
      00164C C0 02            [24] 5155 	push	ar2
      00164E C0 03            [24] 5156 	push	ar3
      001650 C0 04            [24] 5157 	push	ar4
      001652 A8*00            [24] 5158 	mov	r0,_bp
      001654 08               [12] 5159 	inc	r0
      001655 86 82            [24] 5160 	mov	dpl,@r0
      001657 08               [12] 5161 	inc	r0
      001658 86 83            [24] 5162 	mov	dph,@r0
      00165A 08               [12] 5163 	inc	r0
      00165B 86 F0            [24] 5164 	mov	b,@r0
      00165D 12r00r00         [24] 5165 	lcall	__gptrget
      001660 FC               [12] 5166 	mov	r4,a
      001661 A3               [24] 5167 	inc	dptr
      001662 12r00r00         [24] 5168 	lcall	__gptrget
      001665 FD               [12] 5169 	mov	r5,a
      001666 A3               [24] 5170 	inc	dptr
      001667 12r00r00         [24] 5171 	lcall	__gptrget
      00166A FF               [12] 5172 	mov	r7,a
      00166B E5*00            [12] 5173 	mov	a,_bp
      00166D 24 07            [12] 5174 	add	a,#0x07
      00166F F8               [12] 5175 	mov	r0,a
      001670 86 82            [24] 5176 	mov	dpl,@r0
      001672 08               [12] 5177 	inc	r0
      001673 86 83            [24] 5178 	mov	dph,@r0
      001675 08               [12] 5179 	inc	r0
      001676 86 F0            [24] 5180 	mov	b,@r0
      001678 EC               [12] 5181 	mov	a,r4
      001679 12r00r00         [24] 5182 	lcall	__gptrput
      00167C A3               [24] 5183 	inc	dptr
      00167D ED               [12] 5184 	mov	a,r5
      00167E 12r00r00         [24] 5185 	lcall	__gptrput
      001681 A3               [24] 5186 	inc	dptr
      001682 EF               [12] 5187 	mov	a,r7
      001683 12r00r00         [24] 5188 	lcall	__gptrput
      001686 D0 04            [24] 5189 	pop	ar4
      001688 D0 03            [24] 5190 	pop	ar3
      00168A D0 02            [24] 5191 	pop	ar2
      00168C 02r18r12         [24] 5192 	ljmp	00114$
      00168F                       5193 00110$:
                           00168F  5194 	C$queue.c$2204$1_0$357 ==.
                                   5195 ;	queue.c:2204: ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
      00168F C0 02            [24] 5196 	push	ar2
      001691 C0 03            [24] 5197 	push	ar3
      001693 C0 04            [24] 5198 	push	ar4
      001695 7F 00            [12] 5199 	mov	r7,#0x00
      001697 A8*00            [24] 5200 	mov	r0,_bp
      001699 08               [12] 5201 	inc	r0
      00169A E5*00            [12] 5202 	mov	a,_bp
      00169C 24 04            [12] 5203 	add	a,#0x04
      00169E F9               [12] 5204 	mov	r1,a
      00169F 74 06            [12] 5205 	mov	a,#0x06
      0016A1 26               [12] 5206 	add	a,@r0
      0016A2 F7               [12] 5207 	mov	@r1,a
      0016A3 74 00            [12] 5208 	mov	a,#0x00
      0016A5 08               [12] 5209 	inc	r0
      0016A6 36               [12] 5210 	addc	a,@r0
      0016A7 09               [12] 5211 	inc	r1
      0016A8 F7               [12] 5212 	mov	@r1,a
      0016A9 08               [12] 5213 	inc	r0
      0016AA E6               [12] 5214 	mov	a,@r0
      0016AB 09               [12] 5215 	inc	r1
      0016AC F7               [12] 5216 	mov	@r1,a
      0016AD E5*00            [12] 5217 	mov	a,_bp
      0016AF 24 04            [12] 5218 	add	a,#0x04
      0016B1 F8               [12] 5219 	mov	r0,a
      0016B2 E5*00            [12] 5220 	mov	a,_bp
      0016B4 24 07            [12] 5221 	add	a,#0x07
      0016B6 F9               [12] 5222 	mov	r1,a
      0016B7 74 03            [12] 5223 	mov	a,#0x03
      0016B9 26               [12] 5224 	add	a,@r0
      0016BA F7               [12] 5225 	mov	@r1,a
      0016BB 74 00            [12] 5226 	mov	a,#0x00
      0016BD 08               [12] 5227 	inc	r0
      0016BE 36               [12] 5228 	addc	a,@r0
      0016BF 09               [12] 5229 	inc	r1
      0016C0 F7               [12] 5230 	mov	@r1,a
      0016C1 08               [12] 5231 	inc	r0
      0016C2 E6               [12] 5232 	mov	a,@r0
      0016C3 09               [12] 5233 	inc	r1
      0016C4 F7               [12] 5234 	mov	@r1,a
      0016C5 E5*00            [12] 5235 	mov	a,_bp
      0016C7 24 07            [12] 5236 	add	a,#0x07
      0016C9 F8               [12] 5237 	mov	r0,a
      0016CA 86 82            [24] 5238 	mov	dpl,@r0
      0016CC 08               [12] 5239 	inc	r0
      0016CD 86 83            [24] 5240 	mov	dph,@r0
      0016CF 08               [12] 5241 	inc	r0
      0016D0 86 F0            [24] 5242 	mov	b,@r0
      0016D2 12r00r00         [24] 5243 	lcall	__gptrget
      0016D5 FB               [12] 5244 	mov	r3,a
      0016D6 A3               [24] 5245 	inc	dptr
      0016D7 12r00r00         [24] 5246 	lcall	__gptrget
      0016DA FC               [12] 5247 	mov	r4,a
      0016DB A3               [24] 5248 	inc	dptr
      0016DC 12r00r00         [24] 5249 	lcall	__gptrget
      0016DF FD               [12] 5250 	mov	r5,a
      0016E0 C0 04            [24] 5251 	push	ar4
      0016E2 C0 03            [24] 5252 	push	ar3
      0016E4 C0 02            [24] 5253 	push	ar2
      0016E6 C0 06            [24] 5254 	push	ar6
      0016E8 C0 07            [24] 5255 	push	ar7
      0016EA E5*00            [12] 5256 	mov	a,_bp
      0016EC 24 FB            [12] 5257 	add	a,#0xfb
      0016EE F8               [12] 5258 	mov	r0,a
      0016EF E6               [12] 5259 	mov	a,@r0
      0016F0 C0 E0            [24] 5260 	push	acc
      0016F2 08               [12] 5261 	inc	r0
      0016F3 E6               [12] 5262 	mov	a,@r0
      0016F4 C0 E0            [24] 5263 	push	acc
      0016F6 08               [12] 5264 	inc	r0
      0016F7 E6               [12] 5265 	mov	a,@r0
      0016F8 C0 E0            [24] 5266 	push	acc
      0016FA 8B 82            [24] 5267 	mov	dpl,r3
      0016FC 8C 83            [24] 5268 	mov	dph,r4
      0016FE 8D F0            [24] 5269 	mov	b,r5
      001700 12r00r00         [24] 5270 	lcall	___memcpy
      001703 E5 81            [12] 5271 	mov	a,sp
      001705 24 FB            [12] 5272 	add	a,#0xfb
      001707 F5 81            [12] 5273 	mov	sp,a
      001709 D0 02            [24] 5274 	pop	ar2
      00170B D0 03            [24] 5275 	pop	ar3
      00170D D0 04            [24] 5276 	pop	ar4
                           00170F  5277 	C$queue.c$2205$2_0$362 ==.
                                   5278 ;	queue.c:2205: pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
      00170F E5*00            [12] 5279 	mov	a,_bp
      001711 24 07            [12] 5280 	add	a,#0x07
      001713 F8               [12] 5281 	mov	r0,a
      001714 86 82            [24] 5282 	mov	dpl,@r0
      001716 08               [12] 5283 	inc	r0
      001717 86 83            [24] 5284 	mov	dph,@r0
      001719 08               [12] 5285 	inc	r0
      00171A 86 F0            [24] 5286 	mov	b,@r0
      00171C 12r00r00         [24] 5287 	lcall	__gptrget
      00171F FD               [12] 5288 	mov	r5,a
      001720 A3               [24] 5289 	inc	dptr
      001721 12r00r00         [24] 5290 	lcall	__gptrget
      001724 FE               [12] 5291 	mov	r6,a
      001725 A3               [24] 5292 	inc	dptr
      001726 12r00r00         [24] 5293 	lcall	__gptrget
      001729 FF               [12] 5294 	mov	r7,a
      00172A E5*00            [12] 5295 	mov	a,_bp
      00172C 24 0A            [12] 5296 	add	a,#0x0a
      00172E F8               [12] 5297 	mov	r0,a
      00172F 86 82            [24] 5298 	mov	dpl,@r0
      001731 08               [12] 5299 	inc	r0
      001732 86 83            [24] 5300 	mov	dph,@r0
      001734 08               [12] 5301 	inc	r0
      001735 86 F0            [24] 5302 	mov	b,@r0
      001737 12r00r00         [24] 5303 	lcall	__gptrget
      00173A FC               [12] 5304 	mov	r4,a
      00173B 7B 00            [12] 5305 	mov	r3,#0x00
      00173D ED               [12] 5306 	mov	a,r5
      00173E C3               [12] 5307 	clr	c
      00173F 9C               [12] 5308 	subb	a,r4
      001740 FD               [12] 5309 	mov	r5,a
      001741 EE               [12] 5310 	mov	a,r6
      001742 9B               [12] 5311 	subb	a,r3
      001743 FE               [12] 5312 	mov	r6,a
      001744 E5*00            [12] 5313 	mov	a,_bp
      001746 24 07            [12] 5314 	add	a,#0x07
      001748 F8               [12] 5315 	mov	r0,a
      001749 86 82            [24] 5316 	mov	dpl,@r0
      00174B 08               [12] 5317 	inc	r0
      00174C 86 83            [24] 5318 	mov	dph,@r0
      00174E 08               [12] 5319 	inc	r0
      00174F 86 F0            [24] 5320 	mov	b,@r0
      001751 ED               [12] 5321 	mov	a,r5
      001752 12r00r00         [24] 5322 	lcall	__gptrput
      001755 A3               [24] 5323 	inc	dptr
      001756 EE               [12] 5324 	mov	a,r6
      001757 12r00r00         [24] 5325 	lcall	__gptrput
      00175A A3               [24] 5326 	inc	dptr
      00175B EF               [12] 5327 	mov	a,r7
      00175C 12r00r00         [24] 5328 	lcall	__gptrput
                           00175F  5329 	C$queue.c$2207$2_0$362 ==.
                                   5330 ;	queue.c:2207: if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
      00175F A8*00            [24] 5331 	mov	r0,_bp
      001761 08               [12] 5332 	inc	r0
      001762 86 82            [24] 5333 	mov	dpl,@r0
      001764 08               [12] 5334 	inc	r0
      001765 86 83            [24] 5335 	mov	dph,@r0
      001767 08               [12] 5336 	inc	r0
      001768 86 F0            [24] 5337 	mov	b,@r0
      00176A 12r00r00         [24] 5338 	lcall	__gptrget
      00176D FA               [12] 5339 	mov	r2,a
      00176E A3               [24] 5340 	inc	dptr
      00176F 12r00r00         [24] 5341 	lcall	__gptrget
      001772 FB               [12] 5342 	mov	r3,a
      001773 A3               [24] 5343 	inc	dptr
      001774 12r00r00         [24] 5344 	lcall	__gptrget
      001777 FC               [12] 5345 	mov	r4,a
      001778 C0 02            [24] 5346 	push	ar2
      00177A C0 03            [24] 5347 	push	ar3
      00177C C0 04            [24] 5348 	push	ar4
      00177E 8D 82            [24] 5349 	mov	dpl,r5
      001780 8E 83            [24] 5350 	mov	dph,r6
      001782 8F F0            [24] 5351 	mov	b,r7
      001784 12r00r00         [24] 5352 	lcall	___gptr_cmp
      001787 15 81            [12] 5353 	dec	sp
      001789 15 81            [12] 5354 	dec	sp
      00178B 15 81            [12] 5355 	dec	sp
      00178D D0 04            [24] 5356 	pop	ar4
      00178F D0 03            [24] 5357 	pop	ar3
      001791 D0 02            [24] 5358 	pop	ar2
      001793 40 03            [24] 5359 	jc	00144$
      001795 02r17rF4         [24] 5360 	ljmp	00104$
      001798                       5361 00144$:
                           001798  5362 	C$queue.c$2209$1_0$357 ==.
                                   5363 ;	queue.c:2209: pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
      001798 C0 02            [24] 5364 	push	ar2
      00179A C0 03            [24] 5365 	push	ar3
      00179C C0 04            [24] 5366 	push	ar4
      00179E E5*00            [12] 5367 	mov	a,_bp
      0017A0 24 04            [12] 5368 	add	a,#0x04
      0017A2 F8               [12] 5369 	mov	r0,a
      0017A3 86 82            [24] 5370 	mov	dpl,@r0
      0017A5 08               [12] 5371 	inc	r0
      0017A6 86 83            [24] 5372 	mov	dph,@r0
      0017A8 08               [12] 5373 	inc	r0
      0017A9 86 F0            [24] 5374 	mov	b,@r0
      0017AB 12r00r00         [24] 5375 	lcall	__gptrget
      0017AE FD               [12] 5376 	mov	r5,a
      0017AF A3               [24] 5377 	inc	dptr
      0017B0 12r00r00         [24] 5378 	lcall	__gptrget
      0017B3 FE               [12] 5379 	mov	r6,a
      0017B4 A3               [24] 5380 	inc	dptr
      0017B5 12r00r00         [24] 5381 	lcall	__gptrget
      0017B8 FF               [12] 5382 	mov	r7,a
      0017B9 E5*00            [12] 5383 	mov	a,_bp
      0017BB 24 0A            [12] 5384 	add	a,#0x0a
      0017BD F8               [12] 5385 	mov	r0,a
      0017BE 86 82            [24] 5386 	mov	dpl,@r0
      0017C0 08               [12] 5387 	inc	r0
      0017C1 86 83            [24] 5388 	mov	dph,@r0
      0017C3 08               [12] 5389 	inc	r0
      0017C4 86 F0            [24] 5390 	mov	b,@r0
      0017C6 12r00r00         [24] 5391 	lcall	__gptrget
      0017C9 FC               [12] 5392 	mov	r4,a
      0017CA 7B 00            [12] 5393 	mov	r3,#0x00
      0017CC ED               [12] 5394 	mov	a,r5
      0017CD C3               [12] 5395 	clr	c
      0017CE 9C               [12] 5396 	subb	a,r4
      0017CF FD               [12] 5397 	mov	r5,a
      0017D0 EE               [12] 5398 	mov	a,r6
      0017D1 9B               [12] 5399 	subb	a,r3
      0017D2 FE               [12] 5400 	mov	r6,a
      0017D3 E5*00            [12] 5401 	mov	a,_bp
      0017D5 24 07            [12] 5402 	add	a,#0x07
      0017D7 F8               [12] 5403 	mov	r0,a
      0017D8 86 82            [24] 5404 	mov	dpl,@r0
      0017DA 08               [12] 5405 	inc	r0
      0017DB 86 83            [24] 5406 	mov	dph,@r0
      0017DD 08               [12] 5407 	inc	r0
      0017DE 86 F0            [24] 5408 	mov	b,@r0
      0017E0 ED               [12] 5409 	mov	a,r5
      0017E1 12r00r00         [24] 5410 	lcall	__gptrput
      0017E4 A3               [24] 5411 	inc	dptr
      0017E5 EE               [12] 5412 	mov	a,r6
      0017E6 12r00r00         [24] 5413 	lcall	__gptrput
      0017E9 A3               [24] 5414 	inc	dptr
      0017EA EF               [12] 5415 	mov	a,r7
      0017EB 12r00r00         [24] 5416 	lcall	__gptrput
                           0017EE  5417 	C$queue.c$2239$1_0$357 ==.
                                   5418 ;	queue.c:2239: return xReturn;
      0017EE D0 04            [24] 5419 	pop	ar4
      0017F0 D0 03            [24] 5420 	pop	ar3
      0017F2 D0 02            [24] 5421 	pop	ar2
                           0017F4  5422 	C$queue.c$2209$2_0$362 ==.
                                   5423 ;	queue.c:2209: pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
      0017F4                       5424 00104$:
                           0017F4  5425 	C$queue.c$2216$2_0$362 ==.
                                   5426 ;	queue.c:2216: if( xPosition == queueOVERWRITE )
      0017F4 E5*00            [12] 5427 	mov	a,_bp
      0017F6 24 FA            [12] 5428 	add	a,#0xfa
      0017F8 F8               [12] 5429 	mov	r0,a
      0017F9 B6 02 02         [24] 5430 	cjne	@r0,#0x02,00145$
      0017FC 80 03            [24] 5431 	sjmp	00146$
      0017FE                       5432 00145$:
      0017FE 02r18r12         [24] 5433 	ljmp	00114$
      001801                       5434 00146$:
                           001801  5435 	C$queue.c$2218$3_0$365 ==.
                                   5436 ;	queue.c:2218: if( uxMessagesWaiting > ( UBaseType_t ) 0 )
      001801 E5*00            [12] 5437 	mov	a,_bp
      001803 24 0D            [12] 5438 	add	a,#0x0d
      001805 F8               [12] 5439 	mov	r0,a
      001806 E6               [12] 5440 	mov	a,@r0
      001807 70 03            [24] 5441 	jnz	00147$
      001809 02r18r12         [24] 5442 	ljmp	00114$
      00180C                       5443 00147$:
                           00180C  5444 	C$queue.c$2224$4_0$366 ==.
                                   5445 ;	queue.c:2224: --uxMessagesWaiting;
      00180C E5*00            [12] 5446 	mov	a,_bp
      00180E 24 0D            [12] 5447 	add	a,#0x0d
      001810 F8               [12] 5448 	mov	r0,a
      001811 16               [12] 5449 	dec	@r0
      001812                       5450 00114$:
                           001812  5451 	C$queue.c$2237$1_0$357 ==.
                                   5452 ;	queue.c:2237: pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
      001812 E5*00            [12] 5453 	mov	a,_bp
      001814 24 0D            [12] 5454 	add	a,#0x0d
      001816 F8               [12] 5455 	mov	r0,a
      001817 E6               [12] 5456 	mov	a,@r0
      001818 04               [12] 5457 	inc	a
      001819 FF               [12] 5458 	mov	r7,a
      00181A 8A 82            [24] 5459 	mov	dpl,r2
      00181C 8B 83            [24] 5460 	mov	dph,r3
      00181E 8C F0            [24] 5461 	mov	b,r4
      001820 EF               [12] 5462 	mov	a,r7
      001821 12r00r00         [24] 5463 	lcall	__gptrput
                           001824  5464 	C$queue.c$2239$1_0$357 ==.
                                   5465 ;	queue.c:2239: return xReturn;
      001824 75 82 00         [24] 5466 	mov	dpl,#0x00
      001827                       5467 00115$:
                           001827  5468 	C$queue.c$2240$1_0$357 ==.
                                   5469 ;	queue.c:2240: }
      001827 85*00 81         [24] 5470 	mov	sp,_bp
      00182A D0*00            [24] 5471 	pop	_bp
                           00182C  5472 	C$queue.c$2240$1_0$357 ==.
                           00182C  5473 	XFqueue$prvCopyDataToQueue$0$0 ==.
      00182C 22               [24] 5474 	ret
                                   5475 ;------------------------------------------------------------
                                   5476 ;Allocation info for local variables in function 'prvCopyDataFromQueue'
                                   5477 ;------------------------------------------------------------
                                   5478 ;pvBuffer                  Allocated to stack - _bp -5
                                   5479 ;pxQueue                   Allocated to stack - _bp +1
                                   5480 ;sloc0                     Allocated to stack - _bp +4
                                   5481 ;sloc1                     Allocated to stack - _bp +5
                                   5482 ;------------------------------------------------------------
                           00182D  5483 	Fqueue$prvCopyDataFromQueue$0$0 ==.
                           00182D  5484 	C$queue.c$2243$1_0$370 ==.
                                   5485 ;	queue.c:2243: static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                   5486 ;	-----------------------------------------
                                   5487 ;	 function prvCopyDataFromQueue
                                   5488 ;	-----------------------------------------
      00182D                       5489 _prvCopyDataFromQueue:
      00182D C0*00            [24] 5490 	push	_bp
      00182F 85 81*00         [24] 5491 	mov	_bp,sp
      001832 C0 82            [24] 5492 	push	dpl
      001834 C0 83            [24] 5493 	push	dph
      001836 C0 F0            [24] 5494 	push	b
      001838 E5 81            [12] 5495 	mov	a,sp
      00183A 24 04            [12] 5496 	add	a,#0x04
      00183C F5 81            [12] 5497 	mov	sp,a
                           00183E  5498 	C$queue.c$2246$1_0$370 ==.
                                   5499 ;	queue.c:2246: if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
      00183E A8*00            [24] 5500 	mov	r0,_bp
      001840 08               [12] 5501 	inc	r0
      001841 74 26            [12] 5502 	mov	a,#0x26
      001843 26               [12] 5503 	add	a,@r0
      001844 FA               [12] 5504 	mov	r2,a
      001845 74 00            [12] 5505 	mov	a,#0x00
      001847 08               [12] 5506 	inc	r0
      001848 36               [12] 5507 	addc	a,@r0
      001849 FB               [12] 5508 	mov	r3,a
      00184A 08               [12] 5509 	inc	r0
      00184B 86 04            [24] 5510 	mov	ar4,@r0
      00184D 8A 82            [24] 5511 	mov	dpl,r2
      00184F 8B 83            [24] 5512 	mov	dph,r3
      001851 8C F0            [24] 5513 	mov	b,r4
      001853 E5*00            [12] 5514 	mov	a,_bp
      001855 24 04            [12] 5515 	add	a,#0x04
      001857 F8               [12] 5516 	mov	r0,a
      001858 12r00r00         [24] 5517 	lcall	__gptrget
      00185B F6               [12] 5518 	mov	@r0,a
      00185C E5*00            [12] 5519 	mov	a,_bp
      00185E 24 04            [12] 5520 	add	a,#0x04
      001860 F8               [12] 5521 	mov	r0,a
      001861 E6               [12] 5522 	mov	a,@r0
      001862 70 03            [24] 5523 	jnz	00115$
      001864 02r19r7E         [24] 5524 	ljmp	00105$
      001867                       5525 00115$:
                           001867  5526 	C$queue.c$2248$1_0$370 ==.
                                   5527 ;	queue.c:2248: pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
      001867 C0 02            [24] 5528 	push	ar2
      001869 C0 03            [24] 5529 	push	ar3
      00186B C0 04            [24] 5530 	push	ar4
      00186D A8*00            [24] 5531 	mov	r0,_bp
      00186F 08               [12] 5532 	inc	r0
      001870 74 06            [12] 5533 	mov	a,#0x06
      001872 26               [12] 5534 	add	a,@r0
      001873 FA               [12] 5535 	mov	r2,a
      001874 74 00            [12] 5536 	mov	a,#0x00
      001876 08               [12] 5537 	inc	r0
      001877 36               [12] 5538 	addc	a,@r0
      001878 FB               [12] 5539 	mov	r3,a
      001879 08               [12] 5540 	inc	r0
      00187A 86 04            [24] 5541 	mov	ar4,@r0
      00187C E5*00            [12] 5542 	mov	a,_bp
      00187E 24 05            [12] 5543 	add	a,#0x05
      001880 F8               [12] 5544 	mov	r0,a
      001881 74 03            [12] 5545 	mov	a,#0x03
      001883 2A               [12] 5546 	add	a,r2
      001884 F6               [12] 5547 	mov	@r0,a
      001885 74 00            [12] 5548 	mov	a,#0x00
      001887 3B               [12] 5549 	addc	a,r3
      001888 08               [12] 5550 	inc	r0
      001889 F6               [12] 5551 	mov	@r0,a
      00188A 08               [12] 5552 	inc	r0
      00188B A6 04            [24] 5553 	mov	@r0,ar4
      00188D E5*00            [12] 5554 	mov	a,_bp
      00188F 24 05            [12] 5555 	add	a,#0x05
      001891 F8               [12] 5556 	mov	r0,a
      001892 86 82            [24] 5557 	mov	dpl,@r0
      001894 08               [12] 5558 	inc	r0
      001895 86 83            [24] 5559 	mov	dph,@r0
      001897 08               [12] 5560 	inc	r0
      001898 86 F0            [24] 5561 	mov	b,@r0
      00189A 12r00r00         [24] 5562 	lcall	__gptrget
      00189D FD               [12] 5563 	mov	r5,a
      00189E A3               [24] 5564 	inc	dptr
      00189F 12r00r00         [24] 5565 	lcall	__gptrget
      0018A2 FE               [12] 5566 	mov	r6,a
      0018A3 A3               [24] 5567 	inc	dptr
      0018A4 12r00r00         [24] 5568 	lcall	__gptrget
      0018A7 FF               [12] 5569 	mov	r7,a
      0018A8 E5*00            [12] 5570 	mov	a,_bp
      0018AA 24 04            [12] 5571 	add	a,#0x04
      0018AC F8               [12] 5572 	mov	r0,a
      0018AD E6               [12] 5573 	mov	a,@r0
      0018AE 2D               [12] 5574 	add	a,r5
      0018AF FD               [12] 5575 	mov	r5,a
      0018B0 74 00            [12] 5576 	mov	a,#0x00
      0018B2 3E               [12] 5577 	addc	a,r6
      0018B3 FE               [12] 5578 	mov	r6,a
      0018B4 E5*00            [12] 5579 	mov	a,_bp
      0018B6 24 05            [12] 5580 	add	a,#0x05
      0018B8 F8               [12] 5581 	mov	r0,a
      0018B9 86 82            [24] 5582 	mov	dpl,@r0
      0018BB 08               [12] 5583 	inc	r0
      0018BC 86 83            [24] 5584 	mov	dph,@r0
      0018BE 08               [12] 5585 	inc	r0
      0018BF 86 F0            [24] 5586 	mov	b,@r0
      0018C1 ED               [12] 5587 	mov	a,r5
      0018C2 12r00r00         [24] 5588 	lcall	__gptrput
      0018C5 A3               [24] 5589 	inc	dptr
      0018C6 EE               [12] 5590 	mov	a,r6
      0018C7 12r00r00         [24] 5591 	lcall	__gptrput
      0018CA A3               [24] 5592 	inc	dptr
      0018CB EF               [12] 5593 	mov	a,r7
      0018CC 12r00r00         [24] 5594 	lcall	__gptrput
                           0018CF  5595 	C$queue.c$2250$2_0$371 ==.
                                   5596 ;	queue.c:2250: if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
      0018CF 8A 82            [24] 5597 	mov	dpl,r2
      0018D1 8B 83            [24] 5598 	mov	dph,r3
      0018D3 8C F0            [24] 5599 	mov	b,r4
      0018D5 12r00r00         [24] 5600 	lcall	__gptrget
      0018D8 FA               [12] 5601 	mov	r2,a
      0018D9 A3               [24] 5602 	inc	dptr
      0018DA 12r00r00         [24] 5603 	lcall	__gptrget
      0018DD FB               [12] 5604 	mov	r3,a
      0018DE A3               [24] 5605 	inc	dptr
      0018DF 12r00r00         [24] 5606 	lcall	__gptrget
      0018E2 FC               [12] 5607 	mov	r4,a
      0018E3 C0 02            [24] 5608 	push	ar2
      0018E5 C0 03            [24] 5609 	push	ar3
      0018E7 C0 04            [24] 5610 	push	ar4
      0018E9 8D 82            [24] 5611 	mov	dpl,r5
      0018EB 8E 83            [24] 5612 	mov	dph,r6
      0018ED 8F F0            [24] 5613 	mov	b,r7
      0018EF 12r00r00         [24] 5614 	lcall	___gptr_cmp
      0018F2 15 81            [12] 5615 	dec	sp
      0018F4 15 81            [12] 5616 	dec	sp
      0018F6 15 81            [12] 5617 	dec	sp
      0018F8 D0 04            [24] 5618 	pop	ar4
      0018FA D0 03            [24] 5619 	pop	ar3
      0018FC D0 02            [24] 5620 	pop	ar2
      0018FE 50 03            [24] 5621 	jnc	00116$
      001900 02r19r37         [24] 5622 	ljmp	00102$
      001903                       5623 00116$:
                           001903  5624 	C$queue.c$2252$3_0$372 ==.
                                   5625 ;	queue.c:2252: pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
      001903 A8*00            [24] 5626 	mov	r0,_bp
      001905 08               [12] 5627 	inc	r0
      001906 86 82            [24] 5628 	mov	dpl,@r0
      001908 08               [12] 5629 	inc	r0
      001909 86 83            [24] 5630 	mov	dph,@r0
      00190B 08               [12] 5631 	inc	r0
      00190C 86 F0            [24] 5632 	mov	b,@r0
      00190E 12r00r00         [24] 5633 	lcall	__gptrget
      001911 FD               [12] 5634 	mov	r5,a
      001912 A3               [24] 5635 	inc	dptr
      001913 12r00r00         [24] 5636 	lcall	__gptrget
      001916 FE               [12] 5637 	mov	r6,a
      001917 A3               [24] 5638 	inc	dptr
      001918 12r00r00         [24] 5639 	lcall	__gptrget
      00191B FF               [12] 5640 	mov	r7,a
      00191C E5*00            [12] 5641 	mov	a,_bp
      00191E 24 05            [12] 5642 	add	a,#0x05
      001920 F8               [12] 5643 	mov	r0,a
      001921 86 82            [24] 5644 	mov	dpl,@r0
      001923 08               [12] 5645 	inc	r0
      001924 86 83            [24] 5646 	mov	dph,@r0
      001926 08               [12] 5647 	inc	r0
      001927 86 F0            [24] 5648 	mov	b,@r0
      001929 ED               [12] 5649 	mov	a,r5
      00192A 12r00r00         [24] 5650 	lcall	__gptrput
      00192D A3               [24] 5651 	inc	dptr
      00192E EE               [12] 5652 	mov	a,r6
      00192F 12r00r00         [24] 5653 	lcall	__gptrput
      001932 A3               [24] 5654 	inc	dptr
      001933 EF               [12] 5655 	mov	a,r7
      001934 12r00r00         [24] 5656 	lcall	__gptrput
      001937                       5657 00102$:
                           001937  5658 	C$queue.c$2259$2_0$371 ==.
                                   5659 ;	queue.c:2259: ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
      001937 8A 82            [24] 5660 	mov	dpl,r2
      001939 8B 83            [24] 5661 	mov	dph,r3
      00193B 8C F0            [24] 5662 	mov	b,r4
      00193D 12r00r00         [24] 5663 	lcall	__gptrget
      001940 FA               [12] 5664 	mov	r2,a
      001941 7F 00            [12] 5665 	mov	r7,#0x00
      001943 E5*00            [12] 5666 	mov	a,_bp
      001945 24 05            [12] 5667 	add	a,#0x05
      001947 F8               [12] 5668 	mov	r0,a
      001948 86 82            [24] 5669 	mov	dpl,@r0
      00194A 08               [12] 5670 	inc	r0
      00194B 86 83            [24] 5671 	mov	dph,@r0
      00194D 08               [12] 5672 	inc	r0
      00194E 86 F0            [24] 5673 	mov	b,@r0
      001950 12r00r00         [24] 5674 	lcall	__gptrget
      001953 FC               [12] 5675 	mov	r4,a
      001954 A3               [24] 5676 	inc	dptr
      001955 12r00r00         [24] 5677 	lcall	__gptrget
      001958 FD               [12] 5678 	mov	r5,a
      001959 A3               [24] 5679 	inc	dptr
      00195A 12r00r00         [24] 5680 	lcall	__gptrget
      00195D FE               [12] 5681 	mov	r6,a
      00195E C0 02            [24] 5682 	push	ar2
      001960 C0 07            [24] 5683 	push	ar7
      001962 C0 04            [24] 5684 	push	ar4
      001964 C0 05            [24] 5685 	push	ar5
      001966 C0 06            [24] 5686 	push	ar6
      001968 E5*00            [12] 5687 	mov	a,_bp
      00196A 24 FB            [12] 5688 	add	a,#0xfb
      00196C F8               [12] 5689 	mov	r0,a
      00196D 86 82            [24] 5690 	mov	dpl,@r0
      00196F 08               [12] 5691 	inc	r0
      001970 86 83            [24] 5692 	mov	dph,@r0
      001972 08               [12] 5693 	inc	r0
      001973 86 F0            [24] 5694 	mov	b,@r0
      001975 12r00r00         [24] 5695 	lcall	___memcpy
      001978 E5 81            [12] 5696 	mov	a,sp
      00197A 24 FB            [12] 5697 	add	a,#0xfb
      00197C F5 81            [12] 5698 	mov	sp,a
      00197E                       5699 00105$:
                           00197E  5700 	C$queue.c$2261$1_0$370 ==.
                                   5701 ;	queue.c:2261: }
      00197E 85*00 81         [24] 5702 	mov	sp,_bp
      001981 D0*00            [24] 5703 	pop	_bp
                           001983  5704 	C$queue.c$2261$1_0$370 ==.
                           001983  5705 	XFqueue$prvCopyDataFromQueue$0$0 ==.
      001983 22               [24] 5706 	ret
                                   5707 ;------------------------------------------------------------
                                   5708 ;Allocation info for local variables in function 'prvUnlockQueue'
                                   5709 ;------------------------------------------------------------
                                   5710 ;pxQueue                   Allocated to stack - _bp +1
                                   5711 ;cTxLock                   Allocated to registers 
                                   5712 ;cRxLock                   Allocated to registers 
                                   5713 ;sloc0                     Allocated to stack - _bp +4
                                   5714 ;sloc1                     Allocated to stack - _bp +7
                                   5715 ;------------------------------------------------------------
                           001984  5716 	Fqueue$prvUnlockQueue$0$0 ==.
                           001984  5717 	C$queue.c$2264$1_0$375 ==.
                                   5718 ;	queue.c:2264: static void prvUnlockQueue( Queue_t * const pxQueue )
                                   5719 ;	-----------------------------------------
                                   5720 ;	 function prvUnlockQueue
                                   5721 ;	-----------------------------------------
      001984                       5722 _prvUnlockQueue:
      001984 C0*00            [24] 5723 	push	_bp
      001986 85 81*00         [24] 5724 	mov	_bp,sp
      001989 C0 82            [24] 5725 	push	dpl
      00198B C0 83            [24] 5726 	push	dph
      00198D C0 F0            [24] 5727 	push	b
      00198F E5 81            [12] 5728 	mov	a,sp
      001991 24 04            [12] 5729 	add	a,#0x04
      001993 F5 81            [12] 5730 	mov	sp,a
                           001995  5731 	C$queue.c$2272$1_0$375 ==.
                                   5732 ;	queue.c:2272: taskENTER_CRITICAL();
      001995 C0 E0            [24] 5733 	push ACC 
      001997 C0 A8            [24] 5734 	push IE 
                                   5735 ;	assignBit
      001999 C2 AF            [12] 5736 	clr	_EA
                           00199B  5737 	C$queue.c$2274$2_0$376 ==.
                                   5738 ;	queue.c:2274: int8_t cTxLock = pxQueue->cTxLock;
      00199B A8*00            [24] 5739 	mov	r0,_bp
      00199D 08               [12] 5740 	inc	r0
      00199E 74 28            [12] 5741 	mov	a,#0x28
      0019A0 26               [12] 5742 	add	a,@r0
      0019A1 FA               [12] 5743 	mov	r2,a
      0019A2 74 00            [12] 5744 	mov	a,#0x00
      0019A4 08               [12] 5745 	inc	r0
      0019A5 36               [12] 5746 	addc	a,@r0
      0019A6 FB               [12] 5747 	mov	r3,a
      0019A7 08               [12] 5748 	inc	r0
      0019A8 86 04            [24] 5749 	mov	ar4,@r0
      0019AA 8A 82            [24] 5750 	mov	dpl,r2
      0019AC 8B 83            [24] 5751 	mov	dph,r3
      0019AE 8C F0            [24] 5752 	mov	b,r4
      0019B0 E5*00            [12] 5753 	mov	a,_bp
      0019B2 24 07            [12] 5754 	add	a,#0x07
      0019B4 F8               [12] 5755 	mov	r0,a
      0019B5 12r00r00         [24] 5756 	lcall	__gptrget
      0019B8 F6               [12] 5757 	mov	@r0,a
                           0019B9  5758 	C$queue.c$2277$4_0$378 ==.
                                   5759 ;	queue.c:2277: while( cTxLock > queueLOCKED_UNMODIFIED )
      0019B9 A8*00            [24] 5760 	mov	r0,_bp
      0019BB 08               [12] 5761 	inc	r0
      0019BC E5*00            [12] 5762 	mov	a,_bp
      0019BE 24 04            [12] 5763 	add	a,#0x04
      0019C0 F9               [12] 5764 	mov	r1,a
      0019C1 74 18            [12] 5765 	mov	a,#0x18
      0019C3 26               [12] 5766 	add	a,@r0
      0019C4 F7               [12] 5767 	mov	@r1,a
      0019C5 74 00            [12] 5768 	mov	a,#0x00
      0019C7 08               [12] 5769 	inc	r0
      0019C8 36               [12] 5770 	addc	a,@r0
      0019C9 09               [12] 5771 	inc	r1
      0019CA F7               [12] 5772 	mov	@r1,a
      0019CB 08               [12] 5773 	inc	r0
      0019CC E6               [12] 5774 	mov	a,@r0
      0019CD 09               [12] 5775 	inc	r1
      0019CE F7               [12] 5776 	mov	@r1,a
      0019CF                       5777 00106$:
      0019CF E5*00            [12] 5778 	mov	a,_bp
      0019D1 24 07            [12] 5779 	add	a,#0x07
      0019D3 F8               [12] 5780 	mov	r0,a
      0019D4 C3               [12] 5781 	clr	c
      0019D5 74 00            [12] 5782 	mov	a,#0x00
      0019D7 64 80            [12] 5783 	xrl	a,#0x80
      0019D9 86 F0            [24] 5784 	mov	b,@r0
      0019DB 63 F0 80         [24] 5785 	xrl	b,#0x80
      0019DE 95 F0            [12] 5786 	subb	a,b
      0019E0 40 03            [24] 5787 	jc	00155$
      0019E2 02r1Ar3D         [24] 5788 	ljmp	00108$
      0019E5                       5789 00155$:
                           0019E5  5790 	C$queue.c$2325$4_0$378 ==.
                                   5791 ;	queue.c:2325: if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
      0019E5 E5*00            [12] 5792 	mov	a,_bp
      0019E7 24 04            [12] 5793 	add	a,#0x04
      0019E9 F8               [12] 5794 	mov	r0,a
      0019EA 86 82            [24] 5795 	mov	dpl,@r0
      0019EC 08               [12] 5796 	inc	r0
      0019ED 86 83            [24] 5797 	mov	dph,@r0
      0019EF 08               [12] 5798 	inc	r0
      0019F0 86 F0            [24] 5799 	mov	b,@r0
      0019F2 12r00r00         [24] 5800 	lcall	__gptrget
      0019F5 70 03            [24] 5801 	jnz	00156$
      0019F7 02r1Ar3D         [24] 5802 	ljmp	00108$
      0019FA                       5803 00156$:
                           0019FA  5804 	C$queue.c$2327$5_0$379 ==.
                                   5805 ;	queue.c:2327: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
      0019FA A8*00            [24] 5806 	mov	r0,_bp
      0019FC 08               [12] 5807 	inc	r0
      0019FD 74 18            [12] 5808 	mov	a,#0x18
      0019FF 26               [12] 5809 	add	a,@r0
      001A00 FD               [12] 5810 	mov	r5,a
      001A01 74 00            [12] 5811 	mov	a,#0x00
      001A03 08               [12] 5812 	inc	r0
      001A04 36               [12] 5813 	addc	a,@r0
      001A05 FE               [12] 5814 	mov	r6,a
      001A06 08               [12] 5815 	inc	r0
      001A07 86 07            [24] 5816 	mov	ar7,@r0
      001A09 8D 82            [24] 5817 	mov	dpl,r5
      001A0B 8E 83            [24] 5818 	mov	dph,r6
      001A0D 8F F0            [24] 5819 	mov	b,r7
      001A0F C0 04            [24] 5820 	push	ar4
      001A11 C0 03            [24] 5821 	push	ar3
      001A13 C0 02            [24] 5822 	push	ar2
      001A15 12r00r00         [24] 5823 	lcall	_xTaskRemoveFromEventList
      001A18 E5 82            [12] 5824 	mov	a,dpl
      001A1A D0 02            [24] 5825 	pop	ar2
      001A1C D0 03            [24] 5826 	pop	ar3
      001A1E D0 04            [24] 5827 	pop	ar4
      001A20 70 03            [24] 5828 	jnz	00157$
      001A22 02r1Ar34         [24] 5829 	ljmp	00105$
      001A25                       5830 00157$:
                           001A25  5831 	C$queue.c$2331$6_0$380 ==.
                                   5832 ;	queue.c:2331: vTaskMissedYield();
      001A25 C0 04            [24] 5833 	push	ar4
      001A27 C0 03            [24] 5834 	push	ar3
      001A29 C0 02            [24] 5835 	push	ar2
      001A2B 12r00r00         [24] 5836 	lcall	_vTaskMissedYield
      001A2E D0 02            [24] 5837 	pop	ar2
      001A30 D0 03            [24] 5838 	pop	ar3
      001A32 D0 04            [24] 5839 	pop	ar4
                           001A34  5840 	C$queue.c$2340$4_0$378 ==.
                                   5841 ;	queue.c:2340: break;
      001A34                       5842 00105$:
                           001A34  5843 	C$queue.c$2345$3_0$377 ==.
                                   5844 ;	queue.c:2345: --cTxLock;
      001A34 E5*00            [12] 5845 	mov	a,_bp
      001A36 24 07            [12] 5846 	add	a,#0x07
      001A38 F8               [12] 5847 	mov	r0,a
      001A39 16               [12] 5848 	dec	@r0
      001A3A 02r19rCF         [24] 5849 	ljmp	00106$
      001A3D                       5850 00108$:
                           001A3D  5851 	C$queue.c$2348$2_0$376 ==.
                                   5852 ;	queue.c:2348: pxQueue->cTxLock = queueUNLOCKED;
      001A3D 8A 82            [24] 5853 	mov	dpl,r2
      001A3F 8B 83            [24] 5854 	mov	dph,r3
      001A41 8C F0            [24] 5855 	mov	b,r4
      001A43 74 FF            [12] 5856 	mov	a,#0xff
      001A45 12r00r00         [24] 5857 	lcall	__gptrput
                           001A48  5858 	C$queue.c$2350$1_0$375 ==.
                                   5859 ;	queue.c:2350: taskEXIT_CRITICAL();
      001A48 D0 E0            [24] 5860 	pop ACC 
      001A4A 53 E0 80         [24] 5861 	anl	_ACC,#0x80
      001A4D E5 E0            [12] 5862 	mov	a,_ACC
      001A4F 42 A8            [12] 5863 	orl	_IE,a
      001A51 D0 E0            [24] 5864 	pop ACC 
                           001A53  5865 	C$queue.c$2353$1_0$375 ==.
                                   5866 ;	queue.c:2353: taskENTER_CRITICAL();
      001A53 C0 E0            [24] 5867 	push ACC 
      001A55 C0 A8            [24] 5868 	push IE 
                                   5869 ;	assignBit
      001A57 C2 AF            [12] 5870 	clr	_EA
                           001A59  5871 	C$queue.c$2355$2_0$383 ==.
                                   5872 ;	queue.c:2355: int8_t cRxLock = pxQueue->cRxLock;
      001A59 A8*00            [24] 5873 	mov	r0,_bp
      001A5B 08               [12] 5874 	inc	r0
      001A5C 74 27            [12] 5875 	mov	a,#0x27
      001A5E 26               [12] 5876 	add	a,@r0
      001A5F FD               [12] 5877 	mov	r5,a
      001A60 74 00            [12] 5878 	mov	a,#0x00
      001A62 08               [12] 5879 	inc	r0
      001A63 36               [12] 5880 	addc	a,@r0
      001A64 FE               [12] 5881 	mov	r6,a
      001A65 08               [12] 5882 	inc	r0
      001A66 86 07            [24] 5883 	mov	ar7,@r0
      001A68 8D 82            [24] 5884 	mov	dpl,r5
      001A6A 8E 83            [24] 5885 	mov	dph,r6
      001A6C 8F F0            [24] 5886 	mov	b,r7
      001A6E 12r00r00         [24] 5887 	lcall	__gptrget
      001A71 FC               [12] 5888 	mov	r4,a
                           001A72  5889 	C$queue.c$2357$3_0$384 ==.
                                   5890 ;	queue.c:2357: while( cRxLock > queueLOCKED_UNMODIFIED )
      001A72 A8*00            [24] 5891 	mov	r0,_bp
      001A74 08               [12] 5892 	inc	r0
      001A75 E5*00            [12] 5893 	mov	a,_bp
      001A77 24 04            [12] 5894 	add	a,#0x04
      001A79 F9               [12] 5895 	mov	r1,a
      001A7A 74 0C            [12] 5896 	mov	a,#0x0c
      001A7C 26               [12] 5897 	add	a,@r0
      001A7D F7               [12] 5898 	mov	@r1,a
      001A7E 74 00            [12] 5899 	mov	a,#0x00
      001A80 08               [12] 5900 	inc	r0
      001A81 36               [12] 5901 	addc	a,@r0
      001A82 09               [12] 5902 	inc	r1
      001A83 F7               [12] 5903 	mov	@r1,a
      001A84 08               [12] 5904 	inc	r0
      001A85 E6               [12] 5905 	mov	a,@r0
      001A86 09               [12] 5906 	inc	r1
      001A87 F7               [12] 5907 	mov	@r1,a
      001A88                       5908 00114$:
      001A88 C3               [12] 5909 	clr	c
      001A89 74 00            [12] 5910 	mov	a,#0x00
      001A8B 64 80            [12] 5911 	xrl	a,#0x80
      001A8D 8C F0            [24] 5912 	mov	b,r4
      001A8F 63 F0 80         [24] 5913 	xrl	b,#0x80
      001A92 95 F0            [12] 5914 	subb	a,b
      001A94 40 03            [24] 5915 	jc	00158$
      001A96 02r1Br00         [24] 5916 	ljmp	00116$
      001A99                       5917 00158$:
                           001A99  5918 	C$queue.c$2359$3_0$384 ==.
                                   5919 ;	queue.c:2359: if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
      001A99 E5*00            [12] 5920 	mov	a,_bp
      001A9B 24 04            [12] 5921 	add	a,#0x04
      001A9D F8               [12] 5922 	mov	r0,a
      001A9E 86 82            [24] 5923 	mov	dpl,@r0
      001AA0 08               [12] 5924 	inc	r0
      001AA1 86 83            [24] 5925 	mov	dph,@r0
      001AA3 08               [12] 5926 	inc	r0
      001AA4 86 F0            [24] 5927 	mov	b,@r0
      001AA6 12r00r00         [24] 5928 	lcall	__gptrget
      001AA9 70 03            [24] 5929 	jnz	00159$
      001AAB 02r1Br00         [24] 5930 	ljmp	00116$
      001AAE                       5931 00159$:
                           001AAE  5932 	C$queue.c$2361$1_0$375 ==.
                                   5933 ;	queue.c:2361: if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
      001AAE C0 05            [24] 5934 	push	ar5
      001AB0 C0 06            [24] 5935 	push	ar6
      001AB2 C0 07            [24] 5936 	push	ar7
      001AB4 A8*00            [24] 5937 	mov	r0,_bp
      001AB6 08               [12] 5938 	inc	r0
      001AB7 74 0C            [12] 5939 	mov	a,#0x0c
      001AB9 26               [12] 5940 	add	a,@r0
      001ABA FA               [12] 5941 	mov	r2,a
      001ABB 74 00            [12] 5942 	mov	a,#0x00
      001ABD 08               [12] 5943 	inc	r0
      001ABE 36               [12] 5944 	addc	a,@r0
      001ABF FB               [12] 5945 	mov	r3,a
      001AC0 08               [12] 5946 	inc	r0
      001AC1 86 07            [24] 5947 	mov	ar7,@r0
      001AC3 8A 82            [24] 5948 	mov	dpl,r2
      001AC5 8B 83            [24] 5949 	mov	dph,r3
      001AC7 8F F0            [24] 5950 	mov	b,r7
      001AC9 C0 07            [24] 5951 	push	ar7
      001ACB C0 06            [24] 5952 	push	ar6
      001ACD C0 05            [24] 5953 	push	ar5
      001ACF C0 04            [24] 5954 	push	ar4
      001AD1 12r00r00         [24] 5955 	lcall	_xTaskRemoveFromEventList
      001AD4 E5 82            [12] 5956 	mov	a,dpl
      001AD6 D0 04            [24] 5957 	pop	ar4
      001AD8 D0 05            [24] 5958 	pop	ar5
      001ADA D0 06            [24] 5959 	pop	ar6
      001ADC D0 07            [24] 5960 	pop	ar7
      001ADE D0 07            [24] 5961 	pop	ar7
      001AE0 D0 06            [24] 5962 	pop	ar6
      001AE2 D0 05            [24] 5963 	pop	ar5
      001AE4 70 03            [24] 5964 	jnz	00160$
      001AE6 02r1ArFC         [24] 5965 	ljmp	00110$
      001AE9                       5966 00160$:
                           001AE9  5967 	C$queue.c$2363$5_0$386 ==.
                                   5968 ;	queue.c:2363: vTaskMissedYield();
      001AE9 C0 07            [24] 5969 	push	ar7
      001AEB C0 06            [24] 5970 	push	ar6
      001AED C0 05            [24] 5971 	push	ar5
      001AEF C0 04            [24] 5972 	push	ar4
      001AF1 12r00r00         [24] 5973 	lcall	_vTaskMissedYield
      001AF4 D0 04            [24] 5974 	pop	ar4
      001AF6 D0 05            [24] 5975 	pop	ar5
      001AF8 D0 06            [24] 5976 	pop	ar6
      001AFA D0 07            [24] 5977 	pop	ar7
      001AFC                       5978 00110$:
                           001AFC  5979 	C$queue.c$2370$4_0$385 ==.
                                   5980 ;	queue.c:2370: --cRxLock;
      001AFC 1C               [12] 5981 	dec	r4
      001AFD 02r1Ar88         [24] 5982 	ljmp	00114$
                           001B00  5983 	C$queue.c$2374$2_0$383 ==.
                                   5984 ;	queue.c:2374: break;
      001B00                       5985 00116$:
                           001B00  5986 	C$queue.c$2378$2_0$383 ==.
                                   5987 ;	queue.c:2378: pxQueue->cRxLock = queueUNLOCKED;
      001B00 8D 82            [24] 5988 	mov	dpl,r5
      001B02 8E 83            [24] 5989 	mov	dph,r6
      001B04 8F F0            [24] 5990 	mov	b,r7
      001B06 74 FF            [12] 5991 	mov	a,#0xff
      001B08 12r00r00         [24] 5992 	lcall	__gptrput
                           001B0B  5993 	C$queue.c$2380$1_0$375 ==.
                                   5994 ;	queue.c:2380: taskEXIT_CRITICAL();
      001B0B D0 E0            [24] 5995 	pop ACC 
      001B0D 53 E0 80         [24] 5996 	anl	_ACC,#0x80
      001B10 E5 E0            [12] 5997 	mov	a,_ACC
      001B12 42 A8            [12] 5998 	orl	_IE,a
      001B14 D0 E0            [24] 5999 	pop ACC 
      001B16                       6000 00117$:
                           001B16  6001 	C$queue.c$2381$1_0$375 ==.
                                   6002 ;	queue.c:2381: }
      001B16 85*00 81         [24] 6003 	mov	sp,_bp
      001B19 D0*00            [24] 6004 	pop	_bp
                           001B1B  6005 	C$queue.c$2381$1_0$375 ==.
                           001B1B  6006 	XFqueue$prvUnlockQueue$0$0 ==.
      001B1B 22               [24] 6007 	ret
                                   6008 ;------------------------------------------------------------
                                   6009 ;Allocation info for local variables in function 'prvIsQueueEmpty'
                                   6010 ;------------------------------------------------------------
                                   6011 ;pxQueue                   Allocated to registers r5 r6 r7 
                                   6012 ;xReturn                   Allocated to registers r7 
                                   6013 ;------------------------------------------------------------
                           001B1C  6014 	Fqueue$prvIsQueueEmpty$0$0 ==.
                           001B1C  6015 	C$queue.c$2384$1_0$390 ==.
                                   6016 ;	queue.c:2384: static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
                                   6017 ;	-----------------------------------------
                                   6018 ;	 function prvIsQueueEmpty
                                   6019 ;	-----------------------------------------
      001B1C                       6020 _prvIsQueueEmpty:
      001B1C AD 82            [24] 6021 	mov	r5,dpl
      001B1E AE 83            [24] 6022 	mov	r6,dph
      001B20 AF F0            [24] 6023 	mov	r7,b
                           001B22  6024 	C$queue.c$2388$1_0$390 ==.
                                   6025 ;	queue.c:2388: taskENTER_CRITICAL();
      001B22 C0 E0            [24] 6026 	push ACC 
      001B24 C0 A8            [24] 6027 	push IE 
                                   6028 ;	assignBit
      001B26 C2 AF            [12] 6029 	clr	_EA
                           001B28  6030 	C$queue.c$2390$2_0$391 ==.
                                   6031 ;	queue.c:2390: if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
      001B28 74 24            [12] 6032 	mov	a,#0x24
      001B2A 2D               [12] 6033 	add	a,r5
      001B2B FD               [12] 6034 	mov	r5,a
      001B2C 74 00            [12] 6035 	mov	a,#0x00
      001B2E 3E               [12] 6036 	addc	a,r6
      001B2F FE               [12] 6037 	mov	r6,a
      001B30 8D 82            [24] 6038 	mov	dpl,r5
      001B32 8E 83            [24] 6039 	mov	dph,r6
      001B34 8F F0            [24] 6040 	mov	b,r7
      001B36 12r00r00         [24] 6041 	lcall	__gptrget
      001B39 60 03            [24] 6042 	jz	00110$
      001B3B 02r1Br43         [24] 6043 	ljmp	00102$
      001B3E                       6044 00110$:
                           001B3E  6045 	C$queue.c$2392$3_0$392 ==.
                                   6046 ;	queue.c:2392: xReturn = pdTRUE;
      001B3E 7F 01            [12] 6047 	mov	r7,#0x01
      001B40 02r1Br45         [24] 6048 	ljmp	00103$
      001B43                       6049 00102$:
                           001B43  6050 	C$queue.c$2396$3_0$393 ==.
                                   6051 ;	queue.c:2396: xReturn = pdFALSE;
      001B43 7F 00            [12] 6052 	mov	r7,#0x00
      001B45                       6053 00103$:
                           001B45  6054 	C$queue.c$2399$1_0$390 ==.
                                   6055 ;	queue.c:2399: taskEXIT_CRITICAL();
      001B45 D0 E0            [24] 6056 	pop ACC 
      001B47 53 E0 80         [24] 6057 	anl	_ACC,#0x80
      001B4A E5 E0            [12] 6058 	mov	a,_ACC
      001B4C 42 A8            [12] 6059 	orl	_IE,a
      001B4E D0 E0            [24] 6060 	pop ACC 
                           001B50  6061 	C$queue.c$2401$1_0$390 ==.
                                   6062 ;	queue.c:2401: return xReturn;
      001B50 8F 82            [24] 6063 	mov	dpl,r7
      001B52                       6064 00104$:
                           001B52  6065 	C$queue.c$2402$1_0$390 ==.
                                   6066 ;	queue.c:2402: }
                           001B52  6067 	C$queue.c$2402$1_0$390 ==.
                           001B52  6068 	XFqueue$prvIsQueueEmpty$0$0 ==.
      001B52 22               [24] 6069 	ret
                                   6070 ;------------------------------------------------------------
                                   6071 ;Allocation info for local variables in function 'xQueueIsQueueEmptyFromISR'
                                   6072 ;------------------------------------------------------------
                                   6073 ;xQueue                    Allocated to registers r5 r6 r7 
                                   6074 ;xReturn                   Allocated to registers r7 
                                   6075 ;pxQueue                   Allocated to registers 
                                   6076 ;------------------------------------------------------------
                           001B53  6077 	G$xQueueIsQueueEmptyFromISR$0$0 ==.
                           001B53  6078 	C$queue.c$2405$1_0$395 ==.
                                   6079 ;	queue.c:2405: BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
                                   6080 ;	-----------------------------------------
                                   6081 ;	 function xQueueIsQueueEmptyFromISR
                                   6082 ;	-----------------------------------------
      001B53                       6083 _xQueueIsQueueEmptyFromISR:
      001B53 AD 82            [24] 6084 	mov	r5,dpl
      001B55 AE 83            [24] 6085 	mov	r6,dph
      001B57 AF F0            [24] 6086 	mov	r7,b
                           001B59  6087 	C$queue.c$2412$1_0$395 ==.
                                   6088 ;	queue.c:2412: if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
      001B59 74 24            [12] 6089 	mov	a,#0x24
      001B5B 2D               [12] 6090 	add	a,r5
      001B5C FD               [12] 6091 	mov	r5,a
      001B5D 74 00            [12] 6092 	mov	a,#0x00
      001B5F 3E               [12] 6093 	addc	a,r6
      001B60 FE               [12] 6094 	mov	r6,a
      001B61 8D 82            [24] 6095 	mov	dpl,r5
      001B63 8E 83            [24] 6096 	mov	dph,r6
      001B65 8F F0            [24] 6097 	mov	b,r7
      001B67 12r00r00         [24] 6098 	lcall	__gptrget
      001B6A 60 03            [24] 6099 	jz	00110$
      001B6C 02r1Br74         [24] 6100 	ljmp	00102$
      001B6F                       6101 00110$:
                           001B6F  6102 	C$queue.c$2414$2_0$396 ==.
                                   6103 ;	queue.c:2414: xReturn = pdTRUE;
      001B6F 7F 01            [12] 6104 	mov	r7,#0x01
      001B71 02r1Br76         [24] 6105 	ljmp	00103$
      001B74                       6106 00102$:
                           001B74  6107 	C$queue.c$2418$2_0$397 ==.
                                   6108 ;	queue.c:2418: xReturn = pdFALSE;
      001B74 7F 00            [12] 6109 	mov	r7,#0x00
      001B76                       6110 00103$:
                           001B76  6111 	C$queue.c$2421$1_0$395 ==.
                                   6112 ;	queue.c:2421: return xReturn;
      001B76 8F 82            [24] 6113 	mov	dpl,r7
      001B78                       6114 00104$:
                           001B78  6115 	C$queue.c$2422$1_0$395 ==.
                                   6116 ;	queue.c:2422: } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
                           001B78  6117 	C$queue.c$2422$1_0$395 ==.
                           001B78  6118 	XG$xQueueIsQueueEmptyFromISR$0$0 ==.
      001B78 22               [24] 6119 	ret
                                   6120 ;------------------------------------------------------------
                                   6121 ;Allocation info for local variables in function 'prvIsQueueFull'
                                   6122 ;------------------------------------------------------------
                                   6123 ;pxQueue                   Allocated to registers r5 r6 r7 
                                   6124 ;xReturn                   Allocated to registers r7 
                                   6125 ;------------------------------------------------------------
                           001B79  6126 	Fqueue$prvIsQueueFull$0$0 ==.
                           001B79  6127 	C$queue.c$2425$1_0$399 ==.
                                   6128 ;	queue.c:2425: static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
                                   6129 ;	-----------------------------------------
                                   6130 ;	 function prvIsQueueFull
                                   6131 ;	-----------------------------------------
      001B79                       6132 _prvIsQueueFull:
      001B79 AD 82            [24] 6133 	mov	r5,dpl
      001B7B AE 83            [24] 6134 	mov	r6,dph
      001B7D AF F0            [24] 6135 	mov	r7,b
                           001B7F  6136 	C$queue.c$2429$1_0$399 ==.
                                   6137 ;	queue.c:2429: taskENTER_CRITICAL();
      001B7F C0 E0            [24] 6138 	push ACC 
      001B81 C0 A8            [24] 6139 	push IE 
                                   6140 ;	assignBit
      001B83 C2 AF            [12] 6141 	clr	_EA
                           001B85  6142 	C$queue.c$2431$2_0$400 ==.
                                   6143 ;	queue.c:2431: if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
      001B85 74 24            [12] 6144 	mov	a,#0x24
      001B87 2D               [12] 6145 	add	a,r5
      001B88 FA               [12] 6146 	mov	r2,a
      001B89 74 00            [12] 6147 	mov	a,#0x00
      001B8B 3E               [12] 6148 	addc	a,r6
      001B8C FB               [12] 6149 	mov	r3,a
      001B8D 8F 04            [24] 6150 	mov	ar4,r7
      001B8F 8A 82            [24] 6151 	mov	dpl,r2
      001B91 8B 83            [24] 6152 	mov	dph,r3
      001B93 8C F0            [24] 6153 	mov	b,r4
      001B95 12r00r00         [24] 6154 	lcall	__gptrget
      001B98 FA               [12] 6155 	mov	r2,a
      001B99 74 25            [12] 6156 	mov	a,#0x25
      001B9B 2D               [12] 6157 	add	a,r5
      001B9C FD               [12] 6158 	mov	r5,a
      001B9D 74 00            [12] 6159 	mov	a,#0x00
      001B9F 3E               [12] 6160 	addc	a,r6
      001BA0 FE               [12] 6161 	mov	r6,a
      001BA1 8D 82            [24] 6162 	mov	dpl,r5
      001BA3 8E 83            [24] 6163 	mov	dph,r6
      001BA5 8F F0            [24] 6164 	mov	b,r7
      001BA7 12r00r00         [24] 6165 	lcall	__gptrget
      001BAA FD               [12] 6166 	mov	r5,a
      001BAB EA               [12] 6167 	mov	a,r2
      001BAC B5 05 02         [24] 6168 	cjne	a,ar5,00110$
      001BAF 80 03            [24] 6169 	sjmp	00111$
      001BB1                       6170 00110$:
      001BB1 02r1BrB9         [24] 6171 	ljmp	00102$
      001BB4                       6172 00111$:
                           001BB4  6173 	C$queue.c$2433$3_0$401 ==.
                                   6174 ;	queue.c:2433: xReturn = pdTRUE;
      001BB4 7F 01            [12] 6175 	mov	r7,#0x01
      001BB6 02r1BrBB         [24] 6176 	ljmp	00103$
      001BB9                       6177 00102$:
                           001BB9  6178 	C$queue.c$2437$3_0$402 ==.
                                   6179 ;	queue.c:2437: xReturn = pdFALSE;
      001BB9 7F 00            [12] 6180 	mov	r7,#0x00
      001BBB                       6181 00103$:
                           001BBB  6182 	C$queue.c$2440$1_0$399 ==.
                                   6183 ;	queue.c:2440: taskEXIT_CRITICAL();
      001BBB D0 E0            [24] 6184 	pop ACC 
      001BBD 53 E0 80         [24] 6185 	anl	_ACC,#0x80
      001BC0 E5 E0            [12] 6186 	mov	a,_ACC
      001BC2 42 A8            [12] 6187 	orl	_IE,a
      001BC4 D0 E0            [24] 6188 	pop ACC 
                           001BC6  6189 	C$queue.c$2442$1_0$399 ==.
                                   6190 ;	queue.c:2442: return xReturn;
      001BC6 8F 82            [24] 6191 	mov	dpl,r7
      001BC8                       6192 00104$:
                           001BC8  6193 	C$queue.c$2443$1_0$399 ==.
                                   6194 ;	queue.c:2443: }
                           001BC8  6195 	C$queue.c$2443$1_0$399 ==.
                           001BC8  6196 	XFqueue$prvIsQueueFull$0$0 ==.
      001BC8 22               [24] 6197 	ret
                                   6198 ;------------------------------------------------------------
                                   6199 ;Allocation info for local variables in function 'xQueueIsQueueFullFromISR'
                                   6200 ;------------------------------------------------------------
                                   6201 ;xQueue                    Allocated to registers r5 r6 r7 
                                   6202 ;xReturn                   Allocated to registers r7 
                                   6203 ;pxQueue                   Allocated to registers 
                                   6204 ;------------------------------------------------------------
                           001BC9  6205 	G$xQueueIsQueueFullFromISR$0$0 ==.
                           001BC9  6206 	C$queue.c$2446$1_0$404 ==.
                                   6207 ;	queue.c:2446: BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
                                   6208 ;	-----------------------------------------
                                   6209 ;	 function xQueueIsQueueFullFromISR
                                   6210 ;	-----------------------------------------
      001BC9                       6211 _xQueueIsQueueFullFromISR:
      001BC9 AD 82            [24] 6212 	mov	r5,dpl
      001BCB AE 83            [24] 6213 	mov	r6,dph
      001BCD AF F0            [24] 6214 	mov	r7,b
                           001BCF  6215 	C$queue.c$2453$1_0$404 ==.
                                   6216 ;	queue.c:2453: if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
      001BCF 74 24            [12] 6217 	mov	a,#0x24
      001BD1 2D               [12] 6218 	add	a,r5
      001BD2 FA               [12] 6219 	mov	r2,a
      001BD3 74 00            [12] 6220 	mov	a,#0x00
      001BD5 3E               [12] 6221 	addc	a,r6
      001BD6 FB               [12] 6222 	mov	r3,a
      001BD7 8F 04            [24] 6223 	mov	ar4,r7
      001BD9 8A 82            [24] 6224 	mov	dpl,r2
      001BDB 8B 83            [24] 6225 	mov	dph,r3
      001BDD 8C F0            [24] 6226 	mov	b,r4
      001BDF 12r00r00         [24] 6227 	lcall	__gptrget
      001BE2 FA               [12] 6228 	mov	r2,a
      001BE3 74 25            [12] 6229 	mov	a,#0x25
      001BE5 2D               [12] 6230 	add	a,r5
      001BE6 FD               [12] 6231 	mov	r5,a
      001BE7 74 00            [12] 6232 	mov	a,#0x00
      001BE9 3E               [12] 6233 	addc	a,r6
      001BEA FE               [12] 6234 	mov	r6,a
      001BEB 8D 82            [24] 6235 	mov	dpl,r5
      001BED 8E 83            [24] 6236 	mov	dph,r6
      001BEF 8F F0            [24] 6237 	mov	b,r7
      001BF1 12r00r00         [24] 6238 	lcall	__gptrget
      001BF4 FD               [12] 6239 	mov	r5,a
      001BF5 EA               [12] 6240 	mov	a,r2
      001BF6 B5 05 02         [24] 6241 	cjne	a,ar5,00110$
      001BF9 80 03            [24] 6242 	sjmp	00111$
      001BFB                       6243 00110$:
      001BFB 02r1Cr03         [24] 6244 	ljmp	00102$
      001BFE                       6245 00111$:
                           001BFE  6246 	C$queue.c$2455$2_0$405 ==.
                                   6247 ;	queue.c:2455: xReturn = pdTRUE;
      001BFE 7F 01            [12] 6248 	mov	r7,#0x01
      001C00 02r1Cr05         [24] 6249 	ljmp	00103$
      001C03                       6250 00102$:
                           001C03  6251 	C$queue.c$2459$2_0$406 ==.
                                   6252 ;	queue.c:2459: xReturn = pdFALSE;
      001C03 7F 00            [12] 6253 	mov	r7,#0x00
      001C05                       6254 00103$:
                           001C05  6255 	C$queue.c$2462$1_0$404 ==.
                                   6256 ;	queue.c:2462: return xReturn;
      001C05 8F 82            [24] 6257 	mov	dpl,r7
      001C07                       6258 00104$:
                           001C07  6259 	C$queue.c$2463$1_0$404 ==.
                                   6260 ;	queue.c:2463: } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
                           001C07  6261 	C$queue.c$2463$1_0$404 ==.
                           001C07  6262 	XG$xQueueIsQueueFullFromISR$0$0 ==.
      001C07 22               [24] 6263 	ret
                                   6264 	.area CSEG    (CODE)
                                   6265 	.area CONST   (CODE)
                                   6266 	.area XINIT   (CODE)
                                   6267 	.area CABS    (ABS,CODE)
